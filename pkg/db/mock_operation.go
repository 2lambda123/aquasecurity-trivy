// Code generated by mockery 2.9.4. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockOperation is an autogenerated mock type for the Operation type
type MockOperation struct {
	mock.Mock
}

// Download provides a mock function with given fields: ctx, cacheDir, light
func (_m *MockOperation) Download(ctx context.Context, cacheDir string, light bool) error {
	ret := _m.Called(ctx, cacheDir, light)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, cacheDir, light)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NeedsUpdate provides a mock function with given fields: cliVersion, light, skip
func (_m *MockOperation) NeedsUpdate(cliVersion string, light bool, skip bool) (bool, error) {
	ret := _m.Called(cliVersion, light, skip)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, bool, bool) bool); ok {
		r0 = rf(cliVersion, light, skip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, bool) error); ok {
		r1 = rf(cliVersion, light, skip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetadata provides a mock function with given fields: cacheDir, light
func (_m *MockOperation) UpdateMetadata(cacheDir string, light bool) error {
	ret := _m.Called(cacheDir, light)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(cacheDir, light)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
