// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package local

import (
	"github.com/aquasecurity/trivy/pkg/fanal/types"
	"github.com/stretchr/testify/mock"
)

// MockApplier is an autogenerated mock type for the Applier type
type MockApplier struct {
	mock.Mock
}

type ApplierApplyLayersArgs struct {
	ArtifactID         string
	ArtifactIDAnything bool
	BlobIDs            []string
	BlobIDsAnything    bool
}

type ApplierApplyLayersReturns struct {
	Detail types.ArtifactDetail
	Err    error
}

type ApplierApplyLayersExpectation struct {
	Args    ApplierApplyLayersArgs
	Returns ApplierApplyLayersReturns
}

func (_m *MockApplier) ApplyApplyLayersExpectation(e ApplierApplyLayersExpectation) {
	var args []interface{}
	if e.Args.ArtifactIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.ArtifactID)
	}
	if e.Args.BlobIDsAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.BlobIDs)
	}

	_m.On("ApplyLayers", args...).Return(e.Returns.Detail, e.Returns.Err)
}

// ApplyLayers provides a mock function with given fields: artifactID, blobIDs
func (_m *MockApplier) ApplyLayers(artifactID string, blobIDs []string) (types.ArtifactDetail, error) {
	ret := _m.Called(artifactID, blobIDs)

	if len(ret) == 0 {
		panic("no return value specified for ApplyLayers")
	}

	var r0 types.ArtifactDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (types.ArtifactDetail, error)); ok {
		return rf(artifactID, blobIDs)
	}
	if rf, ok := ret.Get(0).(func(string, []string) types.ArtifactDetail); ok {
		r0 = rf(artifactID, blobIDs)
	} else {
		r0 = ret.Get(0).(types.ArtifactDetail)
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(artifactID, blobIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockApplier creates a new instance of MockApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApplier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApplier {
	mock := &MockApplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
