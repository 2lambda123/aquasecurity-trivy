// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package scanner

import (
	context "context"

	fanaltypes "github.com/aquasecurity/trivy/pkg/fanal/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aquasecurity/trivy/pkg/types"
)

// MockDriver is an autogenerated mock type for the Driver type
type MockDriver struct {
	mock.Mock
}

type DriverScanArgs struct {
	Ctx                 context.Context
	CtxAnything         bool
	Target              string
	TargetAnything      bool
	ArtifactKey         string
	ArtifactKeyAnything bool
	BlobKeys            []string
	BlobKeysAnything    bool
	Options             types.ScanOptions
	OptionsAnything     bool
}

type DriverScanReturns struct {
	Results types.Results
	OsFound fanaltypes.OS
	Err     error
}

type DriverScanExpectation struct {
	Args    DriverScanArgs
	Returns DriverScanReturns
}

func (_m *MockDriver) ApplyScanExpectation(e DriverScanExpectation) {
	var args []interface{}
	if e.Args.CtxAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Ctx)
	}
	if e.Args.TargetAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Target)
	}
	if e.Args.ArtifactKeyAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.ArtifactKey)
	}
	if e.Args.BlobKeysAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.BlobKeys)
	}
	if e.Args.OptionsAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.Options)
	}

	_m.On("Scan", args...).Return(e.Returns.Results, e.Returns.OsFound, e.Returns.Err)
}

// Scan provides a mock function with given fields: ctx, target, artifactKey, blobKeys, options
func (_m *MockDriver) Scan(ctx context.Context, target string, artifactKey string, blobKeys []string, options types.ScanOptions) (types.Results, fanaltypes.OS, error) {
	ret := _m.Called(ctx, target, artifactKey, blobKeys, options)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 types.Results
	var r1 fanaltypes.OS
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, types.ScanOptions) (types.Results, fanaltypes.OS, error)); ok {
		return rf(ctx, target, artifactKey, blobKeys, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, types.ScanOptions) types.Results); ok {
		r0 = rf(ctx, target, artifactKey, blobKeys, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string, types.ScanOptions) fanaltypes.OS); ok {
		r1 = rf(ctx, target, artifactKey, blobKeys, options)
	} else {
		r1 = ret.Get(1).(fanaltypes.OS)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, []string, types.ScanOptions) error); ok {
		r2 = rf(ctx, target, artifactKey, blobKeys, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockDriver creates a new instance of MockDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDriver {
	mock := &MockDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
