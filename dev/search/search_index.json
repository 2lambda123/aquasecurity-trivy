{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Trivy ( tri pronounced like tri gger, vy pronounced like en vy ) is a simple and comprehensive vulnerability / misconfiguration / secret scanner for containers and other artifacts. Trivy detects vulnerabilities of OS packages (Alpine, RHEL, CentOS, etc.) and language-specific packages (Bundler, Composer, npm, yarn, etc.). In addition, Trivy scans Infrastructure as Code (IaC) files such as Terraform and Kubernetes, to detect potential configuration issues that expose your deployments to the risk of attack. Trivy also scans hardcoded secrets like passwords, API keys and tokens. Trivy is easy to use. Just install the binary and you're ready to scan. All you need to do for scanning is to specify a target such as an image name of the container. Demo Demo: Vulnerability Detection Demo: Misconfiguration Detection Demo: Secret Detection Trivy is an Aqua Security open source project. Learn about our open source work and portfolio here . Contact us about any matter by opening a GitHub Discussion here","title":"HOME"},{"location":"community/cks/","text":"CKS preparation resources Community Resources Trivy Video overview (short) Example questions from the exam More example questions Aqua Security Blog posts Supply chain security best practices Supply chain attacks If you know of interesting resources, please start a PR to add those to the list.","title":"CKS Reference"},{"location":"community/cks/#cks-preparation-resources","text":"Community Resources Trivy Video overview (short) Example questions from the exam More example questions Aqua Security Blog posts Supply chain security best practices Supply chain attacks If you know of interesting resources, please start a PR to add those to the list.","title":"CKS preparation resources"},{"location":"community/credit/","text":"Author Teppei Fukuda (knqyf263) Contributors Thanks to all contributors","title":"Credits"},{"location":"community/credit/#author","text":"Teppei Fukuda (knqyf263)","title":"Author"},{"location":"community/credit/#contributors","text":"Thanks to all contributors","title":"Contributors"},{"location":"community/references/","text":"Additional References There are external blogs and evaluations. Blogs Trivy Vulnerability Scanner Joins the Aqua Open-source Family Trivy Image Vulnerability Scanner Now Under Apache 2.0 License DevSecOps with Trivy and GitHub Actions Find Image Vulnerabilities Using GitHub and Aqua Security Trivy Action Using Trivy to Discover Vulnerabilities in VS Code Projects the vulnerability remediation lifecycle of Alpine containers Continuous Container Vulnerability Testing with Trivy Open Source CVE Scanner Round-Up: Clair vs Anchore vs Trivy Docker Image Security: Static Analysis Tool Comparison \u2013 Anchore Engine vs Clair vs Trivy Links Research Spike: evaluate Trivy for scanning running containers Istio evaluates scanners Presentations Aqua Security YouTube Channel Trivy - container image scanning Using Trivy in client server mode Tweaking Trivy output to fit your workflow How does a vulnerability scanner identify packages? CNCF Webinar 2020 Trivy Open Source Scanner for Container Images \u2013 Just Download and Run! KubeCon + CloudNativeCon Europe 2020 Virtual Handling Container Vulnerabilities with Open Policy Agent - Teppei Fukuda, Aqua Security","title":"References"},{"location":"community/references/#additional-references","text":"There are external blogs and evaluations.","title":"Additional References"},{"location":"community/references/#blogs","text":"Trivy Vulnerability Scanner Joins the Aqua Open-source Family Trivy Image Vulnerability Scanner Now Under Apache 2.0 License DevSecOps with Trivy and GitHub Actions Find Image Vulnerabilities Using GitHub and Aqua Security Trivy Action Using Trivy to Discover Vulnerabilities in VS Code Projects the vulnerability remediation lifecycle of Alpine containers Continuous Container Vulnerability Testing with Trivy Open Source CVE Scanner Round-Up: Clair vs Anchore vs Trivy Docker Image Security: Static Analysis Tool Comparison \u2013 Anchore Engine vs Clair vs Trivy","title":"Blogs"},{"location":"community/references/#links","text":"Research Spike: evaluate Trivy for scanning running containers Istio evaluates scanners","title":"Links"},{"location":"community/references/#presentations","text":"Aqua Security YouTube Channel Trivy - container image scanning Using Trivy in client server mode Tweaking Trivy output to fit your workflow How does a vulnerability scanner identify packages? CNCF Webinar 2020 Trivy Open Source Scanner for Container Images \u2013 Just Download and Run! KubeCon + CloudNativeCon Europe 2020 Virtual Handling Container Vulnerabilities with Open Policy Agent - Teppei Fukuda, Aqua Security","title":"Presentations"},{"location":"community/tools/","text":"Community Tools The open source community has been hard at work developing new tools for Trivy. You can check out some of them here. Have you created a tool that\u2019s not listed? Add the name and description of your integration and open a pull request in the GitHub repository to get your change merged. GitHub Actions Actions Description gitrivy GitHub Issue + Trivy trivy-github-issues GitHub Actions for creating GitHub Issues according to the Trivy scanning result Semaphore Name Description Continuous Vulnerability Testing with Trivy Tutorial on scanning code, containers, infrastructure, and Kubernetes with Semaphore CI/CD. CircleCI Orb Description fifteen5/trivy-orb Orb for running Trivy, a security scanner Others Name Description Trivy Vulnerability Explorer Explore trivy vulnerability reports in your browser and create .trivyignore files interactively. Can be integrated in your CI/CD tooling with deep links.","title":"Tools"},{"location":"community/tools/#community-tools","text":"The open source community has been hard at work developing new tools for Trivy. You can check out some of them here. Have you created a tool that\u2019s not listed? Add the name and description of your integration and open a pull request in the GitHub repository to get your change merged.","title":"Community Tools"},{"location":"community/tools/#github-actions","text":"Actions Description gitrivy GitHub Issue + Trivy trivy-github-issues GitHub Actions for creating GitHub Issues according to the Trivy scanning result","title":"GitHub Actions"},{"location":"community/tools/#semaphore","text":"Name Description Continuous Vulnerability Testing with Trivy Tutorial on scanning code, containers, infrastructure, and Kubernetes with Semaphore CI/CD.","title":"Semaphore"},{"location":"community/tools/#circleci","text":"Orb Description fifteen5/trivy-orb Orb for running Trivy, a security scanner","title":"CircleCI"},{"location":"community/tools/#others","text":"Name Description Trivy Vulnerability Explorer Explore trivy vulnerability reports in your browser and create .trivyignore files interactively. Can be integrated in your CI/CD tooling with deep links.","title":"Others"},{"location":"community/contribute/issue/","text":"Thank you for taking interest in contributing to Trivy! Feel free to open issues for any reason. When you open a new issue, you'll have to select an issue kind: bug/feature/support and fill the required information based on the selected template. Please spend a small amount of time giving due diligence to the issue tracker. Your issue might be a duplicate. If it is, please add your comment to the existing issue. Remember that users might search for your issue in the future, so please give it a meaningful title to help others. The issue should clearly explain the reason for opening, the proposal if you have any, and any relevant technical information. Wrong detection Trivy depends on multiple data sources . Sometime these databases contain mistakes. If Trivy can't detect any CVE-IDs or shows false positive result, at first please follow the next steps: Run Trivy with -f json that shows data sources. According to the shown data source, make sure that the security advisory in the data source is correct. If the data source is correct and Trivy shows wrong results, please raise an issue on Trivy. GitHub Advisory Database Visit here and search CVE-ID. If you find a problem, it'll be nice to fix it: How to contribute to a GitHub security advisory GitLab Advisory Database Visit here and search CVE-ID. If you find a problem, it'll be nice to fix it: Create an issue to GitLab Advisory Database Red Hat CVE Database Visit here and search CVE-ID.","title":"Issues"},{"location":"community/contribute/issue/#wrong-detection","text":"Trivy depends on multiple data sources . Sometime these databases contain mistakes. If Trivy can't detect any CVE-IDs or shows false positive result, at first please follow the next steps: Run Trivy with -f json that shows data sources. According to the shown data source, make sure that the security advisory in the data source is correct. If the data source is correct and Trivy shows wrong results, please raise an issue on Trivy.","title":"Wrong detection"},{"location":"community/contribute/issue/#github-advisory-database","text":"Visit here and search CVE-ID. If you find a problem, it'll be nice to fix it: How to contribute to a GitHub security advisory","title":"GitHub Advisory Database"},{"location":"community/contribute/issue/#gitlab-advisory-database","text":"Visit here and search CVE-ID. If you find a problem, it'll be nice to fix it: Create an issue to GitLab Advisory Database","title":"GitLab Advisory Database"},{"location":"community/contribute/issue/#red-hat-cve-database","text":"Visit here and search CVE-ID.","title":"Red Hat CVE Database"},{"location":"community/contribute/pr/","text":"Thank you for taking interest in contributing to Trivy! Every Pull Request should have an associated bug or feature issue unless you are fixing a trivial documentation issue. Please add the associated Issue link in the PR description. Your PR is more likely to be accepted if it focuses on just one change. There's no need to add or tag reviewers. If a reviewer commented on your code or asked for changes, please remember to respond with comment. Do not mark discussion as resolved. It's up to reviewer to mark it resolved (in case if suggested fix addresses problem properly). PRs with unresolved issues should not be merged (even if the comment is unclear or requires no action from your side). Please include a comment with the results before and after your change. Your PR is more likely to be accepted if it includes tests (We have not historically been very strict about tests, but we would like to improve this!). If your PR affects the user experience in some way, please update the README.md and the CLI help accordingly. Title It is not that strict, but we use the title conventions in this repository. Each commit message doesn't have to follow the conventions as long as it is clear and descriptive since it will be squashed and merged. Format of the title <type>(<scope>): <subject> The type and scope should always be lowercase as shown below. Allowed <type> values: feat for a new feature for the user, not a new feature for build script. Such commit will trigger a release bumping a MINOR version. fix for a bug fix for the user, not a fix to a build script. Such commit will trigger a release bumping a PATCH version. perf for performance improvements. Such commit will trigger a release bumping a PATCH version. docs for changes to the documentation. style for formatting changes, missing semicolons, etc. refactor for refactoring production code, e.g. renaming a variable. test for adding missing tests, refactoring tests; no production code change. build for updating build configuration, development tools or other changes irrelevant to the user. chore for updates that do not apply to the above, such as dependency updates. ci for changes to CI configuration files and scripts revert for revert to a previous commit Allowed <scope> values: checks: vuln misconf secret mode: image fs repo sbom server os: alpine redhat alma rocky mariner oracle debian ubuntu amazon suse photon distroless language: ruby php python nodejs rust dotnet java go vuln: os lang config: kubernetes dockerfile terraform cloudformation container docker podman containerd oci cli: cli flag others: helm report db deps The <scope> can be empty (e.g. if the change is a global or difficult to assign to a single component), in which case the parentheses are omitted. Example titles feat(alma): add support for AlmaLinux fix(oracle): handle advisories with ksplice versions docs(misconf): add comparison with Conftest and TFsec chore(deps): bump go.uber.org/zap from 1.19.1 to 1.20.0 NOTE : please do not use chore(deps): update fanal and something like that if you add new features or fix bugs in Trivy-related projects. The PR title should describe what the PR adds or fixes even though it just updates the dependency in Trivy. Unit tests Your PR must pass all the unit tests. You can test it as below. $ make test Integration tests Your PR must pass all the integration tests. You can test it as below. $ make test-integration Documentation You can build the documents as below and view it at http://localhost:8000. $ make mkdocs-serve Understand where your pull request belongs Trivy is composed of several repositories that work together: Trivy is the client-side, user-facing, command line tool. vuln-list is a vulnerabilities database, aggregated from different sources, and normalized for easy consumption. Think of this as the \"server\" side of the trivy command line tool. There should be no pull requests to this repo vuln-list-update is the code that maintains the vuln-list database. trivy-db maintains the vulnerability database pulled by Trivy CLI. fanal is a library for extracting system information from containers. It is being used by Trivy to find testable subjects in the container image. go-dep-parser is a library for parsing lock files such as package-lock.json and Gemfile.lock.","title":"Pull Requests"},{"location":"community/contribute/pr/#title","text":"It is not that strict, but we use the title conventions in this repository. Each commit message doesn't have to follow the conventions as long as it is clear and descriptive since it will be squashed and merged.","title":"Title"},{"location":"community/contribute/pr/#format-of-the-title","text":"<type>(<scope>): <subject> The type and scope should always be lowercase as shown below. Allowed <type> values: feat for a new feature for the user, not a new feature for build script. Such commit will trigger a release bumping a MINOR version. fix for a bug fix for the user, not a fix to a build script. Such commit will trigger a release bumping a PATCH version. perf for performance improvements. Such commit will trigger a release bumping a PATCH version. docs for changes to the documentation. style for formatting changes, missing semicolons, etc. refactor for refactoring production code, e.g. renaming a variable. test for adding missing tests, refactoring tests; no production code change. build for updating build configuration, development tools or other changes irrelevant to the user. chore for updates that do not apply to the above, such as dependency updates. ci for changes to CI configuration files and scripts revert for revert to a previous commit Allowed <scope> values: checks: vuln misconf secret mode: image fs repo sbom server os: alpine redhat alma rocky mariner oracle debian ubuntu amazon suse photon distroless language: ruby php python nodejs rust dotnet java go vuln: os lang config: kubernetes dockerfile terraform cloudformation container docker podman containerd oci cli: cli flag others: helm report db deps The <scope> can be empty (e.g. if the change is a global or difficult to assign to a single component), in which case the parentheses are omitted.","title":"Format of the title"},{"location":"community/contribute/pr/#example-titles","text":"feat(alma): add support for AlmaLinux fix(oracle): handle advisories with ksplice versions docs(misconf): add comparison with Conftest and TFsec chore(deps): bump go.uber.org/zap from 1.19.1 to 1.20.0 NOTE : please do not use chore(deps): update fanal and something like that if you add new features or fix bugs in Trivy-related projects. The PR title should describe what the PR adds or fixes even though it just updates the dependency in Trivy.","title":"Example titles"},{"location":"community/contribute/pr/#unit-tests","text":"Your PR must pass all the unit tests. You can test it as below. $ make test","title":"Unit tests"},{"location":"community/contribute/pr/#integration-tests","text":"Your PR must pass all the integration tests. You can test it as below. $ make test-integration","title":"Integration tests"},{"location":"community/contribute/pr/#documentation","text":"You can build the documents as below and view it at http://localhost:8000. $ make mkdocs-serve","title":"Documentation"},{"location":"community/contribute/pr/#understand-where-your-pull-request-belongs","text":"Trivy is composed of several repositories that work together: Trivy is the client-side, user-facing, command line tool. vuln-list is a vulnerabilities database, aggregated from different sources, and normalized for easy consumption. Think of this as the \"server\" side of the trivy command line tool. There should be no pull requests to this repo vuln-list-update is the code that maintains the vuln-list database. trivy-db maintains the vulnerability database pulled by Trivy CLI. fanal is a library for extracting system information from containers. It is being used by Trivy to find testable subjects in the container image. go-dep-parser is a library for parsing lock files such as package-lock.json and Gemfile.lock.","title":"Understand where your pull request belongs"},{"location":"community/maintainer/help-wanted/","text":"Overview We use two labels help wanted and good first issue to identify issues that have been specially groomed for new contributors. The good first issue label is a subset of help wanted label, indicating that members have committed to providing extra assistance for new contributors. All good first issue items also have the help wanted label. Help Wanted Items marked with the help wanted label need to ensure that they are: Low Barrier to Entry It should be tractable for new contributors. Documentation on how that type of change should be made should already exist. Clear Task The task is agreed upon and does not require further discussions in the community. Call out if that area of code is untested and requires new fixtures. API / CLI behavior is decided and included in the OP issue, for example: \"The new command syntax is trivy --format yaml IMAGE_NAME \"_ with expected validations called out. Goldilocks priority Not too high that a core contributor should do it, but not too low that it isn't useful enough for a core contributor to spend time to review it, answer questions, help get it into a release, etc. Up-To-Date Often these issues become obsolete and have already been done, are no longer desired, no longer make sense, have changed priority or difficulty , etc. Good First Issue Items marked with the good first issue label are intended for first-time contributors . It indicates that members will keep an eye out for these pull requests and shepherd it through our processes. These items need to ensure that they follow the guidelines for help wanted labels (above) in addition to meeting the following criteria: No Barrier to Entry The task is something that a new contributor can tackle without advanced setup, or domain knowledge. Solution Explained The recommended solution is clearly described in the issue. Provides Context If background knowledge is required, this should be explicitly mentioned and a list of suggested readings included. Gives Examples Link to examples of similar implementations so new contributors have a reference guide for their changes. Identifies Relevant Code The relevant code and tests to be changed should be linked in the issue. Ready to Test There should be existing tests that can be modified, or existing test cases fit to be copied. If the area of code doesn't have tests, before labeling the issue, add a test fixture. This prep often makes a great help wanted task!","title":"Help Wanted"},{"location":"community/maintainer/help-wanted/#overview","text":"We use two labels help wanted and good first issue to identify issues that have been specially groomed for new contributors. The good first issue label is a subset of help wanted label, indicating that members have committed to providing extra assistance for new contributors. All good first issue items also have the help wanted label.","title":"Overview"},{"location":"community/maintainer/help-wanted/#help-wanted","text":"Items marked with the help wanted label need to ensure that they are: Low Barrier to Entry It should be tractable for new contributors. Documentation on how that type of change should be made should already exist. Clear Task The task is agreed upon and does not require further discussions in the community. Call out if that area of code is untested and requires new fixtures. API / CLI behavior is decided and included in the OP issue, for example: \"The new command syntax is trivy --format yaml IMAGE_NAME \"_ with expected validations called out. Goldilocks priority Not too high that a core contributor should do it, but not too low that it isn't useful enough for a core contributor to spend time to review it, answer questions, help get it into a release, etc. Up-To-Date Often these issues become obsolete and have already been done, are no longer desired, no longer make sense, have changed priority or difficulty , etc.","title":"Help Wanted"},{"location":"community/maintainer/help-wanted/#good-first-issue","text":"Items marked with the good first issue label are intended for first-time contributors . It indicates that members will keep an eye out for these pull requests and shepherd it through our processes. These items need to ensure that they follow the guidelines for help wanted labels (above) in addition to meeting the following criteria: No Barrier to Entry The task is something that a new contributor can tackle without advanced setup, or domain knowledge. Solution Explained The recommended solution is clearly described in the issue. Provides Context If background knowledge is required, this should be explicitly mentioned and a list of suggested readings included. Gives Examples Link to examples of similar implementations so new contributors have a reference guide for their changes. Identifies Relevant Code The relevant code and tests to be changed should be linked in the issue. Ready to Test There should be existing tests that can be modified, or existing test cases fit to be copied. If the area of code doesn't have tests, before labeling the issue, add a test fixture. This prep often makes a great help wanted task!","title":"Good First Issue"},{"location":"community/maintainer/triage/","text":"Triage Triage is an important part of maintaining the health of the trivy repo. A well organized repo allows maintainers to prioritize feature requests, fix bugs, and respond to users facing difficulty with the tool as quickly as possible. Triage includes: Labeling issues Responding to issues Closing issues Daily Triage Daily triage has two goals: Responsiveness for new issues Responsiveness when explicitly requested information was provided It covers: Issues without a kind/ or triage/ label Issues without a priority/ label triage/needs-information issues which the user has followed up on, and now require a response. Categorization The most important level of categorizing the issue is defining what type it is. We typically want at least one of the following labels on every issue, and some issues may fall into multiple categories: triage/support - The default for most incoming issues kind/bug - When it\u2019s a bug or we aren\u2019t delivering the best user experience Other possibilities: - kind/feature - Identify new feature requests - kind/testing - Update or fix unit/integration tests - kind/cleanup - Cleaning up/refactoring the codebase - kind/documentation - Updates or additions to trivy documentation If the issue is specific to a driver for OS packages or libraries: co/[driver for OS packages] co/alpine co/amazon co/debian co/oracle co/photon co/redhat co/suse co/ubuntu co/[driver for libraries of programming languages] co/bundler co/cargo co/composer co/npm co/yarn co/pipenv co/poetry Help wanted? Good First Issue - bug has a proposed solution, can be implemented w/o further discussion. Help wanted - if the bug could use help from a contributor Prioritization If the issue is not triage/support , it needs a priority label. priority/critical-urgent - someones top priority ASAP, such as security issue, user-visible bug, or build breakage. Rarely used. priority/important-soon : in time for the next two releases. It should be attached to a milestone. priority/important-longterm : 2-4 releases from now priority/backlog : agreed that this would be good to have, but no one is available at the moment. Consider tagging as help wanted priority/awaiting-more-evidence : may be useful, but there is not yet enough support. Weekly Triage Weekly triage has three goals: Catching up on unresponded issues Reviewing and closing PR\u2019s Closing stale issues Post-Release Triage Post-release triage occurs after a major release (around every 4-6 weeks). It focuses on: Closing bugs that have been resolved by the release Reprioritizing bugs that have not been resolved by the release Letting users know if we believe that there is still an issue This includes reviewing: Every issue that hasn\u2019t been touched in the last 2 days Re-evaluation of long-term issues Re-evaluation of short-term issues Responding to Issues Needs More Information A sample response to ask for more info: I don\u2019t yet have a clear way to replicate this issue. Do you mind adding some additional details. Here is additional information that would be helpful: * The exact trivy command line used * The exact image you want to scan * The full output of the trivy command, preferably with --debug for extra logging. Thank you for sharing your experience! Then: Label with triage/needs-information . Issue might be resolved If you think a release may have resolved an issue, ask the author to see if their issue has been resolved: Could you please check to see if trivy addresses this issue? We've made some changes with how this is handled, and improved the trivy logs output to help us debug tricky cases like this. Then: Label with triage/needs-information . Closing with Care Issues typically need to be closed for the following reasons: The issue has been addressed The issue is a duplicate of an existing issue There has been a lack of information over a long period of time In any of these situations, we aim to be kind when closing the issue, and offer the author action items should they need to reopen their issue or still require a solution. Samples responses for these situations include: Issue has been addressed @author: I believe this issue is now addressed by trivy v1.0.0, as it . If you still see this issue with trivy v1.0 or higher, please reopen this issue. Thank you for reporting this issue! Then: Close the issue Duplicate Issue This issue appears to be a duplicate of #X, do you mind if we move the conversation there? This way we can centralize the content relating to the issue. If you feel that this issue is not in fact a duplicate, please re-open it. If you have additional information to share, please add it to the new issue. Thank you for reporting this! Then: Label with triage/duplicate and close the issue. Lack of Information If an issue hasn't been active for more than four weeks, and the author has been pinged at least once, then the issue can be closed. Hey @author -- hopefully it's OK if I close this - there wasn't enough information to make it actionable, and some time has already passed. If you are able to provide additional details, you may reopen it at any point. Here is additional information that may be helpful to us: * Whether the issue occurs with the latest trivy release * The exact trivy command line used * The exact image you want to scan * The full output of the trivy command, preferably with --debug for extra logging. Thank you for sharing your experience! Then: Close the issue. Help Wanted issues We use two labels help wanted and good first issue to identify issues that have been specially groomed for new contributors. We have specific guidelines for how to use these labels. If you see an issue that satisfies these guidelines, you can add the help wanted label and the good first issue label. Please note that adding the good first issue label must also add the help wanted label. If an issue has these labels but does not satisfy the guidelines, please ask for more details to be added to the issue or remove the labels.","title":"Triage"},{"location":"community/maintainer/triage/#triage","text":"Triage is an important part of maintaining the health of the trivy repo. A well organized repo allows maintainers to prioritize feature requests, fix bugs, and respond to users facing difficulty with the tool as quickly as possible. Triage includes: Labeling issues Responding to issues Closing issues","title":"Triage"},{"location":"community/maintainer/triage/#daily-triage","text":"Daily triage has two goals: Responsiveness for new issues Responsiveness when explicitly requested information was provided It covers: Issues without a kind/ or triage/ label Issues without a priority/ label triage/needs-information issues which the user has followed up on, and now require a response.","title":"Daily Triage"},{"location":"community/maintainer/triage/#categorization","text":"The most important level of categorizing the issue is defining what type it is. We typically want at least one of the following labels on every issue, and some issues may fall into multiple categories: triage/support - The default for most incoming issues kind/bug - When it\u2019s a bug or we aren\u2019t delivering the best user experience Other possibilities: - kind/feature - Identify new feature requests - kind/testing - Update or fix unit/integration tests - kind/cleanup - Cleaning up/refactoring the codebase - kind/documentation - Updates or additions to trivy documentation If the issue is specific to a driver for OS packages or libraries: co/[driver for OS packages] co/alpine co/amazon co/debian co/oracle co/photon co/redhat co/suse co/ubuntu co/[driver for libraries of programming languages] co/bundler co/cargo co/composer co/npm co/yarn co/pipenv co/poetry Help wanted? Good First Issue - bug has a proposed solution, can be implemented w/o further discussion. Help wanted - if the bug could use help from a contributor","title":"Categorization"},{"location":"community/maintainer/triage/#prioritization","text":"If the issue is not triage/support , it needs a priority label. priority/critical-urgent - someones top priority ASAP, such as security issue, user-visible bug, or build breakage. Rarely used. priority/important-soon : in time for the next two releases. It should be attached to a milestone. priority/important-longterm : 2-4 releases from now priority/backlog : agreed that this would be good to have, but no one is available at the moment. Consider tagging as help wanted priority/awaiting-more-evidence : may be useful, but there is not yet enough support.","title":"Prioritization"},{"location":"community/maintainer/triage/#weekly-triage","text":"Weekly triage has three goals: Catching up on unresponded issues Reviewing and closing PR\u2019s Closing stale issues","title":"Weekly Triage"},{"location":"community/maintainer/triage/#post-release-triage","text":"Post-release triage occurs after a major release (around every 4-6 weeks). It focuses on: Closing bugs that have been resolved by the release Reprioritizing bugs that have not been resolved by the release Letting users know if we believe that there is still an issue This includes reviewing: Every issue that hasn\u2019t been touched in the last 2 days Re-evaluation of long-term issues Re-evaluation of short-term issues","title":"Post-Release Triage"},{"location":"community/maintainer/triage/#responding-to-issues","text":"","title":"Responding to Issues"},{"location":"community/maintainer/triage/#needs-more-information","text":"A sample response to ask for more info: I don\u2019t yet have a clear way to replicate this issue. Do you mind adding some additional details. Here is additional information that would be helpful: * The exact trivy command line used * The exact image you want to scan * The full output of the trivy command, preferably with --debug for extra logging. Thank you for sharing your experience! Then: Label with triage/needs-information .","title":"Needs More Information"},{"location":"community/maintainer/triage/#issue-might-be-resolved","text":"If you think a release may have resolved an issue, ask the author to see if their issue has been resolved: Could you please check to see if trivy addresses this issue? We've made some changes with how this is handled, and improved the trivy logs output to help us debug tricky cases like this. Then: Label with triage/needs-information .","title":"Issue might be resolved"},{"location":"community/maintainer/triage/#closing-with-care","text":"Issues typically need to be closed for the following reasons: The issue has been addressed The issue is a duplicate of an existing issue There has been a lack of information over a long period of time In any of these situations, we aim to be kind when closing the issue, and offer the author action items should they need to reopen their issue or still require a solution. Samples responses for these situations include:","title":"Closing with Care"},{"location":"community/maintainer/triage/#issue-has-been-addressed","text":"@author: I believe this issue is now addressed by trivy v1.0.0, as it . If you still see this issue with trivy v1.0 or higher, please reopen this issue. Thank you for reporting this issue! Then: Close the issue","title":"Issue has been addressed"},{"location":"community/maintainer/triage/#duplicate-issue","text":"This issue appears to be a duplicate of #X, do you mind if we move the conversation there? This way we can centralize the content relating to the issue. If you feel that this issue is not in fact a duplicate, please re-open it. If you have additional information to share, please add it to the new issue. Thank you for reporting this! Then: Label with triage/duplicate and close the issue.","title":"Duplicate Issue"},{"location":"community/maintainer/triage/#lack-of-information","text":"If an issue hasn't been active for more than four weeks, and the author has been pinged at least once, then the issue can be closed. Hey @author -- hopefully it's OK if I close this - there wasn't enough information to make it actionable, and some time has already passed. If you are able to provide additional details, you may reopen it at any point. Here is additional information that may be helpful to us: * Whether the issue occurs with the latest trivy release * The exact trivy command line used * The exact image you want to scan * The full output of the trivy command, preferably with --debug for extra logging. Thank you for sharing your experience! Then: Close the issue.","title":"Lack of Information"},{"location":"community/maintainer/triage/#help-wanted-issues","text":"We use two labels help wanted and good first issue to identify issues that have been specially groomed for new contributors. We have specific guidelines for how to use these labels. If you see an issue that satisfies these guidelines, you can add the help wanted label and the good first issue label. Please note that adding the good first issue label must also add the help wanted label. If an issue has these labels but does not satisfy the guidelines, please ask for more details to be added to the issue or remove the labels.","title":"Help Wanted issues"},{"location":"docs/","text":"Docs Trivy detects two types of security issues: Vulnerabilities Misconfigurations Trivy can scan four different artifacts: Container Images Filesystem and Rootfs Git Repositories Kubernetes Trivy can be run in two different modes: Standalone Client/Server It is designed to be used in CI. Before pushing to a container registry or deploying your application, you can scan your local container image and other artifacts easily. See Integrations for details. Features Comprehensive vulnerability detection OS packages (Alpine, Red Hat Universal Base Image, Red Hat Enterprise Linux, CentOS, AlmaLinux, Rocky Linux, CBL-Mariner, Oracle Linux, Debian, Ubuntu, Amazon Linux, openSUSE Leap, SUSE Enterprise Linux, Photon OS and Distroless) Language-specific packages (Bundler, Composer, Pipenv, Poetry, npm, yarn, Cargo, NuGet, Maven, and Go) Detect IaC misconfigurations A wide variety of built-in policies are provided out of the box : Kubernetes Docker Terraform more coming soon Support custom policies Simple Specify only an image name, a directory containing IaC configs, or an artifact name See Quick Start Fast The first scan will finish within 10 seconds (depending on your network). Consequent scans will finish in single seconds. Unlike other scanners that take long to fetch vulnerability information (~10 minutes) on the first run, and encourage you to maintain a durable vulnerability database, Trivy is stateless and requires no maintenance or preparation. Easy installation apt-get install , yum install and brew install is possible (See Installation ) No pre-requisites such as installation of DB, libraries, etc. High accuracy Especially Alpine Linux and RHEL/CentOS Other OSes are also high DevSecOps Suitable for CI such as Travis CI, CircleCI, Jenkins, GitLab CI, etc. See CI Example Support multiple formats container image A local image in Docker Engine which is running as a daemon A local image in Podman (>=2.0) which is exposing a socket A remote image in Docker Registry such as Docker Hub, ECR, GCR and ACR A tar archive stored in the docker save / podman save formatted file An image directory compliant with OCI Image Format local filesystem and rootfs remote git repository SBOM (Software Bill of Materials) support CycloneDX SPDX Please see LICENSE for Trivy licensing information.","title":"Overview"},{"location":"docs/#docs","text":"Trivy detects two types of security issues: Vulnerabilities Misconfigurations Trivy can scan four different artifacts: Container Images Filesystem and Rootfs Git Repositories Kubernetes Trivy can be run in two different modes: Standalone Client/Server It is designed to be used in CI. Before pushing to a container registry or deploying your application, you can scan your local container image and other artifacts easily. See Integrations for details.","title":"Docs"},{"location":"docs/#features","text":"Comprehensive vulnerability detection OS packages (Alpine, Red Hat Universal Base Image, Red Hat Enterprise Linux, CentOS, AlmaLinux, Rocky Linux, CBL-Mariner, Oracle Linux, Debian, Ubuntu, Amazon Linux, openSUSE Leap, SUSE Enterprise Linux, Photon OS and Distroless) Language-specific packages (Bundler, Composer, Pipenv, Poetry, npm, yarn, Cargo, NuGet, Maven, and Go) Detect IaC misconfigurations A wide variety of built-in policies are provided out of the box : Kubernetes Docker Terraform more coming soon Support custom policies Simple Specify only an image name, a directory containing IaC configs, or an artifact name See Quick Start Fast The first scan will finish within 10 seconds (depending on your network). Consequent scans will finish in single seconds. Unlike other scanners that take long to fetch vulnerability information (~10 minutes) on the first run, and encourage you to maintain a durable vulnerability database, Trivy is stateless and requires no maintenance or preparation. Easy installation apt-get install , yum install and brew install is possible (See Installation ) No pre-requisites such as installation of DB, libraries, etc. High accuracy Especially Alpine Linux and RHEL/CentOS Other OSes are also high DevSecOps Suitable for CI such as Travis CI, CircleCI, Jenkins, GitLab CI, etc. See CI Example Support multiple formats container image A local image in Docker Engine which is running as a daemon A local image in Podman (>=2.0) which is exposing a socket A remote image in Docker Registry such as Docker Hub, ECR, GCR and ACR A tar archive stored in the docker save / podman save formatted file An image directory compliant with OCI Image Format local filesystem and rootfs remote git repository SBOM (Software Bill of Materials) support CycloneDX SPDX Please see LICENSE for Trivy licensing information.","title":"Features"},{"location":"docs/advanced/air-gap/","text":"Air-Gapped Environment Trivy can be used in air-gapped environments. Note that an allowlist is here . Air-Gapped Environment for vulnerabilities Download the vulnerability database At first, you need to download the vulnerability database for use in air-gapped environments. Please follow oras installation instruction . Download db.tar.gz : $ oras pull ghcr.io/aquasecurity/trivy-db:2 -a Transfer the DB file into the air-gapped environment The way of transfer depends on the environment. $ rsync -av -e ssh /path/to/db.tar.gz [user]@[host]:dst Put the DB file in Trivy's cache directory You have to know where to put the DB file. The following command shows the default cache directory. $ ssh user@host $ trivy -h | grep cache --cache-dir value cache directory (default: \"/home/myuser/.cache/trivy\") [$TRIVY_CACHE_DIR] Put the DB file in the cache directory + /db . $ mkdir -p /home/myuser/.cache/trivy/db $ cd /home/myuser/.cache/trivy/db $ tar xvf /path/to/db.tar.gz -C /home/myuser/.cache/trivy/db x trivy.db x metadata.json $ rm /path/to/db.tar.gz In an air-gapped environment it is your responsibility to update the Trivy database on a regular basis, so that the scanner can detect recently-identified vulnerabilities. Run Trivy with --skip-update and --offline-scan option In an air-gapped environment, specify --skip-update so that Trivy doesn't attempt to download the latest database file. In addition, if you want to scan Java dependencies such as JAR and pom.xml, you need to specify --offline-scan since Trivy tries to issue API requests for scanning Java applications by default. $ trivy image --skip-update --offline-scan alpine:3.12 Air-Gapped Environment for misconfigurations No special measures are required to detect misconfigurations in an air-gapped environment. Run Trivy with --skip-policy-update option In an air-gapped environment, specify --skip-policy-update so that Trivy doesn't attempt to download the latest misconfiguration policies. $ trivy conf --skip-policy-update /path/to/conf","title":"Air-Gapped Environment"},{"location":"docs/advanced/air-gap/#air-gapped-environment","text":"Trivy can be used in air-gapped environments. Note that an allowlist is here .","title":"Air-Gapped Environment"},{"location":"docs/advanced/air-gap/#air-gapped-environment-for-vulnerabilities","text":"","title":"Air-Gapped Environment for vulnerabilities"},{"location":"docs/advanced/air-gap/#download-the-vulnerability-database","text":"At first, you need to download the vulnerability database for use in air-gapped environments. Please follow oras installation instruction . Download db.tar.gz : $ oras pull ghcr.io/aquasecurity/trivy-db:2 -a","title":"Download the vulnerability database"},{"location":"docs/advanced/air-gap/#transfer-the-db-file-into-the-air-gapped-environment","text":"The way of transfer depends on the environment. $ rsync -av -e ssh /path/to/db.tar.gz [user]@[host]:dst","title":"Transfer the DB file into the air-gapped environment"},{"location":"docs/advanced/air-gap/#put-the-db-file-in-trivys-cache-directory","text":"You have to know where to put the DB file. The following command shows the default cache directory. $ ssh user@host $ trivy -h | grep cache --cache-dir value cache directory (default: \"/home/myuser/.cache/trivy\") [$TRIVY_CACHE_DIR] Put the DB file in the cache directory + /db . $ mkdir -p /home/myuser/.cache/trivy/db $ cd /home/myuser/.cache/trivy/db $ tar xvf /path/to/db.tar.gz -C /home/myuser/.cache/trivy/db x trivy.db x metadata.json $ rm /path/to/db.tar.gz In an air-gapped environment it is your responsibility to update the Trivy database on a regular basis, so that the scanner can detect recently-identified vulnerabilities.","title":"Put the DB file in Trivy's cache directory"},{"location":"docs/advanced/air-gap/#run-trivy-with-skip-update-and-offline-scan-option","text":"In an air-gapped environment, specify --skip-update so that Trivy doesn't attempt to download the latest database file. In addition, if you want to scan Java dependencies such as JAR and pom.xml, you need to specify --offline-scan since Trivy tries to issue API requests for scanning Java applications by default. $ trivy image --skip-update --offline-scan alpine:3.12","title":"Run Trivy with --skip-update and --offline-scan option"},{"location":"docs/advanced/air-gap/#air-gapped-environment-for-misconfigurations","text":"No special measures are required to detect misconfigurations in an air-gapped environment.","title":"Air-Gapped Environment for misconfigurations"},{"location":"docs/advanced/air-gap/#run-trivy-with-skip-policy-update-option","text":"In an air-gapped environment, specify --skip-policy-update so that Trivy doesn't attempt to download the latest misconfiguration policies. $ trivy conf --skip-policy-update /path/to/conf","title":"Run Trivy with --skip-policy-update option"},{"location":"docs/advanced/plugins/","text":"Plugins Trivy provides a plugin feature to allow others to extend the Trivy CLI without the need to change the Trivycode base. This plugin system was inspired by the plugin system used in kubectl , Helm , and Conftest . Overview Trivy plugins are add-on tools that integrate seamlessly with Trivy. They provide a way to extend the core feature set of Trivy, but without requiring every new feature to be written in Go and added to the core tool. They can be added and removed from a Trivy installation without impacting the core Trivy tool. They can be written in any programming language. They integrate with Trivy, and will show up in Trivy help and subcommands. Warning Trivy plugins available in public are not audited for security. You should install and run third-party plugins at your own risk, since they are arbitrary programs running on your machine. Installing a Plugin A plugin can be installed using the trivy plugin install command. This command takes a url and will download the plugin and install it in the plugin cache. Trivy adheres to the XDG specification, so the location depends on whether XDG_DATA_HOME is set. Trivy will now search XDG_DATA_HOME for the location of the Trivy plugins cache. The preference order is as follows: XDG_DATA_HOME if set and .trivy/plugins exists within the XDG_DATA_HOME dir ~/.trivy/plugins Under the hood Trivy leverages go-getter to download plugins. This means the following protocols are supported for downloading plugins: OCI Registries Local Files Git HTTP/HTTPS Mercurial Amazon S3 Google Cloud Storage For example, to download the Kubernetes Trivy plugin you can execute the following command: $ trivy plugin install github.com/aquasecurity/trivy-plugin-kubectl Using Plugins Once the plugin is installed, Trivy will load all available plugins in the cache on the start of the next Trivy execution. A plugin will be made in the Trivy CLI based on the plugin name. To display all plugins, you can list them by trivy --help $ trivy --help NAME: trivy - A simple and comprehensive vulnerability scanner for containers USAGE: trivy [ global options ] command [ command options ] target VERSION: dev COMMANDS: image, i scan an image filesystem, fs scan local filesystem repository, repo scan remote repository client, c client mode server, s server mode plugin, p manage plugins kubectl scan kubectl resources help, h Shows a list of commands or help for one command As shown above, kubectl subcommand exists in the COMMANDS section. To call the kubectl plugin and scan existing Kubernetes deployments, you can execute the following command: $ trivy kubectl deployment <deployment-id> -- --ignore-unfixed --severity CRITICAL Internally the kubectl plugin calls the kubectl binary to fetch information about that deployment and passes the using images to Trivy. You can see the detail here . If you want to omit even the subcommand, you can use TRIVY_RUN_AS_PLUGIN environment variable. $ TRIVY_RUN_AS_PLUGIN = kubectl trivy job your-job -- --format json Installing and Running Plugins on the fly trivy plugin run installs a plugin and runs it on the fly. If the plugin is already present in the cache, the installation is skipped. trivy plugin run github.com/aquasecurity/trivy-plugin-kubectl pod your-pod -- --exit-code 1 Uninstalling Plugins Specify a plugin name with trivy plugin uninstall command. $ trivy plugin uninstall kubectl Building Plugins Each plugin has a top-level directory, and then a plugin.yaml file. your-plugin/ | | - plugin.yaml | - your-plugin.sh In the example above, the plugin is contained inside of a directory named your-plugin . It has two files: plugin.yaml (required) and an executable script, your-plugin.sh (optional). The core of a plugin is a simple YAML file named plugin.yaml. Here is an example YAML of trivy-plugin-kubectl plugin that adds support for Kubernetes scanning. name : \"kubectl\" repository : github.com/aquasecurity/trivy-plugin-kubectl version : \"0.1.0\" usage : scan kubectl resources description : |- A Trivy plugin that scans the images of a kubernetes resource. Usage: trivy kubectl TYPE[.VERSION][.GROUP] NAME platforms : - selector : # optional os : darwin arch : amd64 uri : ./trivy-kubectl # where the execution file is (local file, http, git, etc.) bin : ./trivy-kubectl # path to the execution file - selector : # optional os : linux arch : amd64 uri : https://github.com/aquasecurity/trivy-plugin-kubectl/releases/download/v0.1.0/trivy-kubectl.tar.gz bin : ./trivy-kubectl The plugin.yaml field should contain the following information: name: The name of the plugin. This also determines how the plugin will be made available in the Trivy CLI. For example, if the plugin is named kubectl, you can call the plugin with trivy kubectl . (required) version: The version of the plugin. (required) usage: A short usage description. (required) description: A long description of the plugin. This is where you could provide a helpful documentation of your plugin. (required) platforms: (required) selector: The OS/Architecture specific variations of a execution file. (optional) os: OS information based on GOOS (linux, darwin, etc.) (optional) arch: The architecture information based on GOARCH (amd64, arm64, etc.) (optional) uri: Where the executable file is. Relative path from the root directory of the plugin or remote URL such as HTTP and S3. (required) bin: Which file to call when the plugin is executed. Relative path from the root directory of the plugin. (required) The following rules will apply in deciding which platform to select: If both os and arch under selector match the current platform, search will stop and the platform will be used. If selector is not present, the platform will be used. If os matches and there is no more specific arch match, the platform will be used. If no platform match is found, Trivy will exit with an error. After determining platform, Trivy will download the execution file from uri and store it in the plugin cache. When the plugin is called via Trivy CLI, bin command will be executed. The plugin is responsible for handling flags and arguments. Any arguments are passed to the plugin from the trivy command. Example https://github.com/aquasecurity/trivy-plugin-kubectl","title":"Plugins"},{"location":"docs/advanced/plugins/#plugins","text":"Trivy provides a plugin feature to allow others to extend the Trivy CLI without the need to change the Trivycode base. This plugin system was inspired by the plugin system used in kubectl , Helm , and Conftest .","title":"Plugins"},{"location":"docs/advanced/plugins/#overview","text":"Trivy plugins are add-on tools that integrate seamlessly with Trivy. They provide a way to extend the core feature set of Trivy, but without requiring every new feature to be written in Go and added to the core tool. They can be added and removed from a Trivy installation without impacting the core Trivy tool. They can be written in any programming language. They integrate with Trivy, and will show up in Trivy help and subcommands. Warning Trivy plugins available in public are not audited for security. You should install and run third-party plugins at your own risk, since they are arbitrary programs running on your machine.","title":"Overview"},{"location":"docs/advanced/plugins/#installing-a-plugin","text":"A plugin can be installed using the trivy plugin install command. This command takes a url and will download the plugin and install it in the plugin cache. Trivy adheres to the XDG specification, so the location depends on whether XDG_DATA_HOME is set. Trivy will now search XDG_DATA_HOME for the location of the Trivy plugins cache. The preference order is as follows: XDG_DATA_HOME if set and .trivy/plugins exists within the XDG_DATA_HOME dir ~/.trivy/plugins Under the hood Trivy leverages go-getter to download plugins. This means the following protocols are supported for downloading plugins: OCI Registries Local Files Git HTTP/HTTPS Mercurial Amazon S3 Google Cloud Storage For example, to download the Kubernetes Trivy plugin you can execute the following command: $ trivy plugin install github.com/aquasecurity/trivy-plugin-kubectl","title":"Installing a Plugin"},{"location":"docs/advanced/plugins/#using-plugins","text":"Once the plugin is installed, Trivy will load all available plugins in the cache on the start of the next Trivy execution. A plugin will be made in the Trivy CLI based on the plugin name. To display all plugins, you can list them by trivy --help $ trivy --help NAME: trivy - A simple and comprehensive vulnerability scanner for containers USAGE: trivy [ global options ] command [ command options ] target VERSION: dev COMMANDS: image, i scan an image filesystem, fs scan local filesystem repository, repo scan remote repository client, c client mode server, s server mode plugin, p manage plugins kubectl scan kubectl resources help, h Shows a list of commands or help for one command As shown above, kubectl subcommand exists in the COMMANDS section. To call the kubectl plugin and scan existing Kubernetes deployments, you can execute the following command: $ trivy kubectl deployment <deployment-id> -- --ignore-unfixed --severity CRITICAL Internally the kubectl plugin calls the kubectl binary to fetch information about that deployment and passes the using images to Trivy. You can see the detail here . If you want to omit even the subcommand, you can use TRIVY_RUN_AS_PLUGIN environment variable. $ TRIVY_RUN_AS_PLUGIN = kubectl trivy job your-job -- --format json","title":"Using Plugins"},{"location":"docs/advanced/plugins/#installing-and-running-plugins-on-the-fly","text":"trivy plugin run installs a plugin and runs it on the fly. If the plugin is already present in the cache, the installation is skipped. trivy plugin run github.com/aquasecurity/trivy-plugin-kubectl pod your-pod -- --exit-code 1","title":"Installing and Running Plugins on the fly"},{"location":"docs/advanced/plugins/#uninstalling-plugins","text":"Specify a plugin name with trivy plugin uninstall command. $ trivy plugin uninstall kubectl","title":"Uninstalling Plugins"},{"location":"docs/advanced/plugins/#building-plugins","text":"Each plugin has a top-level directory, and then a plugin.yaml file. your-plugin/ | | - plugin.yaml | - your-plugin.sh In the example above, the plugin is contained inside of a directory named your-plugin . It has two files: plugin.yaml (required) and an executable script, your-plugin.sh (optional). The core of a plugin is a simple YAML file named plugin.yaml. Here is an example YAML of trivy-plugin-kubectl plugin that adds support for Kubernetes scanning. name : \"kubectl\" repository : github.com/aquasecurity/trivy-plugin-kubectl version : \"0.1.0\" usage : scan kubectl resources description : |- A Trivy plugin that scans the images of a kubernetes resource. Usage: trivy kubectl TYPE[.VERSION][.GROUP] NAME platforms : - selector : # optional os : darwin arch : amd64 uri : ./trivy-kubectl # where the execution file is (local file, http, git, etc.) bin : ./trivy-kubectl # path to the execution file - selector : # optional os : linux arch : amd64 uri : https://github.com/aquasecurity/trivy-plugin-kubectl/releases/download/v0.1.0/trivy-kubectl.tar.gz bin : ./trivy-kubectl The plugin.yaml field should contain the following information: name: The name of the plugin. This also determines how the plugin will be made available in the Trivy CLI. For example, if the plugin is named kubectl, you can call the plugin with trivy kubectl . (required) version: The version of the plugin. (required) usage: A short usage description. (required) description: A long description of the plugin. This is where you could provide a helpful documentation of your plugin. (required) platforms: (required) selector: The OS/Architecture specific variations of a execution file. (optional) os: OS information based on GOOS (linux, darwin, etc.) (optional) arch: The architecture information based on GOARCH (amd64, arm64, etc.) (optional) uri: Where the executable file is. Relative path from the root directory of the plugin or remote URL such as HTTP and S3. (required) bin: Which file to call when the plugin is executed. Relative path from the root directory of the plugin. (required) The following rules will apply in deciding which platform to select: If both os and arch under selector match the current platform, search will stop and the platform will be used. If selector is not present, the platform will be used. If os matches and there is no more specific arch match, the platform will be used. If no platform match is found, Trivy will exit with an error. After determining platform, Trivy will download the execution file from uri and store it in the plugin cache. When the plugin is called via Trivy CLI, bin command will be executed. The plugin is responsible for handling flags and arguments. Any arguments are passed to the plugin from the trivy command.","title":"Building Plugins"},{"location":"docs/advanced/plugins/#example","text":"https://github.com/aquasecurity/trivy-plugin-kubectl","title":"Example"},{"location":"docs/advanced/container/embed-in-dockerfile/","text":"Embed in Dockerfile Scan your image as part of the build process by embedding Trivy in the Dockerfile. This approach can be used to update Dockerfiles currently using Aqua\u2019s Microscanner . $ cat Dockerfile FROM alpine:3.7 RUN apk add curl \\ && curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin \\ && trivy rootfs --exit-code 1 --no-progress / $ docker build -t vulnerable-image . Alternatively you can use Trivy in a multistage build. Thus avoiding the insecure curl | sh . Also the image is not changed. [ ... ] # Run vulnerability scan on build image FROM build AS vulnscan COPY --from = aquasec/trivy:latest /usr/local/bin/trivy /usr/local/bin/trivy RUN trivy rootfs --exit-code 1 --no-progress / [ ... ]","title":"Embed in Dockerfile"},{"location":"docs/advanced/container/embed-in-dockerfile/#embed-in-dockerfile","text":"Scan your image as part of the build process by embedding Trivy in the Dockerfile. This approach can be used to update Dockerfiles currently using Aqua\u2019s Microscanner . $ cat Dockerfile FROM alpine:3.7 RUN apk add curl \\ && curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin \\ && trivy rootfs --exit-code 1 --no-progress / $ docker build -t vulnerable-image . Alternatively you can use Trivy in a multistage build. Thus avoiding the insecure curl | sh . Also the image is not changed. [ ... ] # Run vulnerability scan on build image FROM build AS vulnscan COPY --from = aquasec/trivy:latest /usr/local/bin/trivy /usr/local/bin/trivy RUN trivy rootfs --exit-code 1 --no-progress / [ ... ]","title":"Embed in Dockerfile"},{"location":"docs/advanced/container/oci/","text":"OCI Image Layout An image directory compliant with Open Container Image Layout Specification . Buildah: $ buildah push docker.io/library/alpine:3.11 oci:/path/to/alpine $ trivy image --input /path/to/alpine Skopeo: $ skopeo copy docker-daemon:alpine:3.11 oci:/path/to/alpine $ trivy image --input /path/to/alpine","title":"OCI Image"},{"location":"docs/advanced/container/oci/#oci-image-layout","text":"An image directory compliant with Open Container Image Layout Specification . Buildah: $ buildah push docker.io/library/alpine:3.11 oci:/path/to/alpine $ trivy image --input /path/to/alpine Skopeo: $ skopeo copy docker-daemon:alpine:3.11 oci:/path/to/alpine $ trivy image --input /path/to/alpine","title":"OCI Image Layout"},{"location":"docs/advanced/container/podman/","text":"Podman EXPERIMENTAL This feature might change without preserving backwards compatibility. Scan your image in Podman (>=2.0) running locally. The remote Podman is not supported. Before performing Trivy commands, you must enable the podman.sock systemd service on your machine. For more details, see here . $ systemctl --user enable --now podman.socket Then, you can scan your image in Podman. $ cat Dockerfile FROM alpine:3.12 RUN apk add --no-cache bash $ podman build -t test . $ podman images REPOSITORY TAG IMAGE ID CREATED SIZE localhost/test latest efc372d4e0de About a minute ago 7 .94 MB $ trivy image test","title":"Podman"},{"location":"docs/advanced/container/podman/#podman","text":"EXPERIMENTAL This feature might change without preserving backwards compatibility. Scan your image in Podman (>=2.0) running locally. The remote Podman is not supported. Before performing Trivy commands, you must enable the podman.sock systemd service on your machine. For more details, see here . $ systemctl --user enable --now podman.socket Then, you can scan your image in Podman. $ cat Dockerfile FROM alpine:3.12 RUN apk add --no-cache bash $ podman build -t test . $ podman images REPOSITORY TAG IMAGE ID CREATED SIZE localhost/test latest efc372d4e0de About a minute ago 7 .94 MB $ trivy image test","title":"Podman"},{"location":"docs/advanced/container/unpacked-filesystem/","text":"Unpacked Filesystem Scan an unpacked container image filesystem. In this case, Trivy works the same way when scanning containers $ docker export $( docker create alpine:3.10.2 ) | tar -C /tmp/rootfs -xvf - $ trivy rootfs /tmp/rootfs Result 2021 -03-08T05:22:26.378Z INFO Need to update DB 2021 -03-08T05:22:26.380Z INFO Downloading DB... 20 .37 MiB / 20 .37 MiB [ ------------------------------------------------------------------------------------------------------------------------------------- ] 100 .00% 8 .24 MiB p/s 2s 2021 -03-08T05:22:30.134Z INFO Detecting Alpine vulnerabilities... /tmp/rootfs ( alpine 3 .10.2 ) =========================== Total: 20 ( UNKNOWN: 0 , LOW: 2 , MEDIUM: 10 , HIGH: 8 , CRITICAL: 0 ) +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | libcrypto1.1 | CVE-2020-1967 | HIGH | 1 .1.1c-r0 | 1 .1.1g-r0 | openssl: Segmentation | | | | | | | fault in SSL_check_chain | | | | | | | causes denial of service | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1967 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2021-23839 | | | 1 .1.1j-r0 | openssl: incorrect SSLv2 | | | | | | | rollback protection | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23839 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23840 | | | | openssl: integer | | | | | | | overflow in CipherUpdate | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23840 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23841 | | | | openssl: NULL pointer dereference | | | | | | | in X509_issuer_and_serial_hash () | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23841 | + +------------------+----------+ +---------------+---------------------------------------+ | | CVE-2019-1547 | MEDIUM | | 1 .1.1d-r0 | openssl: side-channel weak | | | | | | | encryption vulnerability | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1547 | + +------------------+ + + +---------------------------------------+ | | CVE-2019-1549 | | | | openssl: information | | | | | | | disclosure in fork () | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1549 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2019-1551 | | | 1 .1.1d-r2 | openssl: Integer overflow in RSAZ | | | | | | | modular exponentiation on x86_64 | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1551 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2020-1971 | | | 1 .1.1i-r0 | openssl: EDIPARTYNAME | | | | | | | NULL pointer de-reference | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1971 | + +------------------+----------+ +---------------+---------------------------------------+ | | CVE-2019-1563 | LOW | | 1 .1.1d-r0 | openssl: information | | | | | | | disclosure in PKCS7_dataDecode | | | | | | | and CMS_decrypt_set1_pkey | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1563 | +--------------+------------------+----------+ +---------------+---------------------------------------+ | libssl1.1 | CVE-2020-1967 | HIGH | | 1 .1.1g-r0 | openssl: Segmentation | | | | | | | fault in SSL_check_chain | | | | | | | causes denial of service | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1967 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2021-23839 | | | 1 .1.1j-r0 | openssl: incorrect SSLv2 | | | | | | | rollback protection | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23839 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23840 | | | | openssl: integer | | | | | | | overflow in CipherUpdate | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23840 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23841 | | | | openssl: NULL pointer dereference | | | | | | | in X509_issuer_and_serial_hash () | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23841 | + +------------------+----------+ +---------------+---------------------------------------+ | | CVE-2019-1547 | MEDIUM | | 1 .1.1d-r0 | openssl: side-channel weak | | | | | | | encryption vulnerability | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1547 | + +------------------+ + + +---------------------------------------+ | | CVE-2019-1549 | | | | openssl: information | | | | | | | disclosure in fork () | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1549 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2019-1551 | | | 1 .1.1d-r2 | openssl: Integer overflow in RSAZ | | | | | | | modular exponentiation on x86_64 | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1551 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2020-1971 | | | 1 .1.1i-r0 | openssl: EDIPARTYNAME | | | | | | | NULL pointer de-reference | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1971 | + +------------------+----------+ +---------------+---------------------------------------+ | | CVE-2019-1563 | LOW | | 1 .1.1d-r0 | openssl: information | | | | | | | disclosure in PKCS7_dataDecode | | | | | | | and CMS_decrypt_set1_pkey | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1563 | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | musl | CVE-2020-28928 | MEDIUM | 1 .1.22-r3 | 1 .1.22-r4 | In musl libc through 1 .2.1, | | | | | | | wcsnrtombs mishandles particular | | | | | | | combinations of destination buffer... | | | | | | | -->avd.aquasec.com/nvd/cve-2020-28928 | +--------------+ + + + + + | musl-utils | | | | | | | | | | | | | | | | | | | | | | | | | | | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+","title":"Unpacked container image filesystem"},{"location":"docs/advanced/container/unpacked-filesystem/#unpacked-filesystem","text":"Scan an unpacked container image filesystem. In this case, Trivy works the same way when scanning containers $ docker export $( docker create alpine:3.10.2 ) | tar -C /tmp/rootfs -xvf - $ trivy rootfs /tmp/rootfs Result 2021 -03-08T05:22:26.378Z INFO Need to update DB 2021 -03-08T05:22:26.380Z INFO Downloading DB... 20 .37 MiB / 20 .37 MiB [ ------------------------------------------------------------------------------------------------------------------------------------- ] 100 .00% 8 .24 MiB p/s 2s 2021 -03-08T05:22:30.134Z INFO Detecting Alpine vulnerabilities... /tmp/rootfs ( alpine 3 .10.2 ) =========================== Total: 20 ( UNKNOWN: 0 , LOW: 2 , MEDIUM: 10 , HIGH: 8 , CRITICAL: 0 ) +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | libcrypto1.1 | CVE-2020-1967 | HIGH | 1 .1.1c-r0 | 1 .1.1g-r0 | openssl: Segmentation | | | | | | | fault in SSL_check_chain | | | | | | | causes denial of service | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1967 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2021-23839 | | | 1 .1.1j-r0 | openssl: incorrect SSLv2 | | | | | | | rollback protection | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23839 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23840 | | | | openssl: integer | | | | | | | overflow in CipherUpdate | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23840 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23841 | | | | openssl: NULL pointer dereference | | | | | | | in X509_issuer_and_serial_hash () | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23841 | + +------------------+----------+ +---------------+---------------------------------------+ | | CVE-2019-1547 | MEDIUM | | 1 .1.1d-r0 | openssl: side-channel weak | | | | | | | encryption vulnerability | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1547 | + +------------------+ + + +---------------------------------------+ | | CVE-2019-1549 | | | | openssl: information | | | | | | | disclosure in fork () | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1549 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2019-1551 | | | 1 .1.1d-r2 | openssl: Integer overflow in RSAZ | | | | | | | modular exponentiation on x86_64 | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1551 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2020-1971 | | | 1 .1.1i-r0 | openssl: EDIPARTYNAME | | | | | | | NULL pointer de-reference | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1971 | + +------------------+----------+ +---------------+---------------------------------------+ | | CVE-2019-1563 | LOW | | 1 .1.1d-r0 | openssl: information | | | | | | | disclosure in PKCS7_dataDecode | | | | | | | and CMS_decrypt_set1_pkey | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1563 | +--------------+------------------+----------+ +---------------+---------------------------------------+ | libssl1.1 | CVE-2020-1967 | HIGH | | 1 .1.1g-r0 | openssl: Segmentation | | | | | | | fault in SSL_check_chain | | | | | | | causes denial of service | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1967 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2021-23839 | | | 1 .1.1j-r0 | openssl: incorrect SSLv2 | | | | | | | rollback protection | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23839 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23840 | | | | openssl: integer | | | | | | | overflow in CipherUpdate | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23840 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23841 | | | | openssl: NULL pointer dereference | | | | | | | in X509_issuer_and_serial_hash () | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23841 | + +------------------+----------+ +---------------+---------------------------------------+ | | CVE-2019-1547 | MEDIUM | | 1 .1.1d-r0 | openssl: side-channel weak | | | | | | | encryption vulnerability | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1547 | + +------------------+ + + +---------------------------------------+ | | CVE-2019-1549 | | | | openssl: information | | | | | | | disclosure in fork () | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1549 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2019-1551 | | | 1 .1.1d-r2 | openssl: Integer overflow in RSAZ | | | | | | | modular exponentiation on x86_64 | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1551 | + +------------------+ + +---------------+---------------------------------------+ | | CVE-2020-1971 | | | 1 .1.1i-r0 | openssl: EDIPARTYNAME | | | | | | | NULL pointer de-reference | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1971 | + +------------------+----------+ +---------------+---------------------------------------+ | | CVE-2019-1563 | LOW | | 1 .1.1d-r0 | openssl: information | | | | | | | disclosure in PKCS7_dataDecode | | | | | | | and CMS_decrypt_set1_pkey | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1563 | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | musl | CVE-2020-28928 | MEDIUM | 1 .1.22-r3 | 1 .1.22-r4 | In musl libc through 1 .2.1, | | | | | | | wcsnrtombs mishandles particular | | | | | | | combinations of destination buffer... | | | | | | | -->avd.aquasec.com/nvd/cve-2020-28928 | +--------------+ + + + + + | musl-utils | | | | | | | | | | | | | | | | | | | | | | | | | | | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+","title":"Unpacked Filesystem"},{"location":"docs/advanced/private-registries/","text":"Trivy can download images from a private registry, without installing Docker or any other 3rd party tools. That's because it's easy to run in a CI process. All you have to do is install Trivy and set ENV vars.","title":"Overview"},{"location":"docs/advanced/private-registries/acr/","text":"Requirements None, Trivy uses Azure SDK for Go. You don't need to install az command. Privileges Service principal must have the AcrPull permissions. Creation of a service principal export SP_DATA = $( az ad sp create-for-rbac --name TrivyTest --role AcrPull --scope \"/subscriptions/<subscription_id>/resourceGroups/<resource_group>/providers/Microsoft.ContainerRegistry/registries/<registry_name>\" ) Usage # must set TRIVY_USERNAME empty char export AZURE_CLIENT_ID $( echo $SP_DATA | jq -r .appId ) export AZURE_CLIENT_SECRET $( echo $SP_DATA | jq -r .password ) export AZURE_TENANT_ID $( echo $SP_DATA | jq -r .tenant ) Testing You can test credentials in the following manner. docker run -it --rm -v /tmp:/tmp \\ -e AZURE_CLIENT_ID = ${ AZURE_CLIENT_ID } -e AZURE_CLIENT_SECRET = ${ AZURE_CLIENT_SECRET } \\ -e AZURE_TENANT_ID = ${ AZURE_TENANT_ID } aquasec/trivy image your_special_project.azurecr.io/your_special_image:your_special_tag","title":"ACR (Azure Container Registry)"},{"location":"docs/advanced/private-registries/acr/#requirements","text":"None, Trivy uses Azure SDK for Go. You don't need to install az command.","title":"Requirements"},{"location":"docs/advanced/private-registries/acr/#privileges","text":"Service principal must have the AcrPull permissions.","title":"Privileges"},{"location":"docs/advanced/private-registries/acr/#creation-of-a-service-principal","text":"export SP_DATA = $( az ad sp create-for-rbac --name TrivyTest --role AcrPull --scope \"/subscriptions/<subscription_id>/resourceGroups/<resource_group>/providers/Microsoft.ContainerRegistry/registries/<registry_name>\" )","title":"Creation of a service principal"},{"location":"docs/advanced/private-registries/acr/#usage","text":"# must set TRIVY_USERNAME empty char export AZURE_CLIENT_ID $( echo $SP_DATA | jq -r .appId ) export AZURE_CLIENT_SECRET $( echo $SP_DATA | jq -r .password ) export AZURE_TENANT_ID $( echo $SP_DATA | jq -r .tenant )","title":"Usage"},{"location":"docs/advanced/private-registries/acr/#testing","text":"You can test credentials in the following manner. docker run -it --rm -v /tmp:/tmp \\ -e AZURE_CLIENT_ID = ${ AZURE_CLIENT_ID } -e AZURE_CLIENT_SECRET = ${ AZURE_CLIENT_SECRET } \\ -e AZURE_TENANT_ID = ${ AZURE_TENANT_ID } aquasec/trivy image your_special_project.azurecr.io/your_special_image:your_special_tag","title":"Testing"},{"location":"docs/advanced/private-registries/docker-hub/","text":"Docker Hub needs TRIVY_USERNAME and TRIVY_PASSWORD . You don't need to set ENV vars when download from public repository. export TRIVY_USERNAME ={ DOCKERHUB_USERNAME } export TRIVY_PASSWORD ={ DOCKERHUB_PASSWORD }","title":"Docker Hub"},{"location":"docs/advanced/private-registries/ecr/","text":"Trivy uses AWS SDK. You don't need to install aws CLI tool. You can use AWS CLI's ENV Vars .","title":"AWS ECR (Elastic Container Registry)"},{"location":"docs/advanced/private-registries/gcr/","text":"Requirements None, Trivy uses Google Cloud SDK. You don't need to install gcloud command. Privileges Credential file must have the roles/storage.objectViewer permissions. More information can be found in Google's documentation JSON File Format The JSON file specified should have the following format provided by google's service account mechanisms: { \"type\" : \"service_account\" , \"project_id\" : \"your_special_project\" , \"private_key_id\" : \"XXXXXXXXXXXXXXXXXXXXxx\" , \"private_key\" : \"-----BEGIN PRIVATE KEY-----\\nNONONONO\\n-----END PRIVATE KEY-----\\n\" , \"client_email\" : \"somedude@your_special_project.iam.gserviceaccount.com\" , \"client_id\" : \"1234567890\" , \"auth_uri\" : \"https://accounts.google.com/o/oauth2/auth\" , \"token_uri\" : \"https://oauth2.googleapis.com/token\" , \"auth_provider_x509_cert_url\" : \"https://www.googleapis.com/oauth2/v1/certs\" , \"client_x509_cert_url\" : \"https://www.googleapis.com/robot/v1/metadata/x509/somedude%40your_special_project.iam.gserviceaccount.com\" } Usage If you want to use target project's repository, you can set them via GOOGLE_APPLICATION_CREDENTIALS . # must set TRIVY_USERNAME empty char export GOOGLE_APPLICATION_CREDENTIALS = /path/to/credential.json Testing You can test credentials in the following manner (assuming they are in /tmp on host machine). docker run -it --rm -v /tmp:/tmp \\ -e GOOGLE_APPLICATION_CREDENTIALS = /tmp/service_account.json \\ aquasec/trivy image gcr.io/your_special_project/your_special_image:your_special_tag","title":"GCR (Google Container Registry)"},{"location":"docs/advanced/private-registries/gcr/#requirements","text":"None, Trivy uses Google Cloud SDK. You don't need to install gcloud command.","title":"Requirements"},{"location":"docs/advanced/private-registries/gcr/#privileges","text":"Credential file must have the roles/storage.objectViewer permissions. More information can be found in Google's documentation","title":"Privileges"},{"location":"docs/advanced/private-registries/gcr/#json-file-format","text":"The JSON file specified should have the following format provided by google's service account mechanisms: { \"type\" : \"service_account\" , \"project_id\" : \"your_special_project\" , \"private_key_id\" : \"XXXXXXXXXXXXXXXXXXXXxx\" , \"private_key\" : \"-----BEGIN PRIVATE KEY-----\\nNONONONO\\n-----END PRIVATE KEY-----\\n\" , \"client_email\" : \"somedude@your_special_project.iam.gserviceaccount.com\" , \"client_id\" : \"1234567890\" , \"auth_uri\" : \"https://accounts.google.com/o/oauth2/auth\" , \"token_uri\" : \"https://oauth2.googleapis.com/token\" , \"auth_provider_x509_cert_url\" : \"https://www.googleapis.com/oauth2/v1/certs\" , \"client_x509_cert_url\" : \"https://www.googleapis.com/robot/v1/metadata/x509/somedude%40your_special_project.iam.gserviceaccount.com\" }","title":"JSON File Format"},{"location":"docs/advanced/private-registries/gcr/#usage","text":"If you want to use target project's repository, you can set them via GOOGLE_APPLICATION_CREDENTIALS . # must set TRIVY_USERNAME empty char export GOOGLE_APPLICATION_CREDENTIALS = /path/to/credential.json","title":"Usage"},{"location":"docs/advanced/private-registries/gcr/#testing","text":"You can test credentials in the following manner (assuming they are in /tmp on host machine). docker run -it --rm -v /tmp:/tmp \\ -e GOOGLE_APPLICATION_CREDENTIALS = /tmp/service_account.json \\ aquasec/trivy image gcr.io/your_special_project/your_special_image:your_special_tag","title":"Testing"},{"location":"docs/advanced/private-registries/self/","text":"BasicAuth server needs TRIVY_USERNAME and TRIVY_PASSWORD . export TRIVY_USERNAME ={ USERNAME } export TRIVY_PASSWORD ={ PASSWORD } # if you want to use 80 port, use NonSSL export TRIVY_NON_SSL = true","title":"Self-Hosted"},{"location":"docs/integrations/","text":"Integrations Scan your image automatically as part of your CI workflow, failing the workflow if a vulnerability is found. When you don't want to fail the test, specify --exit-code 0 .","title":"Overview"},{"location":"docs/integrations/#integrations","text":"Scan your image automatically as part of your CI workflow, failing the workflow if a vulnerability is found. When you don't want to fail the test, specify --exit-code 0 .","title":"Integrations"},{"location":"docs/integrations/aws-codepipeline/","text":"AWS CodePipeline See this blog post for an example of using Trivy within AWS CodePipeline.","title":"AWS CodePipeline"},{"location":"docs/integrations/aws-codepipeline/#aws-codepipeline","text":"See this blog post for an example of using Trivy within AWS CodePipeline.","title":"AWS CodePipeline"},{"location":"docs/integrations/aws-security-hub/","text":"AWS Security Hub Upload findings to Security Hub In the following example using the template asff.tpl , ASFF file can be generated. $ AWS_REGION=us-west-1 AWS_ACCOUNT_ID=123456789012 trivy image --format template --template \"@contrib/asff.tpl\" -o report.asff golang:1.12-alpine ASFF template needs AWS_REGION and AWS_ACCOUNT_ID from environment variables. Then, you can upload it with AWS CLI. $ aws securityhub batch-import-findings --findings file://report.asff Customize You can customize asff.tpl $ export AWS_REGION=us-west-1 $ export AWS_ACCOUNT_ID=123456789012 $ trivy image --format template --template \"@your-asff.tpl\" -o report.asff golang:1.12-alpine Reference https://aws.amazon.com/blogs/security/how-to-build-ci-cd-pipeline-container-vulnerability-scanning-trivy-and-aws-security-hub/","title":"AWS Security Hub"},{"location":"docs/integrations/aws-security-hub/#aws-security-hub","text":"","title":"AWS Security Hub"},{"location":"docs/integrations/aws-security-hub/#upload-findings-to-security-hub","text":"In the following example using the template asff.tpl , ASFF file can be generated. $ AWS_REGION=us-west-1 AWS_ACCOUNT_ID=123456789012 trivy image --format template --template \"@contrib/asff.tpl\" -o report.asff golang:1.12-alpine ASFF template needs AWS_REGION and AWS_ACCOUNT_ID from environment variables. Then, you can upload it with AWS CLI. $ aws securityhub batch-import-findings --findings file://report.asff","title":"Upload findings to Security Hub"},{"location":"docs/integrations/aws-security-hub/#customize","text":"You can customize asff.tpl $ export AWS_REGION=us-west-1 $ export AWS_ACCOUNT_ID=123456789012 $ trivy image --format template --template \"@your-asff.tpl\" -o report.asff golang:1.12-alpine","title":"Customize"},{"location":"docs/integrations/aws-security-hub/#reference","text":"https://aws.amazon.com/blogs/security/how-to-build-ci-cd-pipeline-container-vulnerability-scanning-trivy-and-aws-security-hub/","title":"Reference"},{"location":"docs/integrations/bitbucket/","text":"Bitbucket Pipelines See trivy-pipe for the details.","title":"Bitbucket Pipelines"},{"location":"docs/integrations/bitbucket/#bitbucket-pipelines","text":"See trivy-pipe for the details.","title":"Bitbucket Pipelines"},{"location":"docs/integrations/circleci/","text":"CircleCI $ cat .circleci/config.yml jobs: build: docker: - image: docker:stable-git steps: - checkout - setup_remote_docker - run: name: Build image command: docker build -t trivy-ci-test:${CIRCLE_SHA1} . - run: name: Install trivy command: | apk add --update-cache --upgrade curl curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin - run: name: Scan the local image with trivy command: trivy image --exit-code 0 --no-progress trivy-ci-test:${CIRCLE_SHA1} workflows: version: 2 release: jobs: - build Example Repository","title":"CircleCI"},{"location":"docs/integrations/circleci/#circleci","text":"$ cat .circleci/config.yml jobs: build: docker: - image: docker:stable-git steps: - checkout - setup_remote_docker - run: name: Build image command: docker build -t trivy-ci-test:${CIRCLE_SHA1} . - run: name: Install trivy command: | apk add --update-cache --upgrade curl curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin - run: name: Scan the local image with trivy command: trivy image --exit-code 0 --no-progress trivy-ci-test:${CIRCLE_SHA1} workflows: version: 2 release: jobs: - build Example Repository","title":"CircleCI"},{"location":"docs/integrations/github-actions/","text":"GitHub Actions Here is the Trivy Github Action The Microsoft Azure team have written a container-scan action that uses Trivy and Dockle For full control over the options specified to Trivy, this blog post describes adding Trivy into your own GitHub action workflows","title":"GitHub Actions"},{"location":"docs/integrations/github-actions/#github-actions","text":"Here is the Trivy Github Action The Microsoft Azure team have written a container-scan action that uses Trivy and Dockle For full control over the options specified to Trivy, this blog post describes adding Trivy into your own GitHub action workflows","title":"GitHub Actions"},{"location":"docs/integrations/gitlab-ci/","text":"GitLab CI If you're a GitLab Ultimate customer, GitLab 14.0 and above include out-of-the-box integration with Trivy. To enable it for your project, simply add the container scanning template to your .gitlab-ci.yml file. For more details, please refer to GitLab's documentation . If you're using an earlier version of GitLab, you can still use the new integration by copying the contents of the 14.0 template to your configuration. Alternatively, you can always use the example configurations below. stages : - test trivy : stage : test image : docker:stable services : - name : docker:dind entrypoint : [ \"env\" , \"-u\" , \"DOCKER_HOST\" ] command : [ \"dockerd-entrypoint.sh\" ] variables : DOCKER_HOST : tcp://docker:2375/ DOCKER_DRIVER : overlay2 # See https://github.com/docker-library/docker/pull/166 DOCKER_TLS_CERTDIR : \"\" IMAGE : trivy-ci-test:$CI_COMMIT_SHA TRIVY_NO_PROGRESS : \"true\" TRIVY_CACHE_DIR : \".trivycache/\" before_script : - export TRIVY_VERSION=$(wget -qO - \"https://api.github.com/repos/aquasecurity/trivy/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"v([^\"]+)\".*/\\1/') - echo $TRIVY_VERSION - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf - allow_failure : true script : # Build image - docker build -t $IMAGE . # Build report - ./trivy image --exit-code 0 --format template --template \"@contrib/gitlab.tpl\" -o gl-container-scanning-report.json $IMAGE # Print report - ./trivy image --exit-code 0 --severity HIGH $IMAGE # Fail on severe vulnerabilities - ./trivy image --exit-code 1 --severity CRITICAL $IMAGE cache : paths : - .trivycache/ # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold) artifacts : reports : container_scanning : gl-container-scanning-report.json Example Repository GitLab CI using Trivy container To scan a previously built image that has already been pushed into the GitLab container registry the following CI job manifest can be used. Note that entrypoint needs to be unset for the script section to work. In case of a non-public GitLab project Trivy additionally needs to authenticate to the registry to be able to pull your application image. Finally, it is not necessary to clone the project repo as we only work with the container image. container_scanning : image : name : docker.io/aquasec/trivy:latest entrypoint : [ \"\" ] variables : # No need to clone the repo, we exclusively work on artifacts. See # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy GIT_STRATEGY : none TRIVY_USERNAME : \"$CI_REGISTRY_USER\" TRIVY_PASSWORD : \"$CI_REGISTRY_PASSWORD\" TRIVY_AUTH_URL : \"$CI_REGISTRY\" TRIVY_NO_PROGRESS : \"true\" TRIVY_CACHE_DIR : \".trivycache/\" FULL_IMAGE_NAME : $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG script : - trivy --version # cache cleanup is needed when scanning images with the same tags, it does not remove the database - time trivy image --clear-cache # update vulnerabilities db - time trivy image --download-db-only # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there - time trivy image --exit-code 0 --format template --template \"@/contrib/gitlab.tpl\" --output \"$CI_PROJECT_DIR/gl-container-scanning-report.json\" \"$FULL_IMAGE_NAME\" # Prints full report - time trivy image --exit-code 0 \"$FULL_IMAGE_NAME\" # Fail on critical vulnerabilities - time trivy image --exit-code 1 --severity CRITICAL \"$FULL_IMAGE_NAME\" cache : paths : - .trivycache/ # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold) artifacts : when : always reports : container_scanning : gl-container-scanning-report.json tags : - docker-runner Gitlab CI alternative template Depending on the edition of gitlab you have or your desired workflow, the container scanning template may not meet your needs. As an addition to the above container scanning template, a template for code climate has been included. The key things to update from the above examples are the template and report type. An updated example is below. stages : - test trivy : stage : test image : docker:stable services : - name : docker:dind entrypoint : [ \"env\" , \"-u\" , \"DOCKER_HOST\" ] command : [ \"dockerd-entrypoint.sh\" ] variables : DOCKER_HOST : tcp://docker:2375/ DOCKER_DRIVER : overlay2 # See https://github.com/docker-library/docker/pull/166 DOCKER_TLS_CERTDIR : \"\" IMAGE : trivy-ci-test:$CI_COMMIT_SHA TRIVY_NO_PROGRESS : \"true\" TRIVY_CACHE_DIR : \".trivycache/\" before_script : - export TRIVY_VERSION=$(wget -qO - \"https://api.github.com/repos/aquasecurity/trivy/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"v([^\"]+)\".*/\\1/') - echo $TRIVY_VERSION - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf - allow_failure : true script : # Build image - docker build -t $IMAGE . # Image report - ./trivy image --exit-code 0 --format template --template \"@contrib/gitlab-codequality.tpl\" -o gl-codeclimate-image.json $IMAGE # Filesystem report - ./trivy filesystem --security-checks config,vuln --exit-code 0 --format template --template \"@contrib/gitlab-codequality.tpl\" -o gl-codeclimate-fs.json . # Combine report - apk update && apk add jq - jq -s 'add' gl-codeclimate-image.json gl-codeclimate-fs.json > gl-codeclimate.json cache : paths : - .trivycache/ # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold) artifacts : paths : - gl-codeclimate.json reports : codequality : gl-codeclimate.json Currently gitlab only supports a single code quality report. There is an open feature request to support multiple reports. Until this has been implemented, if you already have a code quality report in your pipeline, you can use jq to combine reports. Depending on how you name your artifacts, it may be necessary to rename the artifact if you want to reuse the name. To then combine the previous artifact with the output of trivy, the following jq command can be used, jq -s 'add' prev-codeclimate.json trivy-codeclimate.json > gl-codeclimate.json . Gitlab CI alternative template example report You'll be able to see a full report in the Gitlab pipeline code quality UI, where filesystem vulnerabilities and misconfigurations include links to the flagged files and image vulnerabilities report the image/os or runtime/library that the vulnerability originates from instead.","title":"GitLab CI"},{"location":"docs/integrations/gitlab-ci/#gitlab-ci","text":"If you're a GitLab Ultimate customer, GitLab 14.0 and above include out-of-the-box integration with Trivy. To enable it for your project, simply add the container scanning template to your .gitlab-ci.yml file. For more details, please refer to GitLab's documentation . If you're using an earlier version of GitLab, you can still use the new integration by copying the contents of the 14.0 template to your configuration. Alternatively, you can always use the example configurations below. stages : - test trivy : stage : test image : docker:stable services : - name : docker:dind entrypoint : [ \"env\" , \"-u\" , \"DOCKER_HOST\" ] command : [ \"dockerd-entrypoint.sh\" ] variables : DOCKER_HOST : tcp://docker:2375/ DOCKER_DRIVER : overlay2 # See https://github.com/docker-library/docker/pull/166 DOCKER_TLS_CERTDIR : \"\" IMAGE : trivy-ci-test:$CI_COMMIT_SHA TRIVY_NO_PROGRESS : \"true\" TRIVY_CACHE_DIR : \".trivycache/\" before_script : - export TRIVY_VERSION=$(wget -qO - \"https://api.github.com/repos/aquasecurity/trivy/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"v([^\"]+)\".*/\\1/') - echo $TRIVY_VERSION - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf - allow_failure : true script : # Build image - docker build -t $IMAGE . # Build report - ./trivy image --exit-code 0 --format template --template \"@contrib/gitlab.tpl\" -o gl-container-scanning-report.json $IMAGE # Print report - ./trivy image --exit-code 0 --severity HIGH $IMAGE # Fail on severe vulnerabilities - ./trivy image --exit-code 1 --severity CRITICAL $IMAGE cache : paths : - .trivycache/ # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold) artifacts : reports : container_scanning : gl-container-scanning-report.json Example Repository","title":"GitLab CI"},{"location":"docs/integrations/gitlab-ci/#gitlab-ci-using-trivy-container","text":"To scan a previously built image that has already been pushed into the GitLab container registry the following CI job manifest can be used. Note that entrypoint needs to be unset for the script section to work. In case of a non-public GitLab project Trivy additionally needs to authenticate to the registry to be able to pull your application image. Finally, it is not necessary to clone the project repo as we only work with the container image. container_scanning : image : name : docker.io/aquasec/trivy:latest entrypoint : [ \"\" ] variables : # No need to clone the repo, we exclusively work on artifacts. See # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy GIT_STRATEGY : none TRIVY_USERNAME : \"$CI_REGISTRY_USER\" TRIVY_PASSWORD : \"$CI_REGISTRY_PASSWORD\" TRIVY_AUTH_URL : \"$CI_REGISTRY\" TRIVY_NO_PROGRESS : \"true\" TRIVY_CACHE_DIR : \".trivycache/\" FULL_IMAGE_NAME : $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG script : - trivy --version # cache cleanup is needed when scanning images with the same tags, it does not remove the database - time trivy image --clear-cache # update vulnerabilities db - time trivy image --download-db-only # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there - time trivy image --exit-code 0 --format template --template \"@/contrib/gitlab.tpl\" --output \"$CI_PROJECT_DIR/gl-container-scanning-report.json\" \"$FULL_IMAGE_NAME\" # Prints full report - time trivy image --exit-code 0 \"$FULL_IMAGE_NAME\" # Fail on critical vulnerabilities - time trivy image --exit-code 1 --severity CRITICAL \"$FULL_IMAGE_NAME\" cache : paths : - .trivycache/ # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold) artifacts : when : always reports : container_scanning : gl-container-scanning-report.json tags : - docker-runner","title":"GitLab CI using Trivy container"},{"location":"docs/integrations/gitlab-ci/#gitlab-ci-alternative-template","text":"Depending on the edition of gitlab you have or your desired workflow, the container scanning template may not meet your needs. As an addition to the above container scanning template, a template for code climate has been included. The key things to update from the above examples are the template and report type. An updated example is below. stages : - test trivy : stage : test image : docker:stable services : - name : docker:dind entrypoint : [ \"env\" , \"-u\" , \"DOCKER_HOST\" ] command : [ \"dockerd-entrypoint.sh\" ] variables : DOCKER_HOST : tcp://docker:2375/ DOCKER_DRIVER : overlay2 # See https://github.com/docker-library/docker/pull/166 DOCKER_TLS_CERTDIR : \"\" IMAGE : trivy-ci-test:$CI_COMMIT_SHA TRIVY_NO_PROGRESS : \"true\" TRIVY_CACHE_DIR : \".trivycache/\" before_script : - export TRIVY_VERSION=$(wget -qO - \"https://api.github.com/repos/aquasecurity/trivy/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"v([^\"]+)\".*/\\1/') - echo $TRIVY_VERSION - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf - allow_failure : true script : # Build image - docker build -t $IMAGE . # Image report - ./trivy image --exit-code 0 --format template --template \"@contrib/gitlab-codequality.tpl\" -o gl-codeclimate-image.json $IMAGE # Filesystem report - ./trivy filesystem --security-checks config,vuln --exit-code 0 --format template --template \"@contrib/gitlab-codequality.tpl\" -o gl-codeclimate-fs.json . # Combine report - apk update && apk add jq - jq -s 'add' gl-codeclimate-image.json gl-codeclimate-fs.json > gl-codeclimate.json cache : paths : - .trivycache/ # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold) artifacts : paths : - gl-codeclimate.json reports : codequality : gl-codeclimate.json Currently gitlab only supports a single code quality report. There is an open feature request to support multiple reports. Until this has been implemented, if you already have a code quality report in your pipeline, you can use jq to combine reports. Depending on how you name your artifacts, it may be necessary to rename the artifact if you want to reuse the name. To then combine the previous artifact with the output of trivy, the following jq command can be used, jq -s 'add' prev-codeclimate.json trivy-codeclimate.json > gl-codeclimate.json .","title":"Gitlab CI alternative template"},{"location":"docs/integrations/gitlab-ci/#gitlab-ci-alternative-template-example-report","text":"You'll be able to see a full report in the Gitlab pipeline code quality UI, where filesystem vulnerabilities and misconfigurations include links to the flagged files and image vulnerabilities report the image/os or runtime/library that the vulnerability originates from instead.","title":"Gitlab CI alternative template example report"},{"location":"docs/integrations/travis-ci/","text":"Travis CI $ cat .travis.yml services: - docker env: global: - COMMIT=${TRAVIS_COMMIT::8} before_install: - docker build -t trivy-ci-test:${COMMIT} . - export VERSION=$(curl --silent \"https://api.github.com/repos/aquasecurity/trivy/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"v([^\"]+)\".*/\\1/') - wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz - tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz script: - ./trivy image --exit-code 0 --severity HIGH --no-progress trivy-ci-test:${COMMIT} - ./trivy image --exit-code 1 --severity CRITICAL --no-progress trivy-ci-test:${COMMIT} cache: directories: - $HOME/.cache/trivy Example Repository","title":"Travis CI"},{"location":"docs/integrations/travis-ci/#travis-ci","text":"$ cat .travis.yml services: - docker env: global: - COMMIT=${TRAVIS_COMMIT::8} before_install: - docker build -t trivy-ci-test:${COMMIT} . - export VERSION=$(curl --silent \"https://api.github.com/repos/aquasecurity/trivy/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"v([^\"]+)\".*/\\1/') - wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz - tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz script: - ./trivy image --exit-code 0 --severity HIGH --no-progress trivy-ci-test:${COMMIT} - ./trivy image --exit-code 1 --severity CRITICAL --no-progress trivy-ci-test:${COMMIT} cache: directories: - $HOME/.cache/trivy Example Repository","title":"Travis CI"},{"location":"docs/kubernetes/scanning/","text":"Kubernetes EXPERIMENTAL This feature might change without preserving backwards compatibility. Scan your Kubernetes cluster for both Vulnerabilities and Misconfigurations. Scan a full cluster: $ trivy k8s Scan a specific namespace: $ trivy k8s -n default Scan a namespace for only CRITICAL Vulnerabilities and Misconfigurations: $ trivy k8s -n default -o results.json --severity CRITICAL Trivy uses your local kubectl configuration to access the API server to list artifacts. At this time, JSON is the only supported output and is intended to be used for automation, other reports will be implemented soon. Result { \"ClusterName\": \"minikube\", \"Vulnerabilities\": [ { \"Namespace\": \"default\", \"Kind\": \"Deployment\", \"Name\": \"app\", \"Results\": [ { \"Target\": \"ubuntu:latest (ubuntu 22.04)\", \"Class\": \"os-pkgs\", \"Type\": \"ubuntu\", \"Vulnerabilities\": [ { \"VulnerabilityID\": \"CVE-2016-2781\", \"PkgName\": \"coreutils\", \"InstalledVersion\": \"8.32-4.1ubuntu1\", \"Layer\": { \"Digest\": \"sha256:125a6e411906fe6b0aaa50fc9d600bf6ff9bb11a8651727ce1ed482dc271c24c\", \"DiffID\": \"sha256:e59fc94956120a6c7629f085027578e6357b48061d45714107e79f04a81a6f0c\" }, \"SeveritySource\": \"ubuntu\", \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2016-2781\", \"DataSource\": { \"ID\": \"ubuntu\", \"Name\": \"Ubuntu CVE Tracker\", \"URL\": \"https://git.launchpad.net/ubuntu-cve-tracker\" }, \"Title\": \"coreutils: Non-privileged session can escape to the parent session in chroot\", \"Description\": \"chroot in GNU coreutils, when used with --userspec, allows local users to escape to the parent session via a crafted TIOCSTI ioctl call, which pushes characters to the terminal's input buffer.\", \"Severity\": \"LOW\", \"CweIDs\": [ \"CWE-20\" ], \"VendorSeverity\": { \"cbl-mariner\": 2, \"nvd\": 2, \"redhat\": 2, \"ubuntu\": 1 }, \"CVSS\": { \"nvd\": { \"V2Vector\": \"AV:L/AC:L/Au:N/C:N/I:P/A:N\", \"V3Vector\": \"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:C/C:N/I:H/A:N\", \"V2Score\": 2.1, \"V3Score\": 6.5 }, \"redhat\": { \"V2Vector\": \"AV:L/AC:H/Au:N/C:C/I:C/A:C\", \"V3Vector\": \"CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H\", \"V2Score\": 6.2, \"V3Score\": 8.6 } }, \"References\": [ \"http://seclists.org/oss-sec/2016/q1/452\", \"http://www.openwall.com/lists/oss-security/2016/02/28/2\", \"http://www.openwall.com/lists/oss-security/2016/02/28/3\", \"https://access.redhat.com/security/cve/CVE-2016-2781\", \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2781\", \"https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E\", \"https://lore.kernel.org/patchwork/patch/793178/\", \"https://nvd.nist.gov/vuln/detail/CVE-2016-2781\" ], \"PublishedDate\": \"2017-02-07T15:59:00Z\", \"LastModifiedDate\": \"2021-02-25T17:15:00Z\" } ] } ] } ], \"Misconfigurations\": [ { \"Namespace\": \"default\", \"Kind\": \"Deployment\", \"Name\": \"app\", \"Results\": [ { \"Target\": \"Deployment/app\", \"Class\": \"config\", \"Type\": \"kubernetes\", \"MisconfSummary\": { \"Successes\": 20, \"Failures\": 19, \"Exceptions\": 0 }, \"Misconfigurations\": [ { \"Type\": \"Kubernetes Security Check\", \"ID\": \"KSV001\", \"Title\": \"Process can elevate its own privileges\", \"Description\": \"A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\", \"Message\": \"Container 'app' of Deployment 'app' should set 'securityContext.allowPrivilegeEscalation' to false\", \"Namespace\": \"builtin.kubernetes.KSV001\", \"Query\": \"data.builtin.kubernetes.KSV001.deny\", \"Resolution\": \"Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.\", \"Severity\": \"MEDIUM\", \"PrimaryURL\": \"https://avd.aquasec.com/misconfig/ksv001\", \"References\": [ \"https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted\", \"https://avd.aquasec.com/misconfig/ksv001\" ], \"Status\": \"FAIL\", \"Layer\": {}, \"IacMetadata\": { \"Provider\": \"Kubernetes\", \"Service\": \"general\", \"StartLine\": 121, \"EndLine\": 133 } }, { \"Type\": \"Kubernetes Security Check\", \"ID\": \"KSV003\", \"Title\": \"Default capabilities not dropped\", \"Description\": \"The container should drop all default capabilities and add only those that are needed for its execution.\", \"Message\": \"Container 'app' of Deployment 'app' should add 'ALL' to 'securityContext.capabilities.drop'\", \"Namespace\": \"builtin.kubernetes.KSV003\", \"Query\": \"data.builtin.kubernetes.KSV003.deny\", \"Resolution\": \"Add 'ALL' to containers[].securityContext.capabilities.drop.\", \"Severity\": \"LOW\", \"PrimaryURL\": \"https://avd.aquasec.com/misconfig/ksv003\", \"References\": [ \"https://kubesec.io/basics/containers-securitycontext-capabilities-drop-index-all/\", \"https://avd.aquasec.com/misconfig/ksv003\" ], \"Status\": \"FAIL\", \"Layer\": {}, \"IacMetadata\": { \"Provider\": \"Kubernetes\", \"Service\": \"general\", \"StartLine\": 121, \"EndLine\": 133 } } ] } ] }, { \"Namespace\": \"default\", \"Kind\": \"ConfigMap\", \"Name\": \"kube-root-ca.crt\" } ] }","title":"Scanning"},{"location":"docs/kubernetes/scanning/#kubernetes","text":"EXPERIMENTAL This feature might change without preserving backwards compatibility. Scan your Kubernetes cluster for both Vulnerabilities and Misconfigurations. Scan a full cluster: $ trivy k8s Scan a specific namespace: $ trivy k8s -n default Scan a namespace for only CRITICAL Vulnerabilities and Misconfigurations: $ trivy k8s -n default -o results.json --severity CRITICAL Trivy uses your local kubectl configuration to access the API server to list artifacts. At this time, JSON is the only supported output and is intended to be used for automation, other reports will be implemented soon. Result { \"ClusterName\": \"minikube\", \"Vulnerabilities\": [ { \"Namespace\": \"default\", \"Kind\": \"Deployment\", \"Name\": \"app\", \"Results\": [ { \"Target\": \"ubuntu:latest (ubuntu 22.04)\", \"Class\": \"os-pkgs\", \"Type\": \"ubuntu\", \"Vulnerabilities\": [ { \"VulnerabilityID\": \"CVE-2016-2781\", \"PkgName\": \"coreutils\", \"InstalledVersion\": \"8.32-4.1ubuntu1\", \"Layer\": { \"Digest\": \"sha256:125a6e411906fe6b0aaa50fc9d600bf6ff9bb11a8651727ce1ed482dc271c24c\", \"DiffID\": \"sha256:e59fc94956120a6c7629f085027578e6357b48061d45714107e79f04a81a6f0c\" }, \"SeveritySource\": \"ubuntu\", \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2016-2781\", \"DataSource\": { \"ID\": \"ubuntu\", \"Name\": \"Ubuntu CVE Tracker\", \"URL\": \"https://git.launchpad.net/ubuntu-cve-tracker\" }, \"Title\": \"coreutils: Non-privileged session can escape to the parent session in chroot\", \"Description\": \"chroot in GNU coreutils, when used with --userspec, allows local users to escape to the parent session via a crafted TIOCSTI ioctl call, which pushes characters to the terminal's input buffer.\", \"Severity\": \"LOW\", \"CweIDs\": [ \"CWE-20\" ], \"VendorSeverity\": { \"cbl-mariner\": 2, \"nvd\": 2, \"redhat\": 2, \"ubuntu\": 1 }, \"CVSS\": { \"nvd\": { \"V2Vector\": \"AV:L/AC:L/Au:N/C:N/I:P/A:N\", \"V3Vector\": \"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:C/C:N/I:H/A:N\", \"V2Score\": 2.1, \"V3Score\": 6.5 }, \"redhat\": { \"V2Vector\": \"AV:L/AC:H/Au:N/C:C/I:C/A:C\", \"V3Vector\": \"CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H\", \"V2Score\": 6.2, \"V3Score\": 8.6 } }, \"References\": [ \"http://seclists.org/oss-sec/2016/q1/452\", \"http://www.openwall.com/lists/oss-security/2016/02/28/2\", \"http://www.openwall.com/lists/oss-security/2016/02/28/3\", \"https://access.redhat.com/security/cve/CVE-2016-2781\", \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2781\", \"https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E\", \"https://lore.kernel.org/patchwork/patch/793178/\", \"https://nvd.nist.gov/vuln/detail/CVE-2016-2781\" ], \"PublishedDate\": \"2017-02-07T15:59:00Z\", \"LastModifiedDate\": \"2021-02-25T17:15:00Z\" } ] } ] } ], \"Misconfigurations\": [ { \"Namespace\": \"default\", \"Kind\": \"Deployment\", \"Name\": \"app\", \"Results\": [ { \"Target\": \"Deployment/app\", \"Class\": \"config\", \"Type\": \"kubernetes\", \"MisconfSummary\": { \"Successes\": 20, \"Failures\": 19, \"Exceptions\": 0 }, \"Misconfigurations\": [ { \"Type\": \"Kubernetes Security Check\", \"ID\": \"KSV001\", \"Title\": \"Process can elevate its own privileges\", \"Description\": \"A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\", \"Message\": \"Container 'app' of Deployment 'app' should set 'securityContext.allowPrivilegeEscalation' to false\", \"Namespace\": \"builtin.kubernetes.KSV001\", \"Query\": \"data.builtin.kubernetes.KSV001.deny\", \"Resolution\": \"Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.\", \"Severity\": \"MEDIUM\", \"PrimaryURL\": \"https://avd.aquasec.com/misconfig/ksv001\", \"References\": [ \"https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted\", \"https://avd.aquasec.com/misconfig/ksv001\" ], \"Status\": \"FAIL\", \"Layer\": {}, \"IacMetadata\": { \"Provider\": \"Kubernetes\", \"Service\": \"general\", \"StartLine\": 121, \"EndLine\": 133 } }, { \"Type\": \"Kubernetes Security Check\", \"ID\": \"KSV003\", \"Title\": \"Default capabilities not dropped\", \"Description\": \"The container should drop all default capabilities and add only those that are needed for its execution.\", \"Message\": \"Container 'app' of Deployment 'app' should add 'ALL' to 'securityContext.capabilities.drop'\", \"Namespace\": \"builtin.kubernetes.KSV003\", \"Query\": \"data.builtin.kubernetes.KSV003.deny\", \"Resolution\": \"Add 'ALL' to containers[].securityContext.capabilities.drop.\", \"Severity\": \"LOW\", \"PrimaryURL\": \"https://avd.aquasec.com/misconfig/ksv003\", \"References\": [ \"https://kubesec.io/basics/containers-securitycontext-capabilities-drop-index-all/\", \"https://avd.aquasec.com/misconfig/ksv003\" ], \"Status\": \"FAIL\", \"Layer\": {}, \"IacMetadata\": { \"Provider\": \"Kubernetes\", \"Service\": \"general\", \"StartLine\": 121, \"EndLine\": 133 } } ] } ] }, { \"Namespace\": \"default\", \"Kind\": \"ConfigMap\", \"Name\": \"kube-root-ca.crt\" } ] }","title":"Kubernetes"},{"location":"docs/misconfiguration/scanning/","text":"Misconfiguration Scanning Trivy provides built-in policies to detect configuration issues in Docker, Kubernetes, Terraform and CloudFormation. Also, you can write your own policies in Rego to scan JSON, YAML, etc, like Conftest . Quick start Simply specify a directory containing IaC files such as Terraform, CloudFormation and Dockerfile. $ trivy config [ YOUR_IaC_DIRECTORY ] Example $ ls build/ Dockerfile $ trivy config ./build 2021-07-09T10:06:29.188+0300 INFO Need to update the built-in policies 2021-07-09T10:06:29.188+0300 INFO Downloading the built-in policies... 2021-07-09T10:06:30.520+0300 INFO Detected config files: 1 Dockerfile (dockerfile) ======================= Tests: 23 (SUCCESSES: 22, FAILURES: 1, EXCEPTIONS: 0) Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ You can also enable misconfiguration detection in container image, filesystem and git repository scanning via --security-checks config . $ trivy image --security-checks config IMAGE_NAME $ trivy fs --security-checks config /path/to/dir Note Misconfiguration detection is not enabled by default in image , fs and repo subcommands. Unlike the config subcommand, image , fs and repo subcommands can also scan for vulnerabilities and secrets at the same time. You can specify --security-checks vuln,config,secret to enable vulnerability and secret detection as well as misconfiguration detection. Example $ ls myapp/ Dockerfile Pipfile.lock $ trivy fs --security-checks vuln,config,secret --severity HIGH,CRITICAL myapp/ 2021 -07-09T12:03:27.564+0300 INFO Number of language-specific files: 1 2021 -07-09T12:03:27.564+0300 INFO Detecting pipenv vulnerabilities... 2021 -07-09T12:03:27.566+0300 INFO Detected config files: 1 Pipfile.lock ( pipenv ) ===================== Total: 1 ( HIGH: 1 , CRITICAL: 0 ) +----------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +----------+------------------+----------+-------------------+---------------+---------------------------------------+ | httplib2 | CVE-2021-21240 | HIGH | 0 .12.1 | 0 .19.0 | python-httplib2: Regular | | | | | | | expression denial of | | | | | | | service via malicious header | | | | | | | -->avd.aquasec.com/nvd/cve-2021-21240 | +----------+------------------+----------+-------------------+---------------+---------------------------------------+ Dockerfile ( dockerfile ) ======================= Tests: 23 ( SUCCESSES: 22 , FAILURES: 1 , EXCEPTIONS: 0 ) Failures: 1 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ In the above example, Trivy detected vulnerabilities of Python dependencies and misconfigurations in Dockerfile. Type detection The specified directory can contain mixed types of IaC files. Trivy automatically detects config types and applies relevant policies. For example, the following example holds IaC files for Terraform, CloudFormation, Kubernetes, and Dockerfile in the same directory. $ ls iac/ Dockerfile deployment.yaml main.tf $ trivy conf --severity HIGH,CRITICAL ./iac Result 2021-07-09T11:51:08.212+0300 INFO Need to update the built-in policies 2021-07-09T11:51:08.212+0300 INFO Downloading the built-in policies... 2021-07-09T11:51:09.527+0300 INFO Detected config files: 3 Dockerfile (dockerfile) ======================= Tests: 23 (SUCCESSES: 22, FAILURES: 1, EXCEPTIONS: 0) Failures: 1 (HIGH: 1, CRITICAL: 0) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ deployment.yaml (kubernetes) ============================ Tests: 28 (SUCCESSES: 15, FAILURES: 13, EXCEPTIONS: 0) Failures: 13 (HIGH: 1, CRITICAL: 0) +---------------------------+------------+----------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------------+----------+------------------------------------------+ | Kubernetes Security Check | KSV005 | SYS_ADMIN capability added | HIGH | Container 'hello-kubernetes' of | | | | | | Deployment 'hello-kubernetes' | | | | | | should not include 'SYS_ADMIN' in | | | | | | 'securityContext.capabilities.add' | | | | | | -->avd.aquasec.com/appshield/ksv005 | +---------------------------+------------+----------------------------+----------+------------------------------------------+ main.tf (terraform) =================== Tests: 23 (SUCCESSES: 14, FAILURES: 9, EXCEPTIONS: 0) Failures: 9 (HIGH: 6, CRITICAL: 1) +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ | Terraform Security Check powered by | AWS003 | AWS Classic resource usage. | HIGH | Resource | | tfsec | | | | 'aws_db_security_group.my-group' | | | | | | uses EC2 Classic. Use a VPC instead. | | | | | | -->tfsec.dev/docs/aws/AWS003/ | + +------------+------------------------------------------+----------+--------------------------------------------------------+ | | AWS004 | Use of plain HTTP. | CRITICAL | Resource | | | | | | 'aws_alb_listener.my-alb-listener' | | | | | | uses plain HTTP instead of HTTPS. | | | | | | -->tfsec.dev/docs/aws/AWS004/ | + +------------+------------------------------------------+----------+--------------------------------------------------------+ | | AWS018 | Missing description for security | HIGH | Resource | | | | group/security group rule. | | 'aws_security_group_rule.my-rule' should | | | | | | include a description for auditing | | | | | | purposes. -->tfsec.dev/docs/aws/AWS018/ | + +------------+------------------------------------------+ +--------------------------------------------------------+ | | AWS025 | API Gateway domain name uses outdated | | Resource | | | | SSL/TLS protocols. | | 'aws_api_gateway_domain_name.empty_security_policy' | | | | | | defines outdated SSL/TLS policies (not using | | | | | | TLS_1_2). -->tfsec.dev/docs/aws/AWS025/ | + + + + +--------------------------------------------------------+ | | | | | Resource | | | | | | 'aws_api_gateway_domain_name.missing_security_policy' | | | | | | should include security_policy (defaults to outdated | | | | | | SSL/TLS policy). -->tfsec.dev/docs/aws/AWS025/ | + + + + +--------------------------------------------------------+ | | | | | Resource | | | | | | 'aws_api_gateway_domain_name.outdated_security_policy' | | | | | | defines outdated SSL/TLS policies (not using TLS_1_2). | | | | | | -->tfsec.dev/docs/aws/AWS025/ | + +------------+------------------------------------------+ +--------------------------------------------------------+ | | AZU003 | Unencrypted managed disk. | | Resource 'azurerm_managed_disk.source' | | | | | | defines an unencrypted managed disk. | | | | | | -->tfsec.dev/docs/azure/AZU003/ | +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ You can see the config type next to each file name. Example Dockerfile ( dockerfile ) ======================= Tests: 23 ( SUCCESSES: 22 , FAILURES: 1 , EXCEPTIONS: 0 ) Failures: 1 ( HIGH: 1 , CRITICAL: 0 ) ... deployment.yaml ( kubernetes ) ============================ Tests: 28 ( SUCCESSES: 15 , FAILURES: 13 , EXCEPTIONS: 0 ) Failures: 13 ( HIGH: 1 , CRITICAL: 0 ) ... main.tf ( terraform ) =================== Tests: 23 ( SUCCESSES: 14 , FAILURES: 9 , EXCEPTIONS: 0 ) Failures: 9 ( HIGH: 6 , CRITICAL: 1 ) ... bucket.yaml ( cloudformation ) ============================ Tests: 9 ( SUCCESSES: 3 , FAILURES: 6 , EXCEPTIONS: 0 ) Failures: 6 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 2 , HIGH: 4 , CRITICAL: 0 ) Examples See here","title":"Scanning"},{"location":"docs/misconfiguration/scanning/#misconfiguration-scanning","text":"Trivy provides built-in policies to detect configuration issues in Docker, Kubernetes, Terraform and CloudFormation. Also, you can write your own policies in Rego to scan JSON, YAML, etc, like Conftest .","title":"Misconfiguration Scanning"},{"location":"docs/misconfiguration/scanning/#quick-start","text":"Simply specify a directory containing IaC files such as Terraform, CloudFormation and Dockerfile. $ trivy config [ YOUR_IaC_DIRECTORY ] Example $ ls build/ Dockerfile $ trivy config ./build 2021-07-09T10:06:29.188+0300 INFO Need to update the built-in policies 2021-07-09T10:06:29.188+0300 INFO Downloading the built-in policies... 2021-07-09T10:06:30.520+0300 INFO Detected config files: 1 Dockerfile (dockerfile) ======================= Tests: 23 (SUCCESSES: 22, FAILURES: 1, EXCEPTIONS: 0) Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ You can also enable misconfiguration detection in container image, filesystem and git repository scanning via --security-checks config . $ trivy image --security-checks config IMAGE_NAME $ trivy fs --security-checks config /path/to/dir Note Misconfiguration detection is not enabled by default in image , fs and repo subcommands. Unlike the config subcommand, image , fs and repo subcommands can also scan for vulnerabilities and secrets at the same time. You can specify --security-checks vuln,config,secret to enable vulnerability and secret detection as well as misconfiguration detection. Example $ ls myapp/ Dockerfile Pipfile.lock $ trivy fs --security-checks vuln,config,secret --severity HIGH,CRITICAL myapp/ 2021 -07-09T12:03:27.564+0300 INFO Number of language-specific files: 1 2021 -07-09T12:03:27.564+0300 INFO Detecting pipenv vulnerabilities... 2021 -07-09T12:03:27.566+0300 INFO Detected config files: 1 Pipfile.lock ( pipenv ) ===================== Total: 1 ( HIGH: 1 , CRITICAL: 0 ) +----------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +----------+------------------+----------+-------------------+---------------+---------------------------------------+ | httplib2 | CVE-2021-21240 | HIGH | 0 .12.1 | 0 .19.0 | python-httplib2: Regular | | | | | | | expression denial of | | | | | | | service via malicious header | | | | | | | -->avd.aquasec.com/nvd/cve-2021-21240 | +----------+------------------+----------+-------------------+---------------+---------------------------------------+ Dockerfile ( dockerfile ) ======================= Tests: 23 ( SUCCESSES: 22 , FAILURES: 1 , EXCEPTIONS: 0 ) Failures: 1 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ In the above example, Trivy detected vulnerabilities of Python dependencies and misconfigurations in Dockerfile.","title":"Quick start"},{"location":"docs/misconfiguration/scanning/#type-detection","text":"The specified directory can contain mixed types of IaC files. Trivy automatically detects config types and applies relevant policies. For example, the following example holds IaC files for Terraform, CloudFormation, Kubernetes, and Dockerfile in the same directory. $ ls iac/ Dockerfile deployment.yaml main.tf $ trivy conf --severity HIGH,CRITICAL ./iac Result 2021-07-09T11:51:08.212+0300 INFO Need to update the built-in policies 2021-07-09T11:51:08.212+0300 INFO Downloading the built-in policies... 2021-07-09T11:51:09.527+0300 INFO Detected config files: 3 Dockerfile (dockerfile) ======================= Tests: 23 (SUCCESSES: 22, FAILURES: 1, EXCEPTIONS: 0) Failures: 1 (HIGH: 1, CRITICAL: 0) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ deployment.yaml (kubernetes) ============================ Tests: 28 (SUCCESSES: 15, FAILURES: 13, EXCEPTIONS: 0) Failures: 13 (HIGH: 1, CRITICAL: 0) +---------------------------+------------+----------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------------+----------+------------------------------------------+ | Kubernetes Security Check | KSV005 | SYS_ADMIN capability added | HIGH | Container 'hello-kubernetes' of | | | | | | Deployment 'hello-kubernetes' | | | | | | should not include 'SYS_ADMIN' in | | | | | | 'securityContext.capabilities.add' | | | | | | -->avd.aquasec.com/appshield/ksv005 | +---------------------------+------------+----------------------------+----------+------------------------------------------+ main.tf (terraform) =================== Tests: 23 (SUCCESSES: 14, FAILURES: 9, EXCEPTIONS: 0) Failures: 9 (HIGH: 6, CRITICAL: 1) +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ | Terraform Security Check powered by | AWS003 | AWS Classic resource usage. | HIGH | Resource | | tfsec | | | | 'aws_db_security_group.my-group' | | | | | | uses EC2 Classic. Use a VPC instead. | | | | | | -->tfsec.dev/docs/aws/AWS003/ | + +------------+------------------------------------------+----------+--------------------------------------------------------+ | | AWS004 | Use of plain HTTP. | CRITICAL | Resource | | | | | | 'aws_alb_listener.my-alb-listener' | | | | | | uses plain HTTP instead of HTTPS. | | | | | | -->tfsec.dev/docs/aws/AWS004/ | + +------------+------------------------------------------+----------+--------------------------------------------------------+ | | AWS018 | Missing description for security | HIGH | Resource | | | | group/security group rule. | | 'aws_security_group_rule.my-rule' should | | | | | | include a description for auditing | | | | | | purposes. -->tfsec.dev/docs/aws/AWS018/ | + +------------+------------------------------------------+ +--------------------------------------------------------+ | | AWS025 | API Gateway domain name uses outdated | | Resource | | | | SSL/TLS protocols. | | 'aws_api_gateway_domain_name.empty_security_policy' | | | | | | defines outdated SSL/TLS policies (not using | | | | | | TLS_1_2). -->tfsec.dev/docs/aws/AWS025/ | + + + + +--------------------------------------------------------+ | | | | | Resource | | | | | | 'aws_api_gateway_domain_name.missing_security_policy' | | | | | | should include security_policy (defaults to outdated | | | | | | SSL/TLS policy). -->tfsec.dev/docs/aws/AWS025/ | + + + + +--------------------------------------------------------+ | | | | | Resource | | | | | | 'aws_api_gateway_domain_name.outdated_security_policy' | | | | | | defines outdated SSL/TLS policies (not using TLS_1_2). | | | | | | -->tfsec.dev/docs/aws/AWS025/ | + +------------+------------------------------------------+ +--------------------------------------------------------+ | | AZU003 | Unencrypted managed disk. | | Resource 'azurerm_managed_disk.source' | | | | | | defines an unencrypted managed disk. | | | | | | -->tfsec.dev/docs/azure/AZU003/ | +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ You can see the config type next to each file name. Example Dockerfile ( dockerfile ) ======================= Tests: 23 ( SUCCESSES: 22 , FAILURES: 1 , EXCEPTIONS: 0 ) Failures: 1 ( HIGH: 1 , CRITICAL: 0 ) ... deployment.yaml ( kubernetes ) ============================ Tests: 28 ( SUCCESSES: 15 , FAILURES: 13 , EXCEPTIONS: 0 ) Failures: 13 ( HIGH: 1 , CRITICAL: 0 ) ... main.tf ( terraform ) =================== Tests: 23 ( SUCCESSES: 14 , FAILURES: 9 , EXCEPTIONS: 0 ) Failures: 9 ( HIGH: 6 , CRITICAL: 1 ) ... bucket.yaml ( cloudformation ) ============================ Tests: 9 ( SUCCESSES: 3 , FAILURES: 6 , EXCEPTIONS: 0 ) Failures: 6 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 2 , HIGH: 4 , CRITICAL: 0 )","title":"Type detection"},{"location":"docs/misconfiguration/scanning/#examples","text":"See here","title":"Examples"},{"location":"docs/misconfiguration/comparison/cfsec/","text":"vs cfsec cfsec uses static analysis of your CloudFormation templates to spot potential security issues. Trivy uses cfsec internally to scan both JSON and YAML configuration files, but Trivy doesn't support some features provided by cfsec. This section describes the differences between Trivy and cfsec. Feature Trivy cfsec Built-in Policies Custom Policies Policy Metadata 1 Show Successes Disable Policies Show Issue Lines View Statistics Filtering by Severity Supported Formats Dockerfile, JSON, YAML, Terraform, CloudFormation etc. CloudFormation JSON and YAML cfsec is designed for CloudFormation. People who use only want to scan their CloudFormation templates should use cfsec. People who want to scan a wide range of configuration files should use Trivy. To enrich the results such as ID, Title, Description, Severity, etc. \u21a9","title":"vs cfsec"},{"location":"docs/misconfiguration/comparison/cfsec/#vs-cfsec","text":"cfsec uses static analysis of your CloudFormation templates to spot potential security issues. Trivy uses cfsec internally to scan both JSON and YAML configuration files, but Trivy doesn't support some features provided by cfsec. This section describes the differences between Trivy and cfsec. Feature Trivy cfsec Built-in Policies Custom Policies Policy Metadata 1 Show Successes Disable Policies Show Issue Lines View Statistics Filtering by Severity Supported Formats Dockerfile, JSON, YAML, Terraform, CloudFormation etc. CloudFormation JSON and YAML cfsec is designed for CloudFormation. People who use only want to scan their CloudFormation templates should use cfsec. People who want to scan a wide range of configuration files should use Trivy. To enrich the results such as ID, Title, Description, Severity, etc. \u21a9","title":"vs cfsec"},{"location":"docs/misconfiguration/comparison/conftest/","text":"vs Conftest Conftest is a really nice tool to help you write tests against structured configuration data. Misconfiguration detection in Trivy is heavily inspired by Conftest and provides similar features Conftest has. This section describes the differences between Trivy and Conftest. Feature Trivy Conftest Support Rego Language Built-in Policies Custom Policies Custom Data Combine Combine per Policy Policy Input Selector 1 Policy Metadata 2 3 Filtering by Severity Rule-based Exceptions Namespace-based Exceptions Sharing Policies Show Successes Flexible Exit Code Rego Unit Tests 4 Go Testing Verbose Trace Supported Formats 6 formats 5 14 formats 6 Trivy offers built-in policies and a variety of options, while Conftest only supports custom policies. In other words, Conftest is simpler and lighter. Conftest is a general testing tool for configuration files, and Trivy is more security-focused. People who need an out-of-the-box misconfiguration scanner should use Trivy. People who don't need built-in policies and write your policies should use Conftest. Pass only the types of configuration file as input, specified in selector \u21a9 To enrich the results such as ID, Title, Description, etc. \u21a9 Conftest supports structured errors in rules , but they are free format and not natively supported by Conftest. \u21a9 Trivy is not able to run *_test.rego like conftest verify . \u21a9 Dockerfile, HCL, HCL2, JSON, TOML, and YAML \u21a9 CUE, Dockerfile, EDN, HCL, HCL2, HOCON, Ignore files, INI, JSON, Jsonnet, TOML, VCL, XML, and YAML \u21a9","title":"vs Conftest"},{"location":"docs/misconfiguration/comparison/conftest/#vs-conftest","text":"Conftest is a really nice tool to help you write tests against structured configuration data. Misconfiguration detection in Trivy is heavily inspired by Conftest and provides similar features Conftest has. This section describes the differences between Trivy and Conftest. Feature Trivy Conftest Support Rego Language Built-in Policies Custom Policies Custom Data Combine Combine per Policy Policy Input Selector 1 Policy Metadata 2 3 Filtering by Severity Rule-based Exceptions Namespace-based Exceptions Sharing Policies Show Successes Flexible Exit Code Rego Unit Tests 4 Go Testing Verbose Trace Supported Formats 6 formats 5 14 formats 6 Trivy offers built-in policies and a variety of options, while Conftest only supports custom policies. In other words, Conftest is simpler and lighter. Conftest is a general testing tool for configuration files, and Trivy is more security-focused. People who need an out-of-the-box misconfiguration scanner should use Trivy. People who don't need built-in policies and write your policies should use Conftest. Pass only the types of configuration file as input, specified in selector \u21a9 To enrich the results such as ID, Title, Description, etc. \u21a9 Conftest supports structured errors in rules , but they are free format and not natively supported by Conftest. \u21a9 Trivy is not able to run *_test.rego like conftest verify . \u21a9 Dockerfile, HCL, HCL2, JSON, TOML, and YAML \u21a9 CUE, Dockerfile, EDN, HCL, HCL2, HOCON, Ignore files, INI, JSON, Jsonnet, TOML, VCL, XML, and YAML \u21a9","title":"vs Conftest"},{"location":"docs/misconfiguration/comparison/tfsec/","text":"vs tfsec tfsec uses static analysis of your Terraform templates to spot potential security issues. Trivy uses tfsec internally to scan Terraform HCL files, but Trivy doesn't support some features provided by tfsec. This section describes the differences between Trivy and tfsec. Feature Trivy tfsec Built-in Policies Custom Policies Rego Rego, JSON, and YAML Policy Metadata 1 Show Successes Disable Policies Show Issue Lines Support .tfvars View Statistics Filtering by Severity Supported Formats Dockerfile, JSON, YAML, Terraform, CloudFormation etc. Terraform tfsec is designed for Terraform. People who use only Terraform should use tfsec. People who want to scan a wide range of configuration files should use Trivy. To enrich the results such as ID, Title, Description, Severity, etc. \u21a9","title":"vs tfsec"},{"location":"docs/misconfiguration/comparison/tfsec/#vs-tfsec","text":"tfsec uses static analysis of your Terraform templates to spot potential security issues. Trivy uses tfsec internally to scan Terraform HCL files, but Trivy doesn't support some features provided by tfsec. This section describes the differences between Trivy and tfsec. Feature Trivy tfsec Built-in Policies Custom Policies Rego Rego, JSON, and YAML Policy Metadata 1 Show Successes Disable Policies Show Issue Lines Support .tfvars View Statistics Filtering by Severity Supported Formats Dockerfile, JSON, YAML, Terraform, CloudFormation etc. Terraform tfsec is designed for Terraform. People who use only Terraform should use tfsec. People who want to scan a wide range of configuration files should use Trivy. To enrich the results such as ID, Title, Description, Severity, etc. \u21a9","title":"vs tfsec"},{"location":"docs/misconfiguration/custom/","text":"Custom Policies Overview You can write custom policies in Rego . Once you finish writing custom policies, you can pass the directory where those policies are stored with --policy option. trivy conf --policy /path/to/custom_policies --namespaces user /path/to/config_dir As for --namespaces option, the detail is described as below. File formats If a file name matches the following file patterns, Trivy will parse the file and pass it as input to your Rego policy. File format File pattern JSON *.json YAML *.yaml TOML *.toml HCL *.hcl , *.hcl1 , and *.hcl2 Dockerfile Dockerfile , Dockerfile.* , and *.Dockerfile Containerfile Containerfile , Containerfile.* , and *.Containerfile Configuration languages In the above general file formats, Trivy automatically identifies the following types of configuration files: Ansible (YAML) CloudFormation (JSON/YAML) Kubernetes (JSON/YAML) This is useful for filtering inputs, as described below. Warning Custom policies do not support Terraform at the moment. Rego format A single package must contain only one policy. Example package user.kubernetes.ID001 __rego_metadata__ := { \"id\": \"ID001\", \"title\": \"Deployment not allowed\", \"severity\": \"LOW\", \"type\": \"Custom Kubernetes Check\", \"description\": \"Deployments are not allowed because of some reasons.\", } __rego_input__ := { \"selector\": [ {\"type\": \"kubernetes\"}, ], } deny[msg] { input.kind == \"Deployment\" msg = sprintf(\"Found deployment '%s' but deployments are not allowed\", [input.metadata.name]) } In this example, ID001 \"Deployment not allowed\" is defined under user.kubernetes.ID001 . If you add a new custom policy, it must be defined under a new package like user.kubernetes.ID002 . Policy structure package (required) MUST follow the Rego's specification MUST be unique per policy SHOULD include policy id for uniqueness MAY include the group name such as kubernetes for clarity Group name has no effect on policy evaluation __rego_metadata__ (optional) SHOULD be defined for clarity since these values will be displayed in the scan results __rego_input__ (optional) MAY be defined when you want to specify input format deny (required) SHOULD be deny or start with deny_ Although warn , warn_* , violation , violation_ also work for compatibility, deny is recommended as severity can be defined in __rego_metadata__ . SHOULD return string Although object with msg field is accepted, other fields are dropped and string is recommended. e.g. {\"msg\": \"deny message\", \"details\": \"something\"} Package A package name must be unique per policy. Example package user.kubernetes.ID001 By default, only appshield.* packages will be evaluated. If you define custom packages, you have to specify the package prefix via --namespaces option. trivy conf --policy /path/to/custom_policies --namespaces user /path/to/config_dir In this case, user.* will be evaluated. Any package prefixes such as main and user are allowed. Metadata Metadata helps enrich Trivy's scan results with useful information. Example __rego_metadata__ := { \"id\": \"ID001\", \"title\": \"Deployment not allowed\", \"severity\": \"LOW\", \"type\": \"Custom Kubernetes Check\", \"description\": \"Deployments are not allowed because of some reasons.\", \"recommended_actions\": \"Remove Deployment\", \"url\": \"https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits\", } All fields under __rego_metadata__ are optional. Field name Allowed values Default value In table In JSON id Any characters N/A title Any characters N/A severity LOW , MEDIUM , HIGH , CRITICAL UNKNOWN type Any characters N/A description Any characters recommended_actions Any characters url Any characters Some fields are displayed in scan results. deployment.yaml ( kubernetes ) ============================ Tests: 28 ( SUCCESSES: 14 , FAILURES: 14 , EXCEPTIONS: 0 ) Failures: 14 ( HIGH: 1 ) +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | Custom Kubernetes Check | ID001 | Deployment not allowed | LOW | Found deployment 'test' but deployments | | | | | | are not allowed | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ Input You can specify input format via __rego_input__ . All fields under __rego_input are optional. Example __rego_input__ := { \"combine\": false, \"selector\": [ {\"type\": \"kubernetes\"}, ], } combine (boolean) The details is here . selector (array) This option filters the input by file formats or configuration languages. In the above example, Trivy passes only Kubernetes files to this policy. Even if Dockerfile exists in the specified directory, it will not be passed to the policy as input. When configuration language such as Kubernetes is not identified, file format such as JSON will be used as type . When configuration language is identified, it will overwrite type . Example pod.yaml including Kubernetes Pod will be handled as kubernetes , not yaml . type is overwritten by kubernetes from yaml . type accepts kubernetes , dockerfile , ansible , cloudformation , json , yaml , toml , or hcl .","title":"Overview"},{"location":"docs/misconfiguration/custom/#custom-policies","text":"","title":"Custom Policies"},{"location":"docs/misconfiguration/custom/#overview","text":"You can write custom policies in Rego . Once you finish writing custom policies, you can pass the directory where those policies are stored with --policy option. trivy conf --policy /path/to/custom_policies --namespaces user /path/to/config_dir As for --namespaces option, the detail is described as below.","title":"Overview"},{"location":"docs/misconfiguration/custom/#file-formats","text":"If a file name matches the following file patterns, Trivy will parse the file and pass it as input to your Rego policy. File format File pattern JSON *.json YAML *.yaml TOML *.toml HCL *.hcl , *.hcl1 , and *.hcl2 Dockerfile Dockerfile , Dockerfile.* , and *.Dockerfile Containerfile Containerfile , Containerfile.* , and *.Containerfile","title":"File formats"},{"location":"docs/misconfiguration/custom/#configuration-languages","text":"In the above general file formats, Trivy automatically identifies the following types of configuration files: Ansible (YAML) CloudFormation (JSON/YAML) Kubernetes (JSON/YAML) This is useful for filtering inputs, as described below. Warning Custom policies do not support Terraform at the moment.","title":"Configuration languages"},{"location":"docs/misconfiguration/custom/#rego-format","text":"A single package must contain only one policy. Example package user.kubernetes.ID001 __rego_metadata__ := { \"id\": \"ID001\", \"title\": \"Deployment not allowed\", \"severity\": \"LOW\", \"type\": \"Custom Kubernetes Check\", \"description\": \"Deployments are not allowed because of some reasons.\", } __rego_input__ := { \"selector\": [ {\"type\": \"kubernetes\"}, ], } deny[msg] { input.kind == \"Deployment\" msg = sprintf(\"Found deployment '%s' but deployments are not allowed\", [input.metadata.name]) } In this example, ID001 \"Deployment not allowed\" is defined under user.kubernetes.ID001 . If you add a new custom policy, it must be defined under a new package like user.kubernetes.ID002 .","title":"Rego format"},{"location":"docs/misconfiguration/custom/#policy-structure","text":"package (required) MUST follow the Rego's specification MUST be unique per policy SHOULD include policy id for uniqueness MAY include the group name such as kubernetes for clarity Group name has no effect on policy evaluation __rego_metadata__ (optional) SHOULD be defined for clarity since these values will be displayed in the scan results __rego_input__ (optional) MAY be defined when you want to specify input format deny (required) SHOULD be deny or start with deny_ Although warn , warn_* , violation , violation_ also work for compatibility, deny is recommended as severity can be defined in __rego_metadata__ . SHOULD return string Although object with msg field is accepted, other fields are dropped and string is recommended. e.g. {\"msg\": \"deny message\", \"details\": \"something\"}","title":"Policy structure"},{"location":"docs/misconfiguration/custom/#package","text":"A package name must be unique per policy. Example package user.kubernetes.ID001 By default, only appshield.* packages will be evaluated. If you define custom packages, you have to specify the package prefix via --namespaces option. trivy conf --policy /path/to/custom_policies --namespaces user /path/to/config_dir In this case, user.* will be evaluated. Any package prefixes such as main and user are allowed.","title":"Package"},{"location":"docs/misconfiguration/custom/#metadata","text":"Metadata helps enrich Trivy's scan results with useful information. Example __rego_metadata__ := { \"id\": \"ID001\", \"title\": \"Deployment not allowed\", \"severity\": \"LOW\", \"type\": \"Custom Kubernetes Check\", \"description\": \"Deployments are not allowed because of some reasons.\", \"recommended_actions\": \"Remove Deployment\", \"url\": \"https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits\", } All fields under __rego_metadata__ are optional. Field name Allowed values Default value In table In JSON id Any characters N/A title Any characters N/A severity LOW , MEDIUM , HIGH , CRITICAL UNKNOWN type Any characters N/A description Any characters recommended_actions Any characters url Any characters Some fields are displayed in scan results. deployment.yaml ( kubernetes ) ============================ Tests: 28 ( SUCCESSES: 14 , FAILURES: 14 , EXCEPTIONS: 0 ) Failures: 14 ( HIGH: 1 ) +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | Custom Kubernetes Check | ID001 | Deployment not allowed | LOW | Found deployment 'test' but deployments | | | | | | are not allowed | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+","title":"Metadata"},{"location":"docs/misconfiguration/custom/#input","text":"You can specify input format via __rego_input__ . All fields under __rego_input are optional. Example __rego_input__ := { \"combine\": false, \"selector\": [ {\"type\": \"kubernetes\"}, ], } combine (boolean) The details is here . selector (array) This option filters the input by file formats or configuration languages. In the above example, Trivy passes only Kubernetes files to this policy. Even if Dockerfile exists in the specified directory, it will not be passed to the policy as input. When configuration language such as Kubernetes is not identified, file format such as JSON will be used as type . When configuration language is identified, it will overwrite type . Example pod.yaml including Kubernetes Pod will be handled as kubernetes , not yaml . type is overwritten by kubernetes from yaml . type accepts kubernetes , dockerfile , ansible , cloudformation , json , yaml , toml , or hcl .","title":"Input"},{"location":"docs/misconfiguration/custom/combine/","text":"Combined input Overview Trivy usually scans each configuration file individually. Sometimes it might be useful to compare values from different configuration files simultaneously. When combine is set to true, all config files under the specified directory are combined into one input data structure. Example __rego_input__ := { \"combine\": false, } In \"combine\" mode, the input document becomes an array, where each element is an object with two fields: \"path\": \"path/to/file\" : the relative file path of the respective file \"contents\": ... : the parsed content of the respective file Now you can ensure that duplicate values match across the entirety of your configuration files. Return value In \"combine\" mode, the deny entrypoint must return an object with two keys filepath (required) the relative file path of the file being evaluated msg (required) the message describing an issue Example deny[res] { resource := input[i].contents ... some logic ... res := { \"filepath\": input[i].path, \"msg\": \"something bad\", } }","title":"Combine"},{"location":"docs/misconfiguration/custom/combine/#combined-input","text":"","title":"Combined input"},{"location":"docs/misconfiguration/custom/combine/#overview","text":"Trivy usually scans each configuration file individually. Sometimes it might be useful to compare values from different configuration files simultaneously. When combine is set to true, all config files under the specified directory are combined into one input data structure. Example __rego_input__ := { \"combine\": false, } In \"combine\" mode, the input document becomes an array, where each element is an object with two fields: \"path\": \"path/to/file\" : the relative file path of the respective file \"contents\": ... : the parsed content of the respective file Now you can ensure that duplicate values match across the entirety of your configuration files.","title":"Overview"},{"location":"docs/misconfiguration/custom/combine/#return-value","text":"In \"combine\" mode, the deny entrypoint must return an object with two keys filepath (required) the relative file path of the file being evaluated msg (required) the message describing an issue Example deny[res] { resource := input[i].contents ... some logic ... res := { \"filepath\": input[i].path, \"msg\": \"something bad\", } }","title":"Return value"},{"location":"docs/misconfiguration/custom/data/","text":"Custom Data Custom policies may require additional data in order to determine an answer. For example, an allowed list of resources that can be created. Instead of hardcoding this information inside of your policy, Trivy allows passing paths to data files with the --data flag. Given the following yaml file: $ cd examples/misconf/custom-data $ cat data/ports.yaml [ ~/src/github.com/aquasecurity/trivy/examples/misconf/custom-data ] services: ports: - \"20\" - \"20/tcp\" - \"20/udp\" - \"23\" - \"23/tcp\" This can be imported into your policy: import data.services ports := services.ports Then, you need to pass data paths through --data option. Trivy recursively searches the specified paths for JSON ( *.json ) and YAML ( *.yaml ) files. $ trivy conf --policy ./policy --data data --namespaces user ./configs","title":"Data"},{"location":"docs/misconfiguration/custom/data/#custom-data","text":"Custom policies may require additional data in order to determine an answer. For example, an allowed list of resources that can be created. Instead of hardcoding this information inside of your policy, Trivy allows passing paths to data files with the --data flag. Given the following yaml file: $ cd examples/misconf/custom-data $ cat data/ports.yaml [ ~/src/github.com/aquasecurity/trivy/examples/misconf/custom-data ] services: ports: - \"20\" - \"20/tcp\" - \"20/udp\" - \"23\" - \"23/tcp\" This can be imported into your policy: import data.services ports := services.ports Then, you need to pass data paths through --data option. Trivy recursively searches the specified paths for JSON ( *.json ) and YAML ( *.yaml ) files. $ trivy conf --policy ./policy --data data --namespaces user ./configs","title":"Custom Data"},{"location":"docs/misconfiguration/custom/debug/","text":"Debugging policies When working on more complex queries (or when learning Rego), it's useful to see exactly how the policy is applied. For this purpose you can use the --trace flag. This will output a large trace from Open Policy Agent like the following: Tip Only failed policies show traces. If you want to debug a passed policy, you need to make it fail on purpose. $ trivy conf --trace configs/ 2021 -07-11T16:45:58.493+0300 INFO Detected config files: 1 Dockerfile ( dockerfile ) ======================= Tests: 23 ( SUCCESSES: 22 , FAILURES: 1 , EXCEPTIONS: 0 ) Failures: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ ID: DS002 File: Dockerfile Namespace: appshield.dockerfile.DS002 Query: data.appshield.dockerfile.DS002.deny Message: Last USER command in Dockerfile should not be 'root' TRACE Enter data.appshield.dockerfile.DS002.deny = _ TRACE | Eval data.appshield.dockerfile.DS002.deny = _ TRACE | Index data.appshield.dockerfile.DS002.deny matched 2 rules ) TRACE | Enter data.appshield.dockerfile.DS002.deny TRACE | | Eval data.appshield.dockerfile.DS002.fail_user_count TRACE | | Index data.appshield.dockerfile.DS002.fail_user_count ( matched 1 rule ) TRACE | | Enter data.appshield.dockerfile.DS002.fail_user_count TRACE | | | Eval __local559__ = data.appshield.dockerfile.DS002.get_user TRACE | | | Index data.appshield.dockerfile.DS002.get_user ( matched 1 rule ) TRACE | | | Enter data.appshield.dockerfile.DS002.get_user TRACE | | | | Eval user = data.lib.docker.user [ _ ] TRACE | | | | Index data.lib.docker.user ( matched 1 rule ) TRACE | | | | Enter data.lib.docker.user TRACE | | | | | Eval instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | Eval count ( __local559__, __local391__ ) TRACE | | | Eval lt ( __local391__, 1 ) TRACE | | | Fail lt ( __local391__, 1 ) TRACE | | | Redo count ( __local559__, __local391__ ) TRACE | | | Redo __local559__ = data.appshield.dockerfile.DS002.get_user TRACE | | Fail data.appshield.dockerfile.DS002.fail_user_count TRACE | Enter data.appshield.dockerfile.DS002.deny TRACE | | Eval data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | Index data.appshield.dockerfile.DS002.fail_last_user_root ( matched 1 rule ) TRACE | | Enter data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | | Eval __local560__ = data.appshield.dockerfile.DS002.get_user TRACE | | | Index data.appshield.dockerfile.DS002.get_user ( matched 1 rule ) TRACE | | | Enter data.appshield.dockerfile.DS002.get_user TRACE | | | | Eval user = data.lib.docker.user [ _ ] TRACE | | | | Index data.lib.docker.user ( matched 1 rule ) TRACE | | | | Enter data.lib.docker.user TRACE | | | | | Eval instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | Eval cast_array ( __local560__, __local392__ ) TRACE | | | Eval user = __local392__ TRACE | | | Eval __local561__ = data.appshield.dockerfile.DS002.get_user TRACE | | | Index data.appshield.dockerfile.DS002.get_user ( matched 1 rule ) TRACE | | | Enter data.appshield.dockerfile.DS002.get_user TRACE | | | | Eval user = data.lib.docker.user [ _ ] TRACE | | | | Index data.lib.docker.user ( matched 1 rule ) TRACE | | | | Enter data.lib.docker.user TRACE | | | | | Eval instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | Eval count ( __local561__, __local393__ ) TRACE | | | Eval len = __local393__ TRACE | | | Eval minus ( len, 1 , __local394__ ) TRACE | | | Eval user [ __local394__ ] = \"root\" TRACE | | | Exit data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | Eval res = \"Last USER command in Dockerfile should not be 'root'\" TRACE | | Exit data.appshield.dockerfile.DS002.deny TRACE | Redo data.appshield.dockerfile.DS002.deny TRACE | | Redo res = \"Last USER command in Dockerfile should not be 'root'\" TRACE | | Redo data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | Redo data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | | Redo user [ __local394__ ] = \"root\" TRACE | | | Redo minus ( len, 1 , __local394__ ) TRACE | | | Redo len = __local393__ TRACE | | | Redo count ( __local561__, __local393__ ) TRACE | | | Redo __local561__ = data.appshield.dockerfile.DS002.get_user TRACE | | | Redo user = __local392__ TRACE | | | Redo cast_array ( __local560__, __local392__ ) TRACE | | | Redo __local560__ = data.appshield.dockerfile.DS002.get_user TRACE | Exit data.appshield.dockerfile.DS002.deny = _ TRACE Redo data.appshield.dockerfile.DS002.deny = _ TRACE | Redo data.appshield.dockerfile.DS002.deny = _","title":"Debugging Policies"},{"location":"docs/misconfiguration/custom/debug/#debugging-policies","text":"When working on more complex queries (or when learning Rego), it's useful to see exactly how the policy is applied. For this purpose you can use the --trace flag. This will output a large trace from Open Policy Agent like the following: Tip Only failed policies show traces. If you want to debug a passed policy, you need to make it fail on purpose. $ trivy conf --trace configs/ 2021 -07-11T16:45:58.493+0300 INFO Detected config files: 1 Dockerfile ( dockerfile ) ======================= Tests: 23 ( SUCCESSES: 22 , FAILURES: 1 , EXCEPTIONS: 0 ) Failures: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ ID: DS002 File: Dockerfile Namespace: appshield.dockerfile.DS002 Query: data.appshield.dockerfile.DS002.deny Message: Last USER command in Dockerfile should not be 'root' TRACE Enter data.appshield.dockerfile.DS002.deny = _ TRACE | Eval data.appshield.dockerfile.DS002.deny = _ TRACE | Index data.appshield.dockerfile.DS002.deny matched 2 rules ) TRACE | Enter data.appshield.dockerfile.DS002.deny TRACE | | Eval data.appshield.dockerfile.DS002.fail_user_count TRACE | | Index data.appshield.dockerfile.DS002.fail_user_count ( matched 1 rule ) TRACE | | Enter data.appshield.dockerfile.DS002.fail_user_count TRACE | | | Eval __local559__ = data.appshield.dockerfile.DS002.get_user TRACE | | | Index data.appshield.dockerfile.DS002.get_user ( matched 1 rule ) TRACE | | | Enter data.appshield.dockerfile.DS002.get_user TRACE | | | | Eval user = data.lib.docker.user [ _ ] TRACE | | | | Index data.lib.docker.user ( matched 1 rule ) TRACE | | | | Enter data.lib.docker.user TRACE | | | | | Eval instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | Eval count ( __local559__, __local391__ ) TRACE | | | Eval lt ( __local391__, 1 ) TRACE | | | Fail lt ( __local391__, 1 ) TRACE | | | Redo count ( __local559__, __local391__ ) TRACE | | | Redo __local559__ = data.appshield.dockerfile.DS002.get_user TRACE | | Fail data.appshield.dockerfile.DS002.fail_user_count TRACE | Enter data.appshield.dockerfile.DS002.deny TRACE | | Eval data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | Index data.appshield.dockerfile.DS002.fail_last_user_root ( matched 1 rule ) TRACE | | Enter data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | | Eval __local560__ = data.appshield.dockerfile.DS002.get_user TRACE | | | Index data.appshield.dockerfile.DS002.get_user ( matched 1 rule ) TRACE | | | Enter data.appshield.dockerfile.DS002.get_user TRACE | | | | Eval user = data.lib.docker.user [ _ ] TRACE | | | | Index data.lib.docker.user ( matched 1 rule ) TRACE | | | | Enter data.lib.docker.user TRACE | | | | | Eval instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | Eval cast_array ( __local560__, __local392__ ) TRACE | | | Eval user = __local392__ TRACE | | | Eval __local561__ = data.appshield.dockerfile.DS002.get_user TRACE | | | Index data.appshield.dockerfile.DS002.get_user ( matched 1 rule ) TRACE | | | Enter data.appshield.dockerfile.DS002.get_user TRACE | | | | Eval user = data.lib.docker.user [ _ ] TRACE | | | | Index data.lib.docker.user ( matched 1 rule ) TRACE | | | | Enter data.lib.docker.user TRACE | | | | | Eval instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Exit data.lib.docker.user TRACE | | | | Eval username = user.Value [ _ ] TRACE | | | | Exit data.appshield.dockerfile.DS002.get_user TRACE | | | Redo data.appshield.dockerfile.DS002.get_user TRACE | | | | Redo username = user.Value [ _ ] TRACE | | | | Redo user = data.lib.docker.user [ _ ] TRACE | | | | Redo data.lib.docker.user TRACE | | | | | Redo instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | | | Eval instruction.Cmd = \"user\" TRACE | | | | | Fail instruction.Cmd = \"user\" TRACE | | | | | Redo instruction = input.stages [ _ ][ _ ] TRACE | | | Eval count ( __local561__, __local393__ ) TRACE | | | Eval len = __local393__ TRACE | | | Eval minus ( len, 1 , __local394__ ) TRACE | | | Eval user [ __local394__ ] = \"root\" TRACE | | | Exit data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | Eval res = \"Last USER command in Dockerfile should not be 'root'\" TRACE | | Exit data.appshield.dockerfile.DS002.deny TRACE | Redo data.appshield.dockerfile.DS002.deny TRACE | | Redo res = \"Last USER command in Dockerfile should not be 'root'\" TRACE | | Redo data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | Redo data.appshield.dockerfile.DS002.fail_last_user_root TRACE | | | Redo user [ __local394__ ] = \"root\" TRACE | | | Redo minus ( len, 1 , __local394__ ) TRACE | | | Redo len = __local393__ TRACE | | | Redo count ( __local561__, __local393__ ) TRACE | | | Redo __local561__ = data.appshield.dockerfile.DS002.get_user TRACE | | | Redo user = __local392__ TRACE | | | Redo cast_array ( __local560__, __local392__ ) TRACE | | | Redo __local560__ = data.appshield.dockerfile.DS002.get_user TRACE | Exit data.appshield.dockerfile.DS002.deny = _ TRACE Redo data.appshield.dockerfile.DS002.deny = _ TRACE | Redo data.appshield.dockerfile.DS002.deny = _","title":"Debugging policies"},{"location":"docs/misconfiguration/custom/examples/","text":"Examples Custom Policy Kubernetes See here . The custom policy is defined in user.kubernetes.ID001 package. You need to pass the package prefix you want to evaluate through --namespaces option. In this case, the package prefix should be user , user.kuberntes , or user.kubernetes.ID001 . Dockerfile See here . The input will be a dictionary of stages. Single Stage Example Dockerfile FROM foo COPY . / RUN echo hello Rego Input { \"stages\" : { \"foo\" : [ { \"Cmd\" : \"from\" , \"EndLine\" : 1 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"FROM foo\" , \"Stage\" : 0 , \"StartLine\" : 1 , \"SubCmd\" : \"\" , \"Value\" : [ \"foo\" ] }, { \"Cmd\" : \"copy\" , \"EndLine\" : 2 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"COPY . /\" , \"Stage\" : 0 , \"StartLine\" : 2 , \"SubCmd\" : \"\" , \"Value\" : [ \".\" , \"/\" ] }, { \"Cmd\" : \"run\" , \"EndLine\" : 3 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"RUN echo hello\" , \"Stage\" : 0 , \"StartLine\" : 3 , \"SubCmd\" : \"\" , \"Value\" : [ \"echo hello\" ] } ] } } Multi Stage Example Dockerfile FROM golang:1.16 AS builder WORKDIR /go/src/github.com/alexellis/href-counter/ RUN go get -d -v golang.org/x/net/html COPY app.go . RUN CGO_ENABLED = 0 GOOS = linux go build -a -installsuffix cgo -o app . FROM alpine:latest RUN apk --no-cache add ca-certificates \\ && apk add --no-cache bash WORKDIR /root/ COPY --from = builder /go/src/github.com/alexellis/href-counter/app . CMD [ \"./app\" ] Rego Input { \"stages\" : { \"alpine:latest\" : [ { \"Cmd\" : \"from\" , \"EndLine\" : 7 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"FROM alpine:latest\" , \"Stage\" : 1 , \"StartLine\" : 7 , \"SubCmd\" : \"\" , \"Value\" : [ \"alpine:latest\" ] }, { \"Cmd\" : \"run\" , \"EndLine\" : 9 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"RUN apk --no-cache add ca-certificates \\u0026\\u0026 apk add --no-cache bash\" , \"Stage\" : 1 , \"StartLine\" : 8 , \"SubCmd\" : \"\" , \"Value\" : [ \"apk --no-cache add ca-certificates \\u0026\\u0026 apk add --no-cache bash\" ] }, { \"Cmd\" : \"workdir\" , \"EndLine\" : 10 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"WORKDIR /root/\" , \"Stage\" : 1 , \"StartLine\" : 10 , \"SubCmd\" : \"\" , \"Value\" : [ \"/root/\" ] }, { \"Cmd\" : \"copy\" , \"EndLine\" : 11 , \"Flags\" : [ \"--from=builder\" ], \"JSON\" : false , \"Original\" : \"COPY --from=builder /go/src/github.com/alexellis/href-counter/app .\" , \"Stage\" : 1 , \"StartLine\" : 11 , \"SubCmd\" : \"\" , \"Value\" : [ \"/go/src/github.com/alexellis/href-counter/app\" , \".\" ] }, { \"Cmd\" : \"cmd\" , \"EndLine\" : 12 , \"Flags\" : [], \"JSON\" : true , \"Original\" : \"CMD [\\\"./app\\\"]\" , \"Stage\" : 1 , \"StartLine\" : 12 , \"SubCmd\" : \"\" , \"Value\" : [ \"./app\" ] } ], \"golang:1.16 AS builder\" : [ { \"Cmd\" : \"from\" , \"EndLine\" : 1 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"FROM golang:1.16 AS builder\" , \"Stage\" : 0 , \"StartLine\" : 1 , \"SubCmd\" : \"\" , \"Value\" : [ \"golang:1.16\" , \"AS\" , \"builder\" ] }, { \"Cmd\" : \"workdir\" , \"EndLine\" : 2 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"WORKDIR /go/src/github.com/alexellis/href-counter/\" , \"Stage\" : 0 , \"StartLine\" : 2 , \"SubCmd\" : \"\" , \"Value\" : [ \"/go/src/github.com/alexellis/href-counter/\" ] }, { \"Cmd\" : \"run\" , \"EndLine\" : 3 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"RUN go get -d -v golang.org/x/net/html\" , \"Stage\" : 0 , \"StartLine\" : 3 , \"SubCmd\" : \"\" , \"Value\" : [ \"go get -d -v golang.org/x/net/html\" ] }, { \"Cmd\" : \"copy\" , \"EndLine\" : 4 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"COPY app.go .\" , \"Stage\" : 0 , \"StartLine\" : 4 , \"SubCmd\" : \"\" , \"Value\" : [ \"app.go\" , \".\" ] }, { \"Cmd\" : \"run\" , \"EndLine\" : 5 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .\" , \"Stage\" : 0 , \"StartLine\" : 5 , \"SubCmd\" : \"\" , \"Value\" : [ \"CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .\" ] } ] } } Docker Compose See here . Docker Compose uses YAML format for configurations. You can apply your Rego policies to docker-compose.yml . HCL See here . Trivy parses HCL files and converts into structured data. Warning Terraform HCL files are not supported yet. Terraform Plan See here . Use the command terraform show to convert the Terraform plan into JSON so that OPA can read the plan. $ terraform init $ terraform plan --out tfplan.binary $ terraform show -json tfplan.binary > tfplan.json For more details, see also OPA document . Serverless Framework See here . Server Framework uses YAML format for configurations. You can apply your Rego policies to serverless.yaml . Custom Data See here . Combined Input See here . Go Testing See here .","title":"Examples"},{"location":"docs/misconfiguration/custom/examples/#examples","text":"","title":"Examples"},{"location":"docs/misconfiguration/custom/examples/#custom-policy","text":"","title":"Custom Policy"},{"location":"docs/misconfiguration/custom/examples/#kubernetes","text":"See here . The custom policy is defined in user.kubernetes.ID001 package. You need to pass the package prefix you want to evaluate through --namespaces option. In this case, the package prefix should be user , user.kuberntes , or user.kubernetes.ID001 .","title":"Kubernetes"},{"location":"docs/misconfiguration/custom/examples/#dockerfile","text":"See here . The input will be a dictionary of stages.","title":"Dockerfile"},{"location":"docs/misconfiguration/custom/examples/#single-stage","text":"Example Dockerfile FROM foo COPY . / RUN echo hello Rego Input { \"stages\" : { \"foo\" : [ { \"Cmd\" : \"from\" , \"EndLine\" : 1 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"FROM foo\" , \"Stage\" : 0 , \"StartLine\" : 1 , \"SubCmd\" : \"\" , \"Value\" : [ \"foo\" ] }, { \"Cmd\" : \"copy\" , \"EndLine\" : 2 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"COPY . /\" , \"Stage\" : 0 , \"StartLine\" : 2 , \"SubCmd\" : \"\" , \"Value\" : [ \".\" , \"/\" ] }, { \"Cmd\" : \"run\" , \"EndLine\" : 3 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"RUN echo hello\" , \"Stage\" : 0 , \"StartLine\" : 3 , \"SubCmd\" : \"\" , \"Value\" : [ \"echo hello\" ] } ] } }","title":"Single Stage"},{"location":"docs/misconfiguration/custom/examples/#multi-stage","text":"Example Dockerfile FROM golang:1.16 AS builder WORKDIR /go/src/github.com/alexellis/href-counter/ RUN go get -d -v golang.org/x/net/html COPY app.go . RUN CGO_ENABLED = 0 GOOS = linux go build -a -installsuffix cgo -o app . FROM alpine:latest RUN apk --no-cache add ca-certificates \\ && apk add --no-cache bash WORKDIR /root/ COPY --from = builder /go/src/github.com/alexellis/href-counter/app . CMD [ \"./app\" ] Rego Input { \"stages\" : { \"alpine:latest\" : [ { \"Cmd\" : \"from\" , \"EndLine\" : 7 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"FROM alpine:latest\" , \"Stage\" : 1 , \"StartLine\" : 7 , \"SubCmd\" : \"\" , \"Value\" : [ \"alpine:latest\" ] }, { \"Cmd\" : \"run\" , \"EndLine\" : 9 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"RUN apk --no-cache add ca-certificates \\u0026\\u0026 apk add --no-cache bash\" , \"Stage\" : 1 , \"StartLine\" : 8 , \"SubCmd\" : \"\" , \"Value\" : [ \"apk --no-cache add ca-certificates \\u0026\\u0026 apk add --no-cache bash\" ] }, { \"Cmd\" : \"workdir\" , \"EndLine\" : 10 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"WORKDIR /root/\" , \"Stage\" : 1 , \"StartLine\" : 10 , \"SubCmd\" : \"\" , \"Value\" : [ \"/root/\" ] }, { \"Cmd\" : \"copy\" , \"EndLine\" : 11 , \"Flags\" : [ \"--from=builder\" ], \"JSON\" : false , \"Original\" : \"COPY --from=builder /go/src/github.com/alexellis/href-counter/app .\" , \"Stage\" : 1 , \"StartLine\" : 11 , \"SubCmd\" : \"\" , \"Value\" : [ \"/go/src/github.com/alexellis/href-counter/app\" , \".\" ] }, { \"Cmd\" : \"cmd\" , \"EndLine\" : 12 , \"Flags\" : [], \"JSON\" : true , \"Original\" : \"CMD [\\\"./app\\\"]\" , \"Stage\" : 1 , \"StartLine\" : 12 , \"SubCmd\" : \"\" , \"Value\" : [ \"./app\" ] } ], \"golang:1.16 AS builder\" : [ { \"Cmd\" : \"from\" , \"EndLine\" : 1 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"FROM golang:1.16 AS builder\" , \"Stage\" : 0 , \"StartLine\" : 1 , \"SubCmd\" : \"\" , \"Value\" : [ \"golang:1.16\" , \"AS\" , \"builder\" ] }, { \"Cmd\" : \"workdir\" , \"EndLine\" : 2 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"WORKDIR /go/src/github.com/alexellis/href-counter/\" , \"Stage\" : 0 , \"StartLine\" : 2 , \"SubCmd\" : \"\" , \"Value\" : [ \"/go/src/github.com/alexellis/href-counter/\" ] }, { \"Cmd\" : \"run\" , \"EndLine\" : 3 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"RUN go get -d -v golang.org/x/net/html\" , \"Stage\" : 0 , \"StartLine\" : 3 , \"SubCmd\" : \"\" , \"Value\" : [ \"go get -d -v golang.org/x/net/html\" ] }, { \"Cmd\" : \"copy\" , \"EndLine\" : 4 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"COPY app.go .\" , \"Stage\" : 0 , \"StartLine\" : 4 , \"SubCmd\" : \"\" , \"Value\" : [ \"app.go\" , \".\" ] }, { \"Cmd\" : \"run\" , \"EndLine\" : 5 , \"Flags\" : [], \"JSON\" : false , \"Original\" : \"RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .\" , \"Stage\" : 0 , \"StartLine\" : 5 , \"SubCmd\" : \"\" , \"Value\" : [ \"CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .\" ] } ] } }","title":"Multi Stage"},{"location":"docs/misconfiguration/custom/examples/#docker-compose","text":"See here . Docker Compose uses YAML format for configurations. You can apply your Rego policies to docker-compose.yml .","title":"Docker Compose"},{"location":"docs/misconfiguration/custom/examples/#hcl","text":"See here . Trivy parses HCL files and converts into structured data. Warning Terraform HCL files are not supported yet.","title":"HCL"},{"location":"docs/misconfiguration/custom/examples/#terraform-plan","text":"See here . Use the command terraform show to convert the Terraform plan into JSON so that OPA can read the plan. $ terraform init $ terraform plan --out tfplan.binary $ terraform show -json tfplan.binary > tfplan.json For more details, see also OPA document .","title":"Terraform Plan"},{"location":"docs/misconfiguration/custom/examples/#serverless-framework","text":"See here . Server Framework uses YAML format for configurations. You can apply your Rego policies to serverless.yaml .","title":"Serverless Framework"},{"location":"docs/misconfiguration/custom/examples/#custom-data","text":"See here .","title":"Custom Data"},{"location":"docs/misconfiguration/custom/examples/#combined-input","text":"See here .","title":"Combined Input"},{"location":"docs/misconfiguration/custom/examples/#go-testing","text":"See here .","title":"Go Testing"},{"location":"docs/misconfiguration/custom/testing/","text":"Testing It is highly recommended to write tests for your custom policies. Rego testing To help you verify the correctness of your custom policies, OPA gives you a framework that you can use to write tests for your policies. By writing tests for your custom policies you can speed up the development process of new rules and reduce the amount of time it takes to modify rules as requirements evolve. For more details, see Policy Testing . Example package user.dockerfile.ID002 test_add_denied { r := deny with input as {\"stages\": {\"alpine:3.13\": [ {\"Cmd\": \"add\", \"Value\": [\"/target/resources.tar.gz\", \"resources.jar\"]}, {\"Cmd\": \"add\", \"Value\": [\"/target/app.jar\", \"app.jar\"]}, ]}} count(r) == 1 r[_] == \"Consider using 'COPY /target/app.jar app.jar' command instead of 'ADD /target/app.jar app.jar'\" } To write tests for custom policies, you can refer to existing tests under AppShield . Go testing Fanal which is a core library of Trivy can be imported as a Go library. You can scan config files in Go and test your custom policies using Go's testing methods, such as table-driven tests . This allows you to use the actual configuration file as input, making it easy to prepare test data and ensure that your custom policies work in practice. In particular, Dockerfile and HCL need to be converted to structural data as input, which may be different from the expected input format. Tip We recommend writing OPA and Go tests both since they have different roles, like unit tests and integration tests. The following example stores allowed and denied configuration files in a directory. Successes contains the result of successes, and Failures contains the result of failures. { name : \"disallowed ports\" , input : \"configs/\" , fields : fields { policyPaths : [] string { \"policy\" }, dataPaths : [] string { \"data\" }, namespaces : [] string { \"user\" }, }, want : [] types . Misconfiguration { { FileType : types . Dockerfile , FilePath : \"Dockerfile.allowed\" , Successes : types . MisconfResults { { Namespace : \"user.dockerfile.ID002\" , PolicyMetadata : types . PolicyMetadata { ID : \"ID002\" , Type : \"Docker Custom Check\" , Title : \"Disallowed ports exposed\" , Severity : \"HIGH\" , }, }, }, }, { FileType : types . Dockerfile , FilePath : \"Dockerfile.denied\" , Failures : types . MisconfResults { { Namespace : \"user.dockerfile.ID002\" , Message : \"Port 23 should not be exposed\" , PolicyMetadata : types . PolicyMetadata { ID : \"ID002\" , Type : \"Docker Custom Check\" , Title : \"Disallowed ports exposed\" , Severity : \"HIGH\" , }, }, }, }, }, }, Dockerfile.allowed has one successful result in Successes , while Dockerfile.denied has one failure result in Failures .","title":"Testing"},{"location":"docs/misconfiguration/custom/testing/#testing","text":"It is highly recommended to write tests for your custom policies.","title":"Testing"},{"location":"docs/misconfiguration/custom/testing/#rego-testing","text":"To help you verify the correctness of your custom policies, OPA gives you a framework that you can use to write tests for your policies. By writing tests for your custom policies you can speed up the development process of new rules and reduce the amount of time it takes to modify rules as requirements evolve. For more details, see Policy Testing . Example package user.dockerfile.ID002 test_add_denied { r := deny with input as {\"stages\": {\"alpine:3.13\": [ {\"Cmd\": \"add\", \"Value\": [\"/target/resources.tar.gz\", \"resources.jar\"]}, {\"Cmd\": \"add\", \"Value\": [\"/target/app.jar\", \"app.jar\"]}, ]}} count(r) == 1 r[_] == \"Consider using 'COPY /target/app.jar app.jar' command instead of 'ADD /target/app.jar app.jar'\" } To write tests for custom policies, you can refer to existing tests under AppShield .","title":"Rego testing"},{"location":"docs/misconfiguration/custom/testing/#go-testing","text":"Fanal which is a core library of Trivy can be imported as a Go library. You can scan config files in Go and test your custom policies using Go's testing methods, such as table-driven tests . This allows you to use the actual configuration file as input, making it easy to prepare test data and ensure that your custom policies work in practice. In particular, Dockerfile and HCL need to be converted to structural data as input, which may be different from the expected input format. Tip We recommend writing OPA and Go tests both since they have different roles, like unit tests and integration tests. The following example stores allowed and denied configuration files in a directory. Successes contains the result of successes, and Failures contains the result of failures. { name : \"disallowed ports\" , input : \"configs/\" , fields : fields { policyPaths : [] string { \"policy\" }, dataPaths : [] string { \"data\" }, namespaces : [] string { \"user\" }, }, want : [] types . Misconfiguration { { FileType : types . Dockerfile , FilePath : \"Dockerfile.allowed\" , Successes : types . MisconfResults { { Namespace : \"user.dockerfile.ID002\" , PolicyMetadata : types . PolicyMetadata { ID : \"ID002\" , Type : \"Docker Custom Check\" , Title : \"Disallowed ports exposed\" , Severity : \"HIGH\" , }, }, }, }, { FileType : types . Dockerfile , FilePath : \"Dockerfile.denied\" , Failures : types . MisconfResults { { Namespace : \"user.dockerfile.ID002\" , Message : \"Port 23 should not be exposed\" , PolicyMetadata : types . PolicyMetadata { ID : \"ID002\" , Type : \"Docker Custom Check\" , Title : \"Disallowed ports exposed\" , Severity : \"HIGH\" , }, }, }, }, }, }, Dockerfile.allowed has one successful result in Successes , while Dockerfile.denied has one failure result in Failures .","title":"Go testing"},{"location":"docs/misconfiguration/options/filter/","text":"Filter Misconfigurations By Severity Use --severity option. trivy conf --severity HIGH,CRITICAL examples/misconf/mixed Result 2021 -07-10T17:37:13.267+0300 INFO Detected config files: 4 configs/Dockerfile ( dockerfile ) =============================== Tests: 23 ( SUCCESSES: 21 , FAILURES: 2 , EXCEPTIONS: 0 ) Failures: 2 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Specify at least 1 USER | | | | | | command in Dockerfile with | | | | | | non-root user as argument | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ configs/deployment.yaml ( kubernetes ) ==================================== Tests: 28 ( SUCCESSES: 14 , FAILURES: 14 , EXCEPTIONS: 0 ) Failures: 14 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | Kubernetes Security Check | KSV006 | docker.sock is mounted to container | HIGH | Deployment 'hello-kubernetes' should | | | | | | not specify '/var/run/docker.socker' in | | | | | | 'spec.template.volumes.hostPath.path' | | | | | | -->avd.aquasec.com/appshield/ksv006 | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ configs/main.tf ( terraform ) =========================== Tests: 19 ( SUCCESSES: 11 , FAILURES: 8 , EXCEPTIONS: 0 ) Failures: 8 ( HIGH: 6 , CRITICAL: 1 ) +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ | Terraform Security Check powered by | AWS003 | AWS Classic resource usage. | HIGH | Resource | | tfsec | | | | 'aws_db_security_group.my-group' | | | | | | uses EC2 Classic. Use a VPC instead. | | | | | | -->tfsec.dev/docs/aws/AWS003/ | + +------------+------------------------------------------+----------+--------------------------------------------------------+ | | AWS004 | Use of plain HTTP. | CRITICAL | Resource | | | | | | 'aws_alb_listener.my-alb-listener' | | | | | | uses plain HTTP instead of HTTPS. | | | | | | -->tfsec.dev/docs/aws/AWS004/ | + +------------+------------------------------------------+----------+--------------------------------------------------------+ | | AWS018 | Missing description for security | HIGH | Resource | | | | group/security group rule. | | 'aws_security_group_rule.my-rule' should | | | | | | include a description for auditing | | | | | | purposes. -->tfsec.dev/docs/aws/AWS018/ | + +------------+------------------------------------------+ +--------------------------------------------------------+ | | AWS025 | API Gateway domain name uses outdated | | Resource | | | | SSL/TLS protocols. | | 'aws_api_gateway_domain_name.empty_security_policy' | | | | | | defines outdated SSL/TLS policies ( not using | | | | | | TLS_1_2 ) . -->tfsec.dev/docs/aws/AWS025/ | + + + + +--------------------------------------------------------+ | | | | | Resource | | | | | | 'aws_api_gateway_domain_name.missing_security_policy' | | | | | | should include security_policy ( defaults to outdated | | | | | | SSL/TLS policy ) . -->tfsec.dev/docs/aws/AWS025/ | + + + + +--------------------------------------------------------+ | | | | | Resource | | | | | | 'aws_api_gateway_domain_name.outdated_security_policy' | | | | | | defines outdated SSL/TLS policies ( not using TLS_1_2 ) . | | | | | | -->tfsec.dev/docs/aws/AWS025/ | + +------------+------------------------------------------+ +--------------------------------------------------------+ | | AZU003 | Unencrypted managed disk. | | Resource 'azurerm_managed_disk.source' | | | | | | defines an unencrypted managed disk. | | | | | | -->tfsec.dev/docs/azure/AZU003/ | +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ configs/variables.tf ( terraform ) ================================ Tests: 1 ( SUCCESSES: 1 , FAILURES: 0 , EXCEPTIONS: 0 ) Failures: 0 ( HIGH: 0 , CRITICAL: 0 ) By Misconfiguration IDs Use .trivyignore . $ cat .trivyignore # Accept the risk AWS003 AWS018 AWS025 $ trivy conf --severity HIGH,CRITICAL examples/misconf/mixed Result 2021 -07-10T17:38:51.306+0300 INFO Detected config files: 4 configs/Dockerfile ( dockerfile ) =============================== Tests: 23 ( SUCCESSES: 21 , FAILURES: 2 , EXCEPTIONS: 0 ) Failures: 2 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Specify at least 1 USER | | | | | | command in Dockerfile with | | | | | | non-root user as argument | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ configs/deployment.yaml ( kubernetes ) ==================================== Tests: 28 ( SUCCESSES: 14 , FAILURES: 14 , EXCEPTIONS: 0 ) Failures: 14 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | Kubernetes Security Check | KSV006 | docker.sock is mounted to container | HIGH | Deployment 'hello-kubernetes' should | | | | | | not specify '/var/run/docker.socker' in | | | | | | 'spec.template.volumes.hostPath.path' | | | | | | -->avd.aquasec.com/appshield/ksv006 | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ configs/main.tf ( terraform ) =========================== Tests: 19 ( SUCCESSES: 11 , FAILURES: 8 , EXCEPTIONS: 0 ) Failures: 8 ( HIGH: 1 , CRITICAL: 1 ) +------------------------------------------+------------+---------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +------------------------------------------+------------+---------------------------+----------+------------------------------------------+ | Terraform Security Check powered by | AWS004 | Use of plain HTTP. | CRITICAL | Resource | | tfsec | | | | 'aws_alb_listener.my-alb-listener' | | | | | | uses plain HTTP instead of HTTPS. | | | | | | -->tfsec.dev/docs/aws/AWS004/ | + +------------+---------------------------+----------+------------------------------------------+ | | AZU003 | Unencrypted managed disk. | HIGH | Resource 'azurerm_managed_disk.source' | | | | | | defines an unencrypted managed disk. | | | | | | -->tfsec.dev/docs/azure/AZU003/ | +------------------------------------------+------------+---------------------------+----------+------------------------------------------+ configs/variables.tf ( terraform ) ================================ Tests: 1 ( SUCCESSES: 1 , FAILURES: 0 , EXCEPTIONS: 0 ) Failures: 0 ( HIGH: 0 , CRITICAL: 0 ) By Exceptions See Exceptions Show Successes and Exceptions Use --include-non-failures option to show successes and exceptions as well as failures. trivy conf --severity CRITICAL --include-non-failures examples/misconf/mixed Result 2021-07-10T17:44:02.049+0300 INFO Detected config files: 4 configs/Dockerfile (dockerfile) =============================== Tests: 23 (SUCCESSES: 21, FAILURES: 2, EXCEPTIONS: 0) Failures: 2 (CRITICAL: 0) +---------------------------+------------+------------------------------------------+----------+--------+-----------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | STATUS | MESSAGE | +---------------------------+------------+------------------------------------------+----------+--------+-----------------+ | Dockerfile Security Check | DS006 | COPY '--from' refers to the current | CRITICAL | PASS | No issues found | | | | image | | | | + +------------+------------------------------------------+ + + + | | DS007 | Multiple ENTRYPOINT instructions are | | | | | | | listed | | | | + +------------+------------------------------------------+ + + + | | DS008 | Exposed port is out of range | | | | + +------------+------------------------------------------+ + + + | | DS010 | 'sudo' is used | | | | + +------------+------------------------------------------+ + + + | | DS011 | COPY with more than two arguments is not | | | | | | | ending with slash | | | | + +------------+------------------------------------------+ + + + | | DS012 | Duplicate aliases are defined in | | | | | | | different FROMs | | | | +---------------------------+------------+------------------------------------------+----------+--------+-----------------+ ...","title":"Filtering"},{"location":"docs/misconfiguration/options/filter/#filter-misconfigurations","text":"","title":"Filter Misconfigurations"},{"location":"docs/misconfiguration/options/filter/#by-severity","text":"Use --severity option. trivy conf --severity HIGH,CRITICAL examples/misconf/mixed Result 2021 -07-10T17:37:13.267+0300 INFO Detected config files: 4 configs/Dockerfile ( dockerfile ) =============================== Tests: 23 ( SUCCESSES: 21 , FAILURES: 2 , EXCEPTIONS: 0 ) Failures: 2 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Specify at least 1 USER | | | | | | command in Dockerfile with | | | | | | non-root user as argument | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ configs/deployment.yaml ( kubernetes ) ==================================== Tests: 28 ( SUCCESSES: 14 , FAILURES: 14 , EXCEPTIONS: 0 ) Failures: 14 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | Kubernetes Security Check | KSV006 | docker.sock is mounted to container | HIGH | Deployment 'hello-kubernetes' should | | | | | | not specify '/var/run/docker.socker' in | | | | | | 'spec.template.volumes.hostPath.path' | | | | | | -->avd.aquasec.com/appshield/ksv006 | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ configs/main.tf ( terraform ) =========================== Tests: 19 ( SUCCESSES: 11 , FAILURES: 8 , EXCEPTIONS: 0 ) Failures: 8 ( HIGH: 6 , CRITICAL: 1 ) +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ | Terraform Security Check powered by | AWS003 | AWS Classic resource usage. | HIGH | Resource | | tfsec | | | | 'aws_db_security_group.my-group' | | | | | | uses EC2 Classic. Use a VPC instead. | | | | | | -->tfsec.dev/docs/aws/AWS003/ | + +------------+------------------------------------------+----------+--------------------------------------------------------+ | | AWS004 | Use of plain HTTP. | CRITICAL | Resource | | | | | | 'aws_alb_listener.my-alb-listener' | | | | | | uses plain HTTP instead of HTTPS. | | | | | | -->tfsec.dev/docs/aws/AWS004/ | + +------------+------------------------------------------+----------+--------------------------------------------------------+ | | AWS018 | Missing description for security | HIGH | Resource | | | | group/security group rule. | | 'aws_security_group_rule.my-rule' should | | | | | | include a description for auditing | | | | | | purposes. -->tfsec.dev/docs/aws/AWS018/ | + +------------+------------------------------------------+ +--------------------------------------------------------+ | | AWS025 | API Gateway domain name uses outdated | | Resource | | | | SSL/TLS protocols. | | 'aws_api_gateway_domain_name.empty_security_policy' | | | | | | defines outdated SSL/TLS policies ( not using | | | | | | TLS_1_2 ) . -->tfsec.dev/docs/aws/AWS025/ | + + + + +--------------------------------------------------------+ | | | | | Resource | | | | | | 'aws_api_gateway_domain_name.missing_security_policy' | | | | | | should include security_policy ( defaults to outdated | | | | | | SSL/TLS policy ) . -->tfsec.dev/docs/aws/AWS025/ | + + + + +--------------------------------------------------------+ | | | | | Resource | | | | | | 'aws_api_gateway_domain_name.outdated_security_policy' | | | | | | defines outdated SSL/TLS policies ( not using TLS_1_2 ) . | | | | | | -->tfsec.dev/docs/aws/AWS025/ | + +------------+------------------------------------------+ +--------------------------------------------------------+ | | AZU003 | Unencrypted managed disk. | | Resource 'azurerm_managed_disk.source' | | | | | | defines an unencrypted managed disk. | | | | | | -->tfsec.dev/docs/azure/AZU003/ | +------------------------------------------+------------+------------------------------------------+----------+--------------------------------------------------------+ configs/variables.tf ( terraform ) ================================ Tests: 1 ( SUCCESSES: 1 , FAILURES: 0 , EXCEPTIONS: 0 ) Failures: 0 ( HIGH: 0 , CRITICAL: 0 )","title":"By Severity"},{"location":"docs/misconfiguration/options/filter/#by-misconfiguration-ids","text":"Use .trivyignore . $ cat .trivyignore # Accept the risk AWS003 AWS018 AWS025 $ trivy conf --severity HIGH,CRITICAL examples/misconf/mixed Result 2021 -07-10T17:38:51.306+0300 INFO Detected config files: 4 configs/Dockerfile ( dockerfile ) =============================== Tests: 23 ( SUCCESSES: 21 , FAILURES: 2 , EXCEPTIONS: 0 ) Failures: 2 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Specify at least 1 USER | | | | | | command in Dockerfile with | | | | | | non-root user as argument | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ configs/deployment.yaml ( kubernetes ) ==================================== Tests: 28 ( SUCCESSES: 14 , FAILURES: 14 , EXCEPTIONS: 0 ) Failures: 14 ( HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ | Kubernetes Security Check | KSV006 | docker.sock is mounted to container | HIGH | Deployment 'hello-kubernetes' should | | | | | | not specify '/var/run/docker.socker' in | | | | | | 'spec.template.volumes.hostPath.path' | | | | | | -->avd.aquasec.com/appshield/ksv006 | +---------------------------+------------+-------------------------------------+----------+------------------------------------------+ configs/main.tf ( terraform ) =========================== Tests: 19 ( SUCCESSES: 11 , FAILURES: 8 , EXCEPTIONS: 0 ) Failures: 8 ( HIGH: 1 , CRITICAL: 1 ) +------------------------------------------+------------+---------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +------------------------------------------+------------+---------------------------+----------+------------------------------------------+ | Terraform Security Check powered by | AWS004 | Use of plain HTTP. | CRITICAL | Resource | | tfsec | | | | 'aws_alb_listener.my-alb-listener' | | | | | | uses plain HTTP instead of HTTPS. | | | | | | -->tfsec.dev/docs/aws/AWS004/ | + +------------+---------------------------+----------+------------------------------------------+ | | AZU003 | Unencrypted managed disk. | HIGH | Resource 'azurerm_managed_disk.source' | | | | | | defines an unencrypted managed disk. | | | | | | -->tfsec.dev/docs/azure/AZU003/ | +------------------------------------------+------------+---------------------------+----------+------------------------------------------+ configs/variables.tf ( terraform ) ================================ Tests: 1 ( SUCCESSES: 1 , FAILURES: 0 , EXCEPTIONS: 0 ) Failures: 0 ( HIGH: 0 , CRITICAL: 0 )","title":"By Misconfiguration IDs"},{"location":"docs/misconfiguration/options/filter/#by-exceptions","text":"See Exceptions","title":"By Exceptions"},{"location":"docs/misconfiguration/options/filter/#show-successes-and-exceptions","text":"Use --include-non-failures option to show successes and exceptions as well as failures. trivy conf --severity CRITICAL --include-non-failures examples/misconf/mixed Result 2021-07-10T17:44:02.049+0300 INFO Detected config files: 4 configs/Dockerfile (dockerfile) =============================== Tests: 23 (SUCCESSES: 21, FAILURES: 2, EXCEPTIONS: 0) Failures: 2 (CRITICAL: 0) +---------------------------+------------+------------------------------------------+----------+--------+-----------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | STATUS | MESSAGE | +---------------------------+------------+------------------------------------------+----------+--------+-----------------+ | Dockerfile Security Check | DS006 | COPY '--from' refers to the current | CRITICAL | PASS | No issues found | | | | image | | | | + +------------+------------------------------------------+ + + + | | DS007 | Multiple ENTRYPOINT instructions are | | | | | | | listed | | | | + +------------+------------------------------------------+ + + + | | DS008 | Exposed port is out of range | | | | + +------------+------------------------------------------+ + + + | | DS010 | 'sudo' is used | | | | + +------------+------------------------------------------+ + + + | | DS011 | COPY with more than two arguments is not | | | | | | | ending with slash | | | | + +------------+------------------------------------------+ + + + | | DS012 | Duplicate aliases are defined in | | | | | | | different FROMs | | | | +---------------------------+------------+------------------------------------------+----------+--------+-----------------+ ...","title":"Show Successes and Exceptions"},{"location":"docs/misconfiguration/options/others/","text":"Others Hint See also Others in Vulnerability section. File patterns When a directory is given as an input, Trivy will recursively look for and test all files based on file patterns. The default file patterns are here . In addition to the default file patterns, the --file-patterns option takes regexp patterns to look for your files. For example, it may be useful when your file name of Dockerfile doesn't match the default patterns. This can be repeated for specifying multiple file patterns. Allowed values are here: dockerfile yaml json toml hcl For more details, see an example","title":"Others"},{"location":"docs/misconfiguration/options/others/#others","text":"Hint See also Others in Vulnerability section.","title":"Others"},{"location":"docs/misconfiguration/options/others/#file-patterns","text":"When a directory is given as an input, Trivy will recursively look for and test all files based on file patterns. The default file patterns are here . In addition to the default file patterns, the --file-patterns option takes regexp patterns to look for your files. For example, it may be useful when your file name of Dockerfile doesn't match the default patterns. This can be repeated for specifying multiple file patterns. Allowed values are here: dockerfile yaml json toml hcl For more details, see an example","title":"File patterns"},{"location":"docs/misconfiguration/options/policy/","text":"Policy Pass custom policies You can pass directories including your custom policies through --policy option. This can be repeated for specifying multiple directories. cd examplex/misconf/ trivy conf --policy custom-policy/policy --policy combine/policy --namespaces user misconf/mixed For more details, see Custom Policies . Tip You also need to specify --namespaces option. Pass custom data You can pass directories including your custom data through --data option. This can be repeated for specifying multiple directories. cd examples/misconf/custom-data trivy conf --policy ./policy --data ./data --namespaces user ./configs For more details, see Custom Data . Pass namespaces By default, Trivy evaluate policies defined in appshield.* . If you want to evaluate custom policies in other packages, you have to specify package prefixes through --namespaces option. This can be repeated for specifying multiple packages. trivy conf --policy ./policy --namespaces main --namespaces user ./configs Skip update of built-in policies Trivy downloads built-in policies when it starts operating. Then, it checks for updates every 24 hours. You can use the --skip-policy-update option to skip it. If you skip it the first time, the built-in policies will not be loaded. Note Even if you specify the option the first time, it will be loaded as Terraform policies are written in Go. trivy conf --skip-policy-update examples/misconf/mixed [~/src/github.com/aquasecurity/trivy] Result 2021-07-10T18:04:19.083+0300 INFO No builtin policies were loaded 2021-07-10T18:04:19.174+0300 INFO Detected config files: 2 configs/main.tf (terraform) =========================== Tests: 19 (SUCCESSES: 11, FAILURES: 8, EXCEPTIONS: 0) Failures: 8 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1) +------------------------------------------+------------+------------------------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +------------------------------------------+------------+------------------------------------------+----------+------------------------------------------+ | Terraform Security Check powered by | AWS004 | Use of plain HTTP. | CRITICAL | Resource | | tfsec | | | | 'aws_alb_listener.my-alb-listener' | | | | | | uses plain HTTP instead of HTTPS. | | | | | | -->tfsec.dev/docs/aws/AWS004/ | + +------------+------------------------------------------+----------+------------------------------------------+ | | AWS006 | An ingress security group rule allows | MEDIUM | Resource | | | | traffic from /0. | | 'aws_security_group_rule.my-rule' | | | | | | defines a fully open | | | | | | ingress security group rule. | | | | | | -->tfsec.dev/docs/aws/AWS006/ | + +------------+------------------------------------------+----------+------------------------------------------+ | | AZU003 | Unencrypted managed disk. | HIGH | Resource 'azurerm_managed_disk.source' | | | | | | defines an unencrypted managed disk. | | | | | | -->tfsec.dev/docs/azure/AZU003/ | +------------------------------------------+------------+------------------------------------------+----------+------------------------------------------+ configs/variables.tf (terraform) ================================ Tests: 1 (SUCCESSES: 1, FAILURES: 0, EXCEPTIONS: 0) Failures: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)","title":"Policy"},{"location":"docs/misconfiguration/options/policy/#policy","text":"","title":"Policy"},{"location":"docs/misconfiguration/options/policy/#pass-custom-policies","text":"You can pass directories including your custom policies through --policy option. This can be repeated for specifying multiple directories. cd examplex/misconf/ trivy conf --policy custom-policy/policy --policy combine/policy --namespaces user misconf/mixed For more details, see Custom Policies . Tip You also need to specify --namespaces option.","title":"Pass custom policies"},{"location":"docs/misconfiguration/options/policy/#pass-custom-data","text":"You can pass directories including your custom data through --data option. This can be repeated for specifying multiple directories. cd examples/misconf/custom-data trivy conf --policy ./policy --data ./data --namespaces user ./configs For more details, see Custom Data .","title":"Pass custom data"},{"location":"docs/misconfiguration/options/policy/#pass-namespaces","text":"By default, Trivy evaluate policies defined in appshield.* . If you want to evaluate custom policies in other packages, you have to specify package prefixes through --namespaces option. This can be repeated for specifying multiple packages. trivy conf --policy ./policy --namespaces main --namespaces user ./configs","title":"Pass namespaces"},{"location":"docs/misconfiguration/options/policy/#skip-update-of-built-in-policies","text":"Trivy downloads built-in policies when it starts operating. Then, it checks for updates every 24 hours. You can use the --skip-policy-update option to skip it. If you skip it the first time, the built-in policies will not be loaded. Note Even if you specify the option the first time, it will be loaded as Terraform policies are written in Go. trivy conf --skip-policy-update examples/misconf/mixed [~/src/github.com/aquasecurity/trivy] Result 2021-07-10T18:04:19.083+0300 INFO No builtin policies were loaded 2021-07-10T18:04:19.174+0300 INFO Detected config files: 2 configs/main.tf (terraform) =========================== Tests: 19 (SUCCESSES: 11, FAILURES: 8, EXCEPTIONS: 0) Failures: 8 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1) +------------------------------------------+------------+------------------------------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +------------------------------------------+------------+------------------------------------------+----------+------------------------------------------+ | Terraform Security Check powered by | AWS004 | Use of plain HTTP. | CRITICAL | Resource | | tfsec | | | | 'aws_alb_listener.my-alb-listener' | | | | | | uses plain HTTP instead of HTTPS. | | | | | | -->tfsec.dev/docs/aws/AWS004/ | + +------------+------------------------------------------+----------+------------------------------------------+ | | AWS006 | An ingress security group rule allows | MEDIUM | Resource | | | | traffic from /0. | | 'aws_security_group_rule.my-rule' | | | | | | defines a fully open | | | | | | ingress security group rule. | | | | | | -->tfsec.dev/docs/aws/AWS006/ | + +------------+------------------------------------------+----------+------------------------------------------+ | | AZU003 | Unencrypted managed disk. | HIGH | Resource 'azurerm_managed_disk.source' | | | | | | defines an unencrypted managed disk. | | | | | | -->tfsec.dev/docs/azure/AZU003/ | +------------------------------------------+------------+------------------------------------------+----------+------------------------------------------+ configs/variables.tf (terraform) ================================ Tests: 1 (SUCCESSES: 1, FAILURES: 0, EXCEPTIONS: 0) Failures: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)","title":"Skip update of built-in policies"},{"location":"docs/misconfiguration/options/report/","text":"Report Formats See Reports Formats in Vulnerability section. Caution Misconfiguration scanning doesn't support default templates such as XML for now.","title":"Report Formats"},{"location":"docs/misconfiguration/options/report/#report-formats","text":"See Reports Formats in Vulnerability section. Caution Misconfiguration scanning doesn't support default templates such as XML for now.","title":"Report Formats"},{"location":"docs/misconfiguration/policy/builtin/","text":"Built-in Policies Policy Sources Built-in policies are mainly written in Rego and Go. Those policies are managed under defsec repository . Config type Source Kubernetes defsec Dockerfile, Containerfile defsec Terraform defsec CloudFormation defsec For suggestions or issues regarding policy content, please open an issue under the defsec repository. Ansible are coming soon.","title":"Built-in Policies"},{"location":"docs/misconfiguration/policy/builtin/#built-in-policies","text":"","title":"Built-in Policies"},{"location":"docs/misconfiguration/policy/builtin/#policy-sources","text":"Built-in policies are mainly written in Rego and Go. Those policies are managed under defsec repository . Config type Source Kubernetes defsec Dockerfile, Containerfile defsec Terraform defsec CloudFormation defsec For suggestions or issues regarding policy content, please open an issue under the defsec repository. Ansible are coming soon.","title":"Policy Sources"},{"location":"docs/misconfiguration/policy/exceptions/","text":"Exceptions Exceptions let you specify cases where you allow policy violations. Trivy supports two types of exceptions. Info Exceptions can be applied to built-in policies as well as custom policies. Namespace-based exceptions There are some cases where you need to disable built-in policies partially or fully. Namespace-based exceptions lets you rough choose which individual packages to exempt. To use namespace-based exceptions, create a Rego rule with the name exception that returns the package names to exempt. The exception rule must be defined under namespace.exceptions . data.namespaces includes all package names. Example package namespace.exceptions import data.namespaces exception[ns] { ns := data.namespaces[_] startswith(ns, \"builtin.kubernetes\") } This example exempts all built-in policies for Kubernetes. For more details, see an example . Rule-based exceptions There are some cases where you need more flexibility and granularity in defining which cases to exempt. Rule-based exceptions lets you granularly choose which individual rules to exempt, while also declaring under which conditions to exempt them. To use rule-based exceptions, create a Rego rule with the name exception that returns the rule name suffixes to exempt, prefixed by deny_ (for example, returning foo will exempt deny_foo ). The rule can make any other assertion, for example, on the input or data documents. This is useful to specify the exemption for a specific case. Note that if you specify the empty string, the exception will match all rules named deny . exception[rules] { # Logic rules = [\"foo\",\"bar\"] } The above would provide an exception from deny_foo and deny_bar . Example package user.kubernetes.ID100 __rego_metadata := { \"id\": \"ID100\", \"title\": \"Deployment not allowed\", \"severity\": \"HIGH\", \"type\": \"Kubernetes Custom Check\", } deny_deployment[msg] { input.kind == \"Deployment\" msg = sprintf(\"Found deployment '%s' but deployments are not allowed\", [name]) } exception[rules] { input.kind == \"Deployment\" input.metadata.name == \"allow-deployment\" rules := [\"deployment\"] } If you want to apply rule-based exceptions to built-in policies, you have to define the exception under the same package. Example package builtin.kubernetes.KSV012 exception[rules] { input.metadata.name == \"can-run-as-root\" rules := [\"\"] } This exception is applied to KSV012 in defsec. You can get the package names in the defsec repository or the JSON output from Trivy. For more details, see an example .","title":"Exceptions"},{"location":"docs/misconfiguration/policy/exceptions/#exceptions","text":"Exceptions let you specify cases where you allow policy violations. Trivy supports two types of exceptions. Info Exceptions can be applied to built-in policies as well as custom policies.","title":"Exceptions"},{"location":"docs/misconfiguration/policy/exceptions/#namespace-based-exceptions","text":"There are some cases where you need to disable built-in policies partially or fully. Namespace-based exceptions lets you rough choose which individual packages to exempt. To use namespace-based exceptions, create a Rego rule with the name exception that returns the package names to exempt. The exception rule must be defined under namespace.exceptions . data.namespaces includes all package names. Example package namespace.exceptions import data.namespaces exception[ns] { ns := data.namespaces[_] startswith(ns, \"builtin.kubernetes\") } This example exempts all built-in policies for Kubernetes. For more details, see an example .","title":"Namespace-based exceptions"},{"location":"docs/misconfiguration/policy/exceptions/#rule-based-exceptions","text":"There are some cases where you need more flexibility and granularity in defining which cases to exempt. Rule-based exceptions lets you granularly choose which individual rules to exempt, while also declaring under which conditions to exempt them. To use rule-based exceptions, create a Rego rule with the name exception that returns the rule name suffixes to exempt, prefixed by deny_ (for example, returning foo will exempt deny_foo ). The rule can make any other assertion, for example, on the input or data documents. This is useful to specify the exemption for a specific case. Note that if you specify the empty string, the exception will match all rules named deny . exception[rules] { # Logic rules = [\"foo\",\"bar\"] } The above would provide an exception from deny_foo and deny_bar . Example package user.kubernetes.ID100 __rego_metadata := { \"id\": \"ID100\", \"title\": \"Deployment not allowed\", \"severity\": \"HIGH\", \"type\": \"Kubernetes Custom Check\", } deny_deployment[msg] { input.kind == \"Deployment\" msg = sprintf(\"Found deployment '%s' but deployments are not allowed\", [name]) } exception[rules] { input.kind == \"Deployment\" input.metadata.name == \"allow-deployment\" rules := [\"deployment\"] } If you want to apply rule-based exceptions to built-in policies, you have to define the exception under the same package. Example package builtin.kubernetes.KSV012 exception[rules] { input.metadata.name == \"can-run-as-root\" rules := [\"\"] } This exception is applied to KSV012 in defsec. You can get the package names in the defsec repository or the JSON output from Trivy. For more details, see an example .","title":"Rule-based exceptions"},{"location":"docs/references/troubleshooting/","text":"Troubleshooting Scan Timeout Error $ trivy image ... ... analyze error: timeout: context deadline exceeded Your scan may time out. Java takes a particularly long time to scan. Try increasing the value of the ---timeout option such as --timeout 15m . Certification Error Error: x509: certificate signed by unknown authority TRIVY_INSECURE can be used to allow insecure connections to a container registry when using SSL. $ TRIVY_INSECURE=true trivy image [YOUR_IMAGE] GitHub Rate limiting Error $ trivy image ... ... API rate limit exceeded for xxx.xxx.xxx.xxx. Specify GITHUB_TOKEN for authentication https://developer.github.com/v3/#rate-limiting $ GITHUB_TOKEN=XXXXXXXXXX trivy alpine:3.10 Maven rate limiting / inconsistent jar vulnerability reporting Error $ trivy image ... ... status 403 Forbidden from http://search.maven.org/solrsearch/select Trivy calls Maven API for better detection of JAR files, but many requests may exceed rate limiting. This can easily happen if you are running more than one instance of Trivy which is concurrently scanning multiple images. Once this starts happening Trivy's vulnerability reporting on jar files may become inconsistent. There are two options to resolve this issue: The first is to enable offline scanning using the --offline-scan option to stop Trivy from making API requests. This option affects only vulnerability scanning. The vulnerability database and builtin policies are downloaded as usual. If you want to skip them as well, you can try --skip-update and --skip-policy-update . Note that a number of vulnerabilities might be fewer than without the --offline-scan option. The second, more scalable, option is the place Trivy behind a rate-limiting forward-proxy to the Maven Central API. One way to achieve this is to use nginx. You can use the following nginx config to enable both rate-limiting and caching (the caching greatly reduces the number of calls to the Maven Central API, especially if you are scanning a lot of similar images): limit_req_zone global zone=maven:1m rate=10r/s ; proxy_cache_path /tmp/cache keys_zone=mavencache:10m ; server { listen 80 ; proxy_cache mavencache ; location / { limit_req zone=maven burst=1000 ; proxy_cache_valid any 1h ; proxy_pass https://search.maven.org:443 ; } } This config file will allow a maximum of 10 requests per second to the Maven API, this number was determined experimentally so you might want to use something else if it doesn't fit your needs. Once nginx is up and running, you need to tell all your Trivy deployments to proxy their Maven API calls through nginx. You can do this by setting the MAVEN_CENTRAL_URL environment variable. For example, if your nginx proxy is running at 127.0.0.1 , you can set MAVEN_CENTRAL_URL=http://127.0.0.1/solrsearch/select . Running in parallel takes same time as series run When running trivy on multiple images simultaneously, it will take same time as running trivy in series. This is because of a limitation of boltdb. Bolt obtains a file lock on the data file so multiple processes cannot open the same database at the same time. Opening an already open Bolt database will cause it to hang until the other process closes it. Reference : boltdb: Opening a database . Error downloading vulnerability DB Error FATAL failed to download vulnerability DB If trivy is running behind corporate firewall, you have to add the following urls to your allowlist. ghcr.io pkg-containers.githubusercontent.com Old DB schema Error --skip-update cannot be specified with the old DB schema. Trivy v0.23.0 or later requires Trivy DB v2. Please update your local database or follow [the instruction of air-gapped environment][../advanced/air-gap.md]. Homebrew Scope error Error Error: Your macOS keychain GitHub credentials do not have sufficient scope! $ brew tap aquasecurity/trivy Error: Your macOS keychain GitHub credentials do not have sufficient scope! Scopes they need: none Scopes they have: Create a personal access token: https://github.com/settings/tokens/new?scopes=gist,public_repo&description=Homebrew echo 'export HOMEBREW_GITHUB_API_TOKEN=your_token_here' >> ~/.zshrc Try: $ printf \"protocol=https\\nhost=github.com\\n\" | git credential-osxkeychain erase Already installed Error Error: aquasecurity/trivy/trivy 64 already installed $ brew upgrade ... Error: aquasecurity/trivy/trivy 64 already installed Try: $ brew unlink trivy && brew uninstall trivy ($ rm -rf /usr/local/Cellar/trivy/64) $ brew install aquasecurity/trivy/trivy Others Unknown error Try again with --reset option: $ trivy image --reset","title":"Troubleshooting"},{"location":"docs/references/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"docs/references/troubleshooting/#scan","text":"","title":"Scan"},{"location":"docs/references/troubleshooting/#timeout","text":"Error $ trivy image ... ... analyze error: timeout: context deadline exceeded Your scan may time out. Java takes a particularly long time to scan. Try increasing the value of the ---timeout option such as --timeout 15m .","title":"Timeout"},{"location":"docs/references/troubleshooting/#certification","text":"Error Error: x509: certificate signed by unknown authority TRIVY_INSECURE can be used to allow insecure connections to a container registry when using SSL. $ TRIVY_INSECURE=true trivy image [YOUR_IMAGE]","title":"Certification"},{"location":"docs/references/troubleshooting/#github-rate-limiting","text":"Error $ trivy image ... ... API rate limit exceeded for xxx.xxx.xxx.xxx. Specify GITHUB_TOKEN for authentication https://developer.github.com/v3/#rate-limiting $ GITHUB_TOKEN=XXXXXXXXXX trivy alpine:3.10","title":"GitHub Rate limiting"},{"location":"docs/references/troubleshooting/#maven-rate-limiting-inconsistent-jar-vulnerability-reporting","text":"Error $ trivy image ... ... status 403 Forbidden from http://search.maven.org/solrsearch/select Trivy calls Maven API for better detection of JAR files, but many requests may exceed rate limiting. This can easily happen if you are running more than one instance of Trivy which is concurrently scanning multiple images. Once this starts happening Trivy's vulnerability reporting on jar files may become inconsistent. There are two options to resolve this issue: The first is to enable offline scanning using the --offline-scan option to stop Trivy from making API requests. This option affects only vulnerability scanning. The vulnerability database and builtin policies are downloaded as usual. If you want to skip them as well, you can try --skip-update and --skip-policy-update . Note that a number of vulnerabilities might be fewer than without the --offline-scan option. The second, more scalable, option is the place Trivy behind a rate-limiting forward-proxy to the Maven Central API. One way to achieve this is to use nginx. You can use the following nginx config to enable both rate-limiting and caching (the caching greatly reduces the number of calls to the Maven Central API, especially if you are scanning a lot of similar images): limit_req_zone global zone=maven:1m rate=10r/s ; proxy_cache_path /tmp/cache keys_zone=mavencache:10m ; server { listen 80 ; proxy_cache mavencache ; location / { limit_req zone=maven burst=1000 ; proxy_cache_valid any 1h ; proxy_pass https://search.maven.org:443 ; } } This config file will allow a maximum of 10 requests per second to the Maven API, this number was determined experimentally so you might want to use something else if it doesn't fit your needs. Once nginx is up and running, you need to tell all your Trivy deployments to proxy their Maven API calls through nginx. You can do this by setting the MAVEN_CENTRAL_URL environment variable. For example, if your nginx proxy is running at 127.0.0.1 , you can set MAVEN_CENTRAL_URL=http://127.0.0.1/solrsearch/select .","title":"Maven rate limiting / inconsistent jar vulnerability reporting"},{"location":"docs/references/troubleshooting/#running-in-parallel-takes-same-time-as-series-run","text":"When running trivy on multiple images simultaneously, it will take same time as running trivy in series. This is because of a limitation of boltdb. Bolt obtains a file lock on the data file so multiple processes cannot open the same database at the same time. Opening an already open Bolt database will cause it to hang until the other process closes it. Reference : boltdb: Opening a database .","title":"Running in parallel takes same time as series run"},{"location":"docs/references/troubleshooting/#error-downloading-vulnerability-db","text":"Error FATAL failed to download vulnerability DB If trivy is running behind corporate firewall, you have to add the following urls to your allowlist. ghcr.io pkg-containers.githubusercontent.com","title":"Error downloading vulnerability DB"},{"location":"docs/references/troubleshooting/#old-db-schema","text":"Error --skip-update cannot be specified with the old DB schema. Trivy v0.23.0 or later requires Trivy DB v2. Please update your local database or follow [the instruction of air-gapped environment][../advanced/air-gap.md].","title":"Old DB schema"},{"location":"docs/references/troubleshooting/#homebrew","text":"","title":"Homebrew"},{"location":"docs/references/troubleshooting/#scope-error","text":"Error Error: Your macOS keychain GitHub credentials do not have sufficient scope! $ brew tap aquasecurity/trivy Error: Your macOS keychain GitHub credentials do not have sufficient scope! Scopes they need: none Scopes they have: Create a personal access token: https://github.com/settings/tokens/new?scopes=gist,public_repo&description=Homebrew echo 'export HOMEBREW_GITHUB_API_TOKEN=your_token_here' >> ~/.zshrc Try: $ printf \"protocol=https\\nhost=github.com\\n\" | git credential-osxkeychain erase","title":"Scope error"},{"location":"docs/references/troubleshooting/#already-installed","text":"Error Error: aquasecurity/trivy/trivy 64 already installed $ brew upgrade ... Error: aquasecurity/trivy/trivy 64 already installed Try: $ brew unlink trivy && brew uninstall trivy ($ rm -rf /usr/local/Cellar/trivy/64) $ brew install aquasecurity/trivy/trivy","title":"Already installed"},{"location":"docs/references/troubleshooting/#others","text":"","title":"Others"},{"location":"docs/references/troubleshooting/#unknown-error","text":"Try again with --reset option: $ trivy image --reset","title":"Unknown error"},{"location":"docs/references/cli/","text":"Trivy has several sub commands, image, fs, repo, client and server. NAME: trivy - A simple and comprehensive vulnerability scanner for containers USAGE: trivy [ global options ] command [ command options ] target VERSION: dev COMMANDS: image, i scan an image filesystem, fs scan local filesystem repository, repo scan remote repository client, c client mode server, s server mode config, conf scan config files plugin, p manage plugins version print the version help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --quiet, -q suppress progress bar and log output ( default: false ) [ $TRIVY_QUIET ] --debug, -d debug mode ( default: false ) [ $TRIVY_DEBUG ] --cache-dir value cache directory ( default: \"/Users/teppei/Library/Caches/trivy\" ) [ $TRIVY_CACHE_DIR ] --help, -h show help ( default: false ) --version, -v print the version ( default: false )","title":"Overview"},{"location":"docs/references/cli/client/","text":"Client NAME: trivy client - client mode USAGE: trivy client [ command options ] image_name OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --input value, -i value input file path instead of image name [ $TRIVY_INPUT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --removed-pkgs detect vulnerabilities of removed packages ( only for Alpine ) ( default: false ) [ $TRIVY_REMOVED_PKGS ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --token value for authentication [ $TRIVY_TOKEN ] --token-header value specify a header name for token ( default: \"Trivy-Token\" ) [ $TRIVY_TOKEN_HEADER ] --remote value server address ( default: \"http://localhost:4954\" ) [ $TRIVY_REMOTE ] --custom-headers value custom headers [ $TRIVY_CUSTOM_HEADERS ] --help, -h show help ( default: false )","title":"Client"},{"location":"docs/references/cli/client/#client","text":"NAME: trivy client - client mode USAGE: trivy client [ command options ] image_name OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --input value, -i value input file path instead of image name [ $TRIVY_INPUT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --removed-pkgs detect vulnerabilities of removed packages ( only for Alpine ) ( default: false ) [ $TRIVY_REMOVED_PKGS ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --token value for authentication [ $TRIVY_TOKEN ] --token-header value specify a header name for token ( default: \"Trivy-Token\" ) [ $TRIVY_TOKEN_HEADER ] --remote value server address ( default: \"http://localhost:4954\" ) [ $TRIVY_REMOTE ] --custom-headers value custom headers [ $TRIVY_CUSTOM_HEADERS ] --help, -h show help ( default: false )","title":"Client"},{"location":"docs/references/cli/config/","text":"Config NAME: trivy config - scan config files USAGE: trivy config [ command options ] dir OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-policy-update skip updating built-in policies ( default: false ) [ $TRIVY_SKIP_POLICY_UPDATE ] --reset remove all caches and database ( default: false ) [ $TRIVY_RESET ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --skip-files value specify the file paths to skip traversal [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped [ $TRIVY_SKIP_DIRS ] --policy value, --config-policy value specify paths to the Rego policy files directory, applying config files [ $TRIVY_POLICY ] --data value, --config-data value specify paths from which data for the Rego policies will be recursively loaded [ $TRIVY_DATA ] --policy-namespaces value, --namespaces value Rego namespaces ( default: \"users\" ) [ $TRIVY_POLICY_NAMESPACES ] --file-patterns value specify file patterns [ $TRIVY_FILE_PATTERNS ] --include-successes include successes of misconfigurations ( default: false ) [ $TRIVY_INCLUDE_SUCCESSES ] --help, -h show help ( default: false )","title":"Config"},{"location":"docs/references/cli/config/#config","text":"NAME: trivy config - scan config files USAGE: trivy config [ command options ] dir OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-policy-update skip updating built-in policies ( default: false ) [ $TRIVY_SKIP_POLICY_UPDATE ] --reset remove all caches and database ( default: false ) [ $TRIVY_RESET ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --skip-files value specify the file paths to skip traversal [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped [ $TRIVY_SKIP_DIRS ] --policy value, --config-policy value specify paths to the Rego policy files directory, applying config files [ $TRIVY_POLICY ] --data value, --config-data value specify paths from which data for the Rego policies will be recursively loaded [ $TRIVY_DATA ] --policy-namespaces value, --namespaces value Rego namespaces ( default: \"users\" ) [ $TRIVY_POLICY_NAMESPACES ] --file-patterns value specify file patterns [ $TRIVY_FILE_PATTERNS ] --include-successes include successes of misconfigurations ( default: false ) [ $TRIVY_INCLUDE_SUCCESSES ] --help, -h show help ( default: false )","title":"Config"},{"location":"docs/references/cli/fs/","text":"Filesystem NAME: trivy filesystem - scan local filesystem for language-specific dependencies and config files USAGE: trivy filesystem [ command options ] path OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --skip-policy-update skip updating built-in policies ( default: false ) [ $TRIVY_SKIP_POLICY_UPDATE ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --security-checks value comma-separated list of what security issues to detect ( vuln,config ) ( default: \"vuln\" ) [ $TRIVY_SECURITY_CHECKS ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --cache-ttl value cache TTL when using redis as cache backend ( default: 0s ) [ $TRIVY_CACHE_TTL ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --no-progress suppress progress bar ( default: false ) [ $TRIVY_NO_PROGRESS ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --skip-files value specify the file paths to skip traversal ( accepts multiple inputs ) [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped ( accepts multiple inputs ) [ $TRIVY_SKIP_DIRS ] --config-policy value specify paths to the Rego policy files directory, applying config files ( accepts multiple inputs ) [ $TRIVY_CONFIG_POLICY ] --config-data value specify paths from which data for the Rego policies will be recursively loaded ( accepts multiple inputs ) [ $TRIVY_CONFIG_DATA ] --policy-namespaces value, --namespaces value Rego namespaces ( default: \"users\" ) ( accepts multiple inputs ) [ $TRIVY_POLICY_NAMESPACES ] --server value server address [ $TRIVY_SERVER ] --token value for authentication in client/server mode [ $TRIVY_TOKEN ] --token-header value specify a header name for token in client/server mode ( default: \"Trivy-Token\" ) [ $TRIVY_TOKEN_HEADER ] --custom-headers value custom headers in client/server mode ( accepts multiple inputs ) [ $TRIVY_CUSTOM_HEADERS ] --help, -h show help ( default: false )","title":"Filesystem"},{"location":"docs/references/cli/fs/#filesystem","text":"NAME: trivy filesystem - scan local filesystem for language-specific dependencies and config files USAGE: trivy filesystem [ command options ] path OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --skip-policy-update skip updating built-in policies ( default: false ) [ $TRIVY_SKIP_POLICY_UPDATE ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --security-checks value comma-separated list of what security issues to detect ( vuln,config ) ( default: \"vuln\" ) [ $TRIVY_SECURITY_CHECKS ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --cache-ttl value cache TTL when using redis as cache backend ( default: 0s ) [ $TRIVY_CACHE_TTL ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --no-progress suppress progress bar ( default: false ) [ $TRIVY_NO_PROGRESS ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --skip-files value specify the file paths to skip traversal ( accepts multiple inputs ) [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped ( accepts multiple inputs ) [ $TRIVY_SKIP_DIRS ] --config-policy value specify paths to the Rego policy files directory, applying config files ( accepts multiple inputs ) [ $TRIVY_CONFIG_POLICY ] --config-data value specify paths from which data for the Rego policies will be recursively loaded ( accepts multiple inputs ) [ $TRIVY_CONFIG_DATA ] --policy-namespaces value, --namespaces value Rego namespaces ( default: \"users\" ) ( accepts multiple inputs ) [ $TRIVY_POLICY_NAMESPACES ] --server value server address [ $TRIVY_SERVER ] --token value for authentication in client/server mode [ $TRIVY_TOKEN ] --token-header value specify a header name for token in client/server mode ( default: \"Trivy-Token\" ) [ $TRIVY_TOKEN_HEADER ] --custom-headers value custom headers in client/server mode ( accepts multiple inputs ) [ $TRIVY_CUSTOM_HEADERS ] --help, -h show help ( default: false )","title":"Filesystem"},{"location":"docs/references/cli/image/","text":"Image NAME: trivy image - scan an image USAGE: trivy image [ command options ] image_name OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --input value, -i value input file path instead of image name [ $TRIVY_INPUT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --download-db-only download/update vulnerability database but don ' t run a scan ( default: false ) [ $TRIVY_DOWNLOAD_DB_ONLY ] --reset remove all caches and database ( default: false ) [ $TRIVY_RESET ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --no-progress suppress progress bar ( default: false ) [ $TRIVY_NO_PROGRESS ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --removed-pkgs detect vulnerabilities of removed packages ( only for Alpine ) ( default: false ) [ $TRIVY_REMOVED_PKGS ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --security-checks value comma-separated list of what security issues to detect ( vuln,config ) ( default: \"vuln\" ) [ $TRIVY_SECURITY_CHECKS ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --light deprecated ( default: false ) [ $TRIVY_LIGHT ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --cache-ttl value cache TTL when using redis as cache backend ( default: 0s ) [ $TRIVY_CACHE_TTL ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --insecure allow insecure server connections when using SSL ( default: false ) [ $TRIVY_INSECURE ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --skip-files value specify the file paths to skip traversal ( accepts multiple inputs ) [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped ( accepts multiple inputs ) [ $TRIVY_SKIP_DIRS ] --help, -h show help ( default: false )","title":"Image"},{"location":"docs/references/cli/image/#image","text":"NAME: trivy image - scan an image USAGE: trivy image [ command options ] image_name OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --input value, -i value input file path instead of image name [ $TRIVY_INPUT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --download-db-only download/update vulnerability database but don ' t run a scan ( default: false ) [ $TRIVY_DOWNLOAD_DB_ONLY ] --reset remove all caches and database ( default: false ) [ $TRIVY_RESET ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --no-progress suppress progress bar ( default: false ) [ $TRIVY_NO_PROGRESS ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --removed-pkgs detect vulnerabilities of removed packages ( only for Alpine ) ( default: false ) [ $TRIVY_REMOVED_PKGS ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --security-checks value comma-separated list of what security issues to detect ( vuln,config ) ( default: \"vuln\" ) [ $TRIVY_SECURITY_CHECKS ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --light deprecated ( default: false ) [ $TRIVY_LIGHT ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --cache-ttl value cache TTL when using redis as cache backend ( default: 0s ) [ $TRIVY_CACHE_TTL ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --insecure allow insecure server connections when using SSL ( default: false ) [ $TRIVY_INSECURE ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --skip-files value specify the file paths to skip traversal ( accepts multiple inputs ) [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped ( accepts multiple inputs ) [ $TRIVY_SKIP_DIRS ] --help, -h show help ( default: false )","title":"Image"},{"location":"docs/references/cli/plugins/","text":"Plugins Trivy provides a plugin feature to allow others to extend the Trivy CLI without the need to change the Trivycode base. This plugin system was inspired by the plugin system used in kubectl , Helm , and Conftest . Overview Trivy plugins are add-on tools that integrate seamlessly with Trivy. They provide a way to extend the core feature set of Trivy, but without requiring every new feature to be written in Go and added to the core tool. They can be added and removed from a Trivy installation without impacting the core Trivy tool. They can be written in any programming language. They integrate with Trivy, and will show up in Trivy help and subcommands. Warning Trivy plugins available in public are not audited for security. You should install and run third-party plugins at your own risk, since they are arbitrary programs running on your machine. Installing a Plugin A plugin can be installed using the trivy plugin install command. This command takes a url and will download the plugin and install it in the plugin cache. Trivy adheres to the XDG specification, so the location depends on whether XDG_DATA_HOME is set. Trivy will now search XDG_DATA_HOME for the location of the Trivy plugins cache. The preference order is as follows: XDG_DATA_HOME if set and .trivy/plugins exists within the XDG_DATA_HOME dir ~/.trivy/plugins Under the hood Trivy leverages go-getter to download plugins. This means the following protocols are supported for downloading plugins: OCI Registries Local Files Git HTTP/HTTPS Mercurial Amazon S3 Google Cloud Storage For example, to download the Kubernetes Trivy plugin you can execute the following command: $ trivy plugin install github.com/aquasecurity/trivy-plugin-kubectl Using Plugins Once the plugin is installed, Trivy will load all available plugins in the cache on the start of the next Trivy execution. A plugin will be made in the Trivy CLI based on the plugin name. To display all plugins, you can list them by trivy --help $ trivy --help NAME: trivy - A simple and comprehensive vulnerability scanner for containers USAGE: trivy [ global options ] command [ command options ] target VERSION: dev COMMANDS: image, i scan an image filesystem, fs scan local filesystem repository, repo scan remote repository client, c client mode server, s server mode plugin, p manage plugins kubectl scan kubectl resources help, h Shows a list of commands or help for one command As shown above, kubectl subcommand exists in the COMMANDS section. To call the kubectl plugin and scan existing Kubernetes deployments, you can execute the following command: $ trivy kubectl deployment <deployment-id> -- --ignore-unfixed --severity CRITICAL Internally the kubectl plugin calls the kubectl binary to fetch information about that deployment and passes the using images to Trivy. You can see the detail here . If you want to omit even the subcommand, you can use TRIVY_RUN_AS_PLUGIN environment variable. $ TRIVY_RUN_AS_PLUGIN = kubectl trivy job your-job -- --format json Installing and Running Plugins on the fly trivy plugin run installs a plugin and runs it on the fly. If the plugin is already present in the cache, the installation is skipped. trivy plugin run github.com/aquasecurity/trivy-plugin-kubectl pod your-pod -- --exit-code 1 Uninstalling Plugins Specify a plugin name with trivy plugin uninstall command. $ trivy plugin uninstall kubectl Building Plugins Each plugin has a top-level directory, and then a plugin.yaml file. your-plugin/ | | - plugin.yaml | - your-plugin.sh In the example above, the plugin is contained inside of a directory named your-plugin . It has two files: plugin.yaml (required) and an executable script, your-plugin.sh (optional). The core of a plugin is a simple YAML file named plugin.yaml. Here is an example YAML of trivy-plugin-kubectl plugin that adds support for Kubernetes scanning. name : \"kubectl\" repository : github.com/aquasecurity/trivy-plugin-kubectl version : \"0.1.0\" usage : scan kubectl resources description : |- A Trivy plugin that scans the images of a kubernetes resource. Usage: trivy kubectl TYPE[.VERSION][.GROUP] NAME platforms : - selector : # optional os : darwin arch : amd64 uri : ./trivy-kubectl # where the execution file is (local file, http, git, etc.) bin : ./trivy-kubectl # path to the execution file - selector : # optional os : linux arch : amd64 uri : https://github.com/aquasecurity/trivy-plugin-kubectl/releases/download/v0.1.0/trivy-kubectl.tar.gz bin : ./trivy-kubectl The plugin.yaml field should contain the following information: name: The name of the plugin. This also determines how the plugin will be made available in the Trivy CLI. For example, if the plugin is named kubectl, you can call the plugin with trivy kubectl . (required) version: The version of the plugin. (required) usage: A short usage description. (required) description: A long description of the plugin. This is where you could provide a helpful documentation of your plugin. (required) platforms: (required) selector: The OS/Architecture specific variations of a execution file. (optional) os: OS information based on GOOS (linux, darwin, etc.) (optional) arch: The architecture information based on GOARCH (amd64, arm64, etc.) (optional) uri: Where the executable file is. Relative path from the root directory of the plugin or remote URL such as HTTP and S3. (required) bin: Which file to call when the plugin is executed. Relative path from the root directory of the plugin. (required) The following rules will apply in deciding which platform to select: If both os and arch under selector match the current platform, search will stop and the platform will be used. If selector is not present, the platform will be used. If os matches and there is no more specific arch match, the platform will be used. If no platform match is found, Trivy will exit with an error. After determining platform, Trivy will download the execution file from uri and store it in the plugin cache. When the plugin is called via Trivy CLI, bin command will be executed. The plugin is responsible for handling flags and arguments. Any arguments are passed to the plugin from the trivy command. Example https://github.com/aquasecurity/trivy-plugin-kubectl","title":"Plugins"},{"location":"docs/references/cli/plugins/#plugins","text":"Trivy provides a plugin feature to allow others to extend the Trivy CLI without the need to change the Trivycode base. This plugin system was inspired by the plugin system used in kubectl , Helm , and Conftest .","title":"Plugins"},{"location":"docs/references/cli/plugins/#overview","text":"Trivy plugins are add-on tools that integrate seamlessly with Trivy. They provide a way to extend the core feature set of Trivy, but without requiring every new feature to be written in Go and added to the core tool. They can be added and removed from a Trivy installation without impacting the core Trivy tool. They can be written in any programming language. They integrate with Trivy, and will show up in Trivy help and subcommands. Warning Trivy plugins available in public are not audited for security. You should install and run third-party plugins at your own risk, since they are arbitrary programs running on your machine.","title":"Overview"},{"location":"docs/references/cli/plugins/#installing-a-plugin","text":"A plugin can be installed using the trivy plugin install command. This command takes a url and will download the plugin and install it in the plugin cache. Trivy adheres to the XDG specification, so the location depends on whether XDG_DATA_HOME is set. Trivy will now search XDG_DATA_HOME for the location of the Trivy plugins cache. The preference order is as follows: XDG_DATA_HOME if set and .trivy/plugins exists within the XDG_DATA_HOME dir ~/.trivy/plugins Under the hood Trivy leverages go-getter to download plugins. This means the following protocols are supported for downloading plugins: OCI Registries Local Files Git HTTP/HTTPS Mercurial Amazon S3 Google Cloud Storage For example, to download the Kubernetes Trivy plugin you can execute the following command: $ trivy plugin install github.com/aquasecurity/trivy-plugin-kubectl","title":"Installing a Plugin"},{"location":"docs/references/cli/plugins/#using-plugins","text":"Once the plugin is installed, Trivy will load all available plugins in the cache on the start of the next Trivy execution. A plugin will be made in the Trivy CLI based on the plugin name. To display all plugins, you can list them by trivy --help $ trivy --help NAME: trivy - A simple and comprehensive vulnerability scanner for containers USAGE: trivy [ global options ] command [ command options ] target VERSION: dev COMMANDS: image, i scan an image filesystem, fs scan local filesystem repository, repo scan remote repository client, c client mode server, s server mode plugin, p manage plugins kubectl scan kubectl resources help, h Shows a list of commands or help for one command As shown above, kubectl subcommand exists in the COMMANDS section. To call the kubectl plugin and scan existing Kubernetes deployments, you can execute the following command: $ trivy kubectl deployment <deployment-id> -- --ignore-unfixed --severity CRITICAL Internally the kubectl plugin calls the kubectl binary to fetch information about that deployment and passes the using images to Trivy. You can see the detail here . If you want to omit even the subcommand, you can use TRIVY_RUN_AS_PLUGIN environment variable. $ TRIVY_RUN_AS_PLUGIN = kubectl trivy job your-job -- --format json","title":"Using Plugins"},{"location":"docs/references/cli/plugins/#installing-and-running-plugins-on-the-fly","text":"trivy plugin run installs a plugin and runs it on the fly. If the plugin is already present in the cache, the installation is skipped. trivy plugin run github.com/aquasecurity/trivy-plugin-kubectl pod your-pod -- --exit-code 1","title":"Installing and Running Plugins on the fly"},{"location":"docs/references/cli/plugins/#uninstalling-plugins","text":"Specify a plugin name with trivy plugin uninstall command. $ trivy plugin uninstall kubectl","title":"Uninstalling Plugins"},{"location":"docs/references/cli/plugins/#building-plugins","text":"Each plugin has a top-level directory, and then a plugin.yaml file. your-plugin/ | | - plugin.yaml | - your-plugin.sh In the example above, the plugin is contained inside of a directory named your-plugin . It has two files: plugin.yaml (required) and an executable script, your-plugin.sh (optional). The core of a plugin is a simple YAML file named plugin.yaml. Here is an example YAML of trivy-plugin-kubectl plugin that adds support for Kubernetes scanning. name : \"kubectl\" repository : github.com/aquasecurity/trivy-plugin-kubectl version : \"0.1.0\" usage : scan kubectl resources description : |- A Trivy plugin that scans the images of a kubernetes resource. Usage: trivy kubectl TYPE[.VERSION][.GROUP] NAME platforms : - selector : # optional os : darwin arch : amd64 uri : ./trivy-kubectl # where the execution file is (local file, http, git, etc.) bin : ./trivy-kubectl # path to the execution file - selector : # optional os : linux arch : amd64 uri : https://github.com/aquasecurity/trivy-plugin-kubectl/releases/download/v0.1.0/trivy-kubectl.tar.gz bin : ./trivy-kubectl The plugin.yaml field should contain the following information: name: The name of the plugin. This also determines how the plugin will be made available in the Trivy CLI. For example, if the plugin is named kubectl, you can call the plugin with trivy kubectl . (required) version: The version of the plugin. (required) usage: A short usage description. (required) description: A long description of the plugin. This is where you could provide a helpful documentation of your plugin. (required) platforms: (required) selector: The OS/Architecture specific variations of a execution file. (optional) os: OS information based on GOOS (linux, darwin, etc.) (optional) arch: The architecture information based on GOARCH (amd64, arm64, etc.) (optional) uri: Where the executable file is. Relative path from the root directory of the plugin or remote URL such as HTTP and S3. (required) bin: Which file to call when the plugin is executed. Relative path from the root directory of the plugin. (required) The following rules will apply in deciding which platform to select: If both os and arch under selector match the current platform, search will stop and the platform will be used. If selector is not present, the platform will be used. If os matches and there is no more specific arch match, the platform will be used. If no platform match is found, Trivy will exit with an error. After determining platform, Trivy will download the execution file from uri and store it in the plugin cache. When the plugin is called via Trivy CLI, bin command will be executed. The plugin is responsible for handling flags and arguments. Any arguments are passed to the plugin from the trivy command.","title":"Building Plugins"},{"location":"docs/references/cli/plugins/#example","text":"https://github.com/aquasecurity/trivy-plugin-kubectl","title":"Example"},{"location":"docs/references/cli/repo/","text":"Repository NAME: trivy repository - scan remote repository USAGE: trivy repository [ command options ] repo_url OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --input value, -i value input file path instead of image name [ $TRIVY_INPUT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --skip-policy-update skip updating built-in policies ( default: false ) [ $TRIVY_SKIP_POLICY_UPDATE ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --removed-pkgs detect vulnerabilities of removed packages ( only for Alpine ) ( default: false ) [ $TRIVY_REMOVED_PKGS ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --security-checks value comma-separated list of what security issues to detect ( vuln,config ) ( default: \"vuln\" ) [ $TRIVY_SECURITY_CHECKS ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --cache-ttl value cache TTL when using redis as cache backend ( default: 0s ) [ $TRIVY_CACHE_TTL ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --no-progress suppress progress bar ( default: false ) [ $TRIVY_NO_PROGRESS ] --quiet, -q suppress progress bar and log output ( default: false ) [ $TRIVY_QUIET ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --insecure allow insecure server connections when using SSL ( default: false ) [ $TRIVY_INSECURE ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --skip-files value specify the file paths to skip traversal ( accepts multiple inputs ) [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped ( accepts multiple inputs ) [ $TRIVY_SKIP_DIRS ] --help, -h show help ( default: false )","title":"Repository"},{"location":"docs/references/cli/repo/#repository","text":"NAME: trivy repository - scan remote repository USAGE: trivy repository [ command options ] repo_url OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --input value, -i value input file path instead of image name [ $TRIVY_INPUT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --skip-policy-update skip updating built-in policies ( default: false ) [ $TRIVY_SKIP_POLICY_UPDATE ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --removed-pkgs detect vulnerabilities of removed packages ( only for Alpine ) ( default: false ) [ $TRIVY_REMOVED_PKGS ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --security-checks value comma-separated list of what security issues to detect ( vuln,config ) ( default: \"vuln\" ) [ $TRIVY_SECURITY_CHECKS ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --cache-ttl value cache TTL when using redis as cache backend ( default: 0s ) [ $TRIVY_CACHE_TTL ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --no-progress suppress progress bar ( default: false ) [ $TRIVY_NO_PROGRESS ] --quiet, -q suppress progress bar and log output ( default: false ) [ $TRIVY_QUIET ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --insecure allow insecure server connections when using SSL ( default: false ) [ $TRIVY_INSECURE ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --skip-files value specify the file paths to skip traversal ( accepts multiple inputs ) [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped ( accepts multiple inputs ) [ $TRIVY_SKIP_DIRS ] --help, -h show help ( default: false )","title":"Repository"},{"location":"docs/references/cli/rootfs/","text":"Rootfs NAME: trivy rootfs - scan rootfs USAGE: trivy rootfs [ command options ] dir OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --skip-policy-update skip updating built-in policies ( default: false ) [ $TRIVY_SKIP_POLICY_UPDATE ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --security-checks value comma-separated list of what security issues to detect ( vuln,config ) ( default: \"vuln\" ) [ $TRIVY_SECURITY_CHECKS ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --no-progress suppress progress bar ( default: false ) [ $TRIVY_NO_PROGRESS ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --skip-files value specify the file paths to skip traversal [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped [ $TRIVY_SKIP_DIRS ] --config-policy value specify paths to the Rego policy files directory, applying config files [ $TRIVY_CONFIG_POLICY ] --config-data value specify paths from which data for the Rego policies will be recursively loaded [ $TRIVY_CONFIG_DATA ] --policy-namespaces value, --namespaces value Rego namespaces ( default: \"users\" ) [ $TRIVY_POLICY_NAMESPACES ] --help, -h show help ( default: false )","title":"Rootfs"},{"location":"docs/references/cli/rootfs/#rootfs","text":"NAME: trivy rootfs - scan rootfs USAGE: trivy rootfs [ command options ] dir OPTIONS: --template value, -t value output template [ $TRIVY_TEMPLATE ] --format value, -f value format ( table, json, sarif, template ) ( default: \"table\" ) [ $TRIVY_FORMAT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --output value, -o value output file name [ $TRIVY_OUTPUT ] --exit-code value Exit code when vulnerabilities were found ( default: 0 ) [ $TRIVY_EXIT_CODE ] --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --skip-policy-update skip updating built-in policies ( default: false ) [ $TRIVY_SKIP_POLICY_UPDATE ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignore-unfixed display only fixed vulnerabilities ( default: false ) [ $TRIVY_IGNORE_UNFIXED ] --vuln-type value comma-separated list of vulnerability types ( os,library ) ( default: \"os,library\" ) [ $TRIVY_VULN_TYPE ] --security-checks value comma-separated list of what security issues to detect ( vuln,config ) ( default: \"vuln\" ) [ $TRIVY_SECURITY_CHECKS ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --no-progress suppress progress bar ( default: false ) [ $TRIVY_NO_PROGRESS ] --ignore-policy value specify the Rego file to evaluate each vulnerability [ $TRIVY_IGNORE_POLICY ] --list-all-pkgs enabling the option will output all packages regardless of vulnerability ( default: false ) [ $TRIVY_LIST_ALL_PKGS ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --skip-files value specify the file paths to skip traversal [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped [ $TRIVY_SKIP_DIRS ] --config-policy value specify paths to the Rego policy files directory, applying config files [ $TRIVY_CONFIG_POLICY ] --config-data value specify paths from which data for the Rego policies will be recursively loaded [ $TRIVY_CONFIG_DATA ] --policy-namespaces value, --namespaces value Rego namespaces ( default: \"users\" ) [ $TRIVY_POLICY_NAMESPACES ] --help, -h show help ( default: false )","title":"Rootfs"},{"location":"docs/references/cli/sbom/","text":"SBOM NAME: trivy sbom - generate SBOM for an artifact USAGE: trivy sbom [ command options ] ARTIFACT DESCRIPTION: ARTIFACT can be a container image, file path/directory, git repository or container image archive. See examples. OPTIONS: --output value, -o value output file name [ $TRIVY_OUTPUT ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --skip-files value specify the file paths to skip traversal ( accepts multiple inputs ) [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped ( accepts multiple inputs ) [ $TRIVY_SKIP_DIRS ] --artifact-type value, --type value input artifact type ( image, fs, repo, archive ) ( default: \"image\" ) [ $TRIVY_ARTIFACT_TYPE ] --sbom-format value, --format value SBOM format ( cyclonedx, spdx, spdx-json ) ( default: \"cyclonedx\" ) [ $TRIVY_SBOM_FORMAT ] --help, -h show help ( default: false )","title":"SBOM"},{"location":"docs/references/cli/sbom/#sbom","text":"NAME: trivy sbom - generate SBOM for an artifact USAGE: trivy sbom [ command options ] ARTIFACT DESCRIPTION: ARTIFACT can be a container image, file path/directory, git repository or container image archive. See examples. OPTIONS: --output value, -o value output file name [ $TRIVY_OUTPUT ] --clear-cache, -c clear image caches without scanning ( default: false ) [ $TRIVY_CLEAR_CACHE ] --ignorefile value specify .trivyignore file ( default: \".trivyignore\" ) [ $TRIVY_IGNOREFILE ] --timeout value timeout ( default: 5m0s ) [ $TRIVY_TIMEOUT ] --severity value, -s value severities of vulnerabilities to be displayed ( comma separated ) ( default: \"UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL\" ) [ $TRIVY_SEVERITY ] --offline-scan do not issue API requests to identify dependencies ( default: false ) [ $TRIVY_OFFLINE_SCAN ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --skip-files value specify the file paths to skip traversal ( accepts multiple inputs ) [ $TRIVY_SKIP_FILES ] --skip-dirs value specify the directories where the traversal is skipped ( accepts multiple inputs ) [ $TRIVY_SKIP_DIRS ] --artifact-type value, --type value input artifact type ( image, fs, repo, archive ) ( default: \"image\" ) [ $TRIVY_ARTIFACT_TYPE ] --sbom-format value, --format value SBOM format ( cyclonedx, spdx, spdx-json ) ( default: \"cyclonedx\" ) [ $TRIVY_SBOM_FORMAT ] --help, -h show help ( default: false )","title":"SBOM"},{"location":"docs/references/cli/server/","text":"Server NAME: trivy server - server mode USAGE: trivy server [ command options ] [ arguments... ] OPTIONS: --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --download-db-only download/update vulnerability database but don ' t run a scan ( default: false ) [ $TRIVY_DOWNLOAD_DB_ONLY ] --reset remove all caches and database ( default: false ) [ $TRIVY_RESET ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --cache-ttl value cache TTL when using redis as cache backend ( default: 0s ) [ $TRIVY_CACHE_TTL ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --token value for authentication in client/server mode [ $TRIVY_TOKEN ] --token-header value specify a header name for token in client/server mode ( default: \"Trivy-Token\" ) [ $TRIVY_TOKEN_HEADER ] --listen value listen address ( default: \"localhost:4954\" ) [ $TRIVY_LISTEN ] --help, -h show help ( default: false )","title":"Server"},{"location":"docs/references/cli/server/#server","text":"NAME: trivy server - server mode USAGE: trivy server [ command options ] [ arguments... ] OPTIONS: --skip-db-update, --skip-update skip updating vulnerability database ( default: false ) [ $TRIVY_SKIP_UPDATE , $TRIVY_SKIP_DB_UPDATE ] --download-db-only download/update vulnerability database but don ' t run a scan ( default: false ) [ $TRIVY_DOWNLOAD_DB_ONLY ] --reset remove all caches and database ( default: false ) [ $TRIVY_RESET ] --cache-backend value cache backend ( e.g. redis://localhost:6379 ) ( default: \"fs\" ) [ $TRIVY_CACHE_BACKEND ] --cache-ttl value cache TTL when using redis as cache backend ( default: 0s ) [ $TRIVY_CACHE_TTL ] --db-repository value OCI repository to retrieve trivy-db from ( default: \"ghcr.io/aquasecurity/trivy-db\" ) [ $TRIVY_DB_REPOSITORY ] --token value for authentication in client/server mode [ $TRIVY_TOKEN ] --token-header value specify a header name for token in client/server mode ( default: \"Trivy-Token\" ) [ $TRIVY_TOKEN_HEADER ] --listen value listen address ( default: \"localhost:4954\" ) [ $TRIVY_LISTEN ] --help, -h show help ( default: false )","title":"Server"},{"location":"docs/references/modes/client-server/","text":"Client/Server Trivy has client/server mode. Trivy server has vulnerability database and Trivy client doesn't have to download vulnerability database. It is useful if you want to scan images at multiple locations and do not want to download the database at every location. Server At first, you need to launch Trivy server. It downloads vulnerability database automatically and continue to fetch the latest DB in the background. $ trivy server --listen localhost:8080 2019-12-12T15:17:06.551+0200 INFO Need to update DB 2019-12-12T15:17:56.706+0200 INFO Reopening DB... 2019-12-12T15:17:56.707+0200 INFO Listening localhost:8080... If you want to accept a connection from outside, you have to specify 0.0.0.0 or your ip address, not localhost . $ trivy server --listen 0.0.0.0:8080 Client Then, specify the remote address. $ trivy client --remote http://localhost:8080 alpine:3.10 Result alpine:3.10 (alpine 3.10.2) =========================== Total: 3 (UNKNOWN: 0, LOW: 1, MEDIUM: 2, HIGH: 0, CRITICAL: 0) +---------+------------------+----------+-------------------+---------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | +---------+------------------+----------+-------------------+---------------+ | openssl | CVE-2019-1549 | MEDIUM | 1.1.1c-r0 | 1.1.1d-r0 | + +------------------+ + + + | | CVE-2019-1563 | | | | + +------------------+----------+ + + | | CVE-2019-1547 | LOW | | | +---------+------------------+----------+-------------------+---------------+ Authentication $ trivy server --listen localhost:8080 --token dummy $ trivy client --remote http://localhost:8080 --token dummy alpine:3.10 Architecture","title":"Client/Server"},{"location":"docs/references/modes/client-server/#clientserver","text":"Trivy has client/server mode. Trivy server has vulnerability database and Trivy client doesn't have to download vulnerability database. It is useful if you want to scan images at multiple locations and do not want to download the database at every location.","title":"Client/Server"},{"location":"docs/references/modes/client-server/#server","text":"At first, you need to launch Trivy server. It downloads vulnerability database automatically and continue to fetch the latest DB in the background. $ trivy server --listen localhost:8080 2019-12-12T15:17:06.551+0200 INFO Need to update DB 2019-12-12T15:17:56.706+0200 INFO Reopening DB... 2019-12-12T15:17:56.707+0200 INFO Listening localhost:8080... If you want to accept a connection from outside, you have to specify 0.0.0.0 or your ip address, not localhost . $ trivy server --listen 0.0.0.0:8080","title":"Server"},{"location":"docs/references/modes/client-server/#client","text":"Then, specify the remote address. $ trivy client --remote http://localhost:8080 alpine:3.10 Result alpine:3.10 (alpine 3.10.2) =========================== Total: 3 (UNKNOWN: 0, LOW: 1, MEDIUM: 2, HIGH: 0, CRITICAL: 0) +---------+------------------+----------+-------------------+---------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | +---------+------------------+----------+-------------------+---------------+ | openssl | CVE-2019-1549 | MEDIUM | 1.1.1c-r0 | 1.1.1d-r0 | + +------------------+ + + + | | CVE-2019-1563 | | | | + +------------------+----------+ + + | | CVE-2019-1547 | LOW | | | +---------+------------------+----------+-------------------+---------------+","title":"Client"},{"location":"docs/references/modes/client-server/#authentication","text":"$ trivy server --listen localhost:8080 --token dummy $ trivy client --remote http://localhost:8080 --token dummy alpine:3.10","title":"Authentication"},{"location":"docs/references/modes/client-server/#architecture","text":"","title":"Architecture"},{"location":"docs/references/modes/standalone/","text":"Standalone trivy image , trivy filesystem , and trivy repo works as standalone mode. Image Filesystem Git Repository","title":"Standalone"},{"location":"docs/references/modes/standalone/#standalone","text":"trivy image , trivy filesystem , and trivy repo works as standalone mode.","title":"Standalone"},{"location":"docs/references/modes/standalone/#image","text":"","title":"Image"},{"location":"docs/references/modes/standalone/#filesystem","text":"","title":"Filesystem"},{"location":"docs/references/modes/standalone/#git-repository","text":"","title":"Git Repository"},{"location":"docs/sbom/","text":"SBOM Trivy currently supports the following SBOM formats. CycloneDX SPDX To generate SBOM, you can use the --format option for each subcommand such as image and fs . $ trivy image --format cyclonedx --output result.json alpine:3.15 In addition, you can use the trivy sbom subcommand. $ trivy sbom alpine:3.15 Result { \"bomFormat\": \"CycloneDX\", \"specVersion\": \"1.3\", \"serialNumber\": \"urn:uuid:2be5773d-7cd3-4b4b-90a5-e165474ddace\", \"version\": 1, \"metadata\": { \"timestamp\": \"2022-02-22T15:11:40.270597Z\", \"tools\": [ { \"vendor\": \"aquasecurity\", \"name\": \"trivy\", \"version\": \"dev\" } ], \"component\": { \"bom-ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"type\": \"container\", \"name\": \"alpine:3.15\", \"version\": \"\", \"purl\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SchemaVersion\", \"value\": \"2\" }, { \"name\": \"aquasecurity:trivy:ImageID\", \"value\": \"sha256:c059bfaa849c4d8e4aecaeb3a10c2d9b3d85f5165c66ad3a4d937758128c4d18\" }, { \"name\": \"aquasecurity:trivy:RepoDigest\", \"value\": \"alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300\" }, { \"name\": \"aquasecurity:trivy:DiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" }, { \"name\": \"aquasecurity:trivy:RepoTag\", \"value\": \"alpine:3.15\" } ] } }, \"components\": [ { \"bom-ref\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"type\": \"library\", \"name\": \"alpine-baselayout\", \"version\": \"3.2.0-r18\", \"licenses\": [ { \"expression\": \"GPL-2.0-only\" } ], \"purl\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SrcName\", \"value\": \"alpine-baselayout\" }, { \"name\": \"aquasecurity:trivy:SrcVersion\", \"value\": \"3.2.0-r18\" }, { \"name\": \"aquasecurity:trivy:LayerDigest\", \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\" }, { \"name\": \"aquasecurity:trivy:LayerDiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" } ] }, ...(snip)... { \"bom-ref\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\", \"type\": \"library\", \"name\": \"zlib\", \"version\": \"1.2.11-r3\", \"licenses\": [ { \"expression\": \"Zlib\" } ], \"purl\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SrcName\", \"value\": \"zlib\" }, { \"name\": \"aquasecurity:trivy:SrcVersion\", \"value\": \"1.2.11-r3\" }, { \"name\": \"aquasecurity:trivy:LayerDigest\", \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\" }, { \"name\": \"aquasecurity:trivy:LayerDiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" } ] }, { \"bom-ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\", \"type\": \"operating-system\", \"name\": \"alpine\", \"version\": \"3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:Type\", \"value\": \"alpine\" }, { \"name\": \"aquasecurity:trivy:Class\", \"value\": \"os-pkgs\" } ] } ], \"dependencies\": [ { \"ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\", \"dependsOn\": [ \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"pkg:apk/alpine/alpine-keys@2.4-r1?distro=3.15.0\", \"pkg:apk/alpine/apk-tools@2.12.7-r3?distro=3.15.0\", \"pkg:apk/alpine/busybox@1.34.1-r3?distro=3.15.0\", \"pkg:apk/alpine/ca-certificates-bundle@20191127-r7?distro=3.15.0\", \"pkg:apk/alpine/libc-utils@0.7.2-r3?distro=3.15.0\", \"pkg:apk/alpine/libcrypto1.1@1.1.1l-r7?distro=3.15.0\", \"pkg:apk/alpine/libretls@3.3.4-r2?distro=3.15.0\", \"pkg:apk/alpine/libssl1.1@1.1.1l-r7?distro=3.15.0\", \"pkg:apk/alpine/musl@1.2.2-r7?distro=3.15.0\", \"pkg:apk/alpine/musl-utils@1.2.2-r7?distro=3.15.0\", \"pkg:apk/alpine/scanelf@1.3.3-r0?distro=3.15.0\", \"pkg:apk/alpine/ssl_client@1.34.1-r3?distro=3.15.0\", \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\" ] }, { \"ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"dependsOn\": [ \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\" ] } ] } fs , repo and archive also work with sbom subcommand. # filesystem $ trivy sbom --artifact-type fs /path/to/project # repository $ trivy sbom --artifact-type repo github.com/aquasecurity/trivy-ci-test # container image archive $ trivy sbom --artifact-type archive alpine.tar","title":"Overview"},{"location":"docs/sbom/#sbom","text":"Trivy currently supports the following SBOM formats. CycloneDX SPDX To generate SBOM, you can use the --format option for each subcommand such as image and fs . $ trivy image --format cyclonedx --output result.json alpine:3.15 In addition, you can use the trivy sbom subcommand. $ trivy sbom alpine:3.15 Result { \"bomFormat\": \"CycloneDX\", \"specVersion\": \"1.3\", \"serialNumber\": \"urn:uuid:2be5773d-7cd3-4b4b-90a5-e165474ddace\", \"version\": 1, \"metadata\": { \"timestamp\": \"2022-02-22T15:11:40.270597Z\", \"tools\": [ { \"vendor\": \"aquasecurity\", \"name\": \"trivy\", \"version\": \"dev\" } ], \"component\": { \"bom-ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"type\": \"container\", \"name\": \"alpine:3.15\", \"version\": \"\", \"purl\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SchemaVersion\", \"value\": \"2\" }, { \"name\": \"aquasecurity:trivy:ImageID\", \"value\": \"sha256:c059bfaa849c4d8e4aecaeb3a10c2d9b3d85f5165c66ad3a4d937758128c4d18\" }, { \"name\": \"aquasecurity:trivy:RepoDigest\", \"value\": \"alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300\" }, { \"name\": \"aquasecurity:trivy:DiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" }, { \"name\": \"aquasecurity:trivy:RepoTag\", \"value\": \"alpine:3.15\" } ] } }, \"components\": [ { \"bom-ref\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"type\": \"library\", \"name\": \"alpine-baselayout\", \"version\": \"3.2.0-r18\", \"licenses\": [ { \"expression\": \"GPL-2.0-only\" } ], \"purl\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SrcName\", \"value\": \"alpine-baselayout\" }, { \"name\": \"aquasecurity:trivy:SrcVersion\", \"value\": \"3.2.0-r18\" }, { \"name\": \"aquasecurity:trivy:LayerDigest\", \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\" }, { \"name\": \"aquasecurity:trivy:LayerDiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" } ] }, ...(snip)... { \"bom-ref\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\", \"type\": \"library\", \"name\": \"zlib\", \"version\": \"1.2.11-r3\", \"licenses\": [ { \"expression\": \"Zlib\" } ], \"purl\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SrcName\", \"value\": \"zlib\" }, { \"name\": \"aquasecurity:trivy:SrcVersion\", \"value\": \"1.2.11-r3\" }, { \"name\": \"aquasecurity:trivy:LayerDigest\", \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\" }, { \"name\": \"aquasecurity:trivy:LayerDiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" } ] }, { \"bom-ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\", \"type\": \"operating-system\", \"name\": \"alpine\", \"version\": \"3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:Type\", \"value\": \"alpine\" }, { \"name\": \"aquasecurity:trivy:Class\", \"value\": \"os-pkgs\" } ] } ], \"dependencies\": [ { \"ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\", \"dependsOn\": [ \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"pkg:apk/alpine/alpine-keys@2.4-r1?distro=3.15.0\", \"pkg:apk/alpine/apk-tools@2.12.7-r3?distro=3.15.0\", \"pkg:apk/alpine/busybox@1.34.1-r3?distro=3.15.0\", \"pkg:apk/alpine/ca-certificates-bundle@20191127-r7?distro=3.15.0\", \"pkg:apk/alpine/libc-utils@0.7.2-r3?distro=3.15.0\", \"pkg:apk/alpine/libcrypto1.1@1.1.1l-r7?distro=3.15.0\", \"pkg:apk/alpine/libretls@3.3.4-r2?distro=3.15.0\", \"pkg:apk/alpine/libssl1.1@1.1.1l-r7?distro=3.15.0\", \"pkg:apk/alpine/musl@1.2.2-r7?distro=3.15.0\", \"pkg:apk/alpine/musl-utils@1.2.2-r7?distro=3.15.0\", \"pkg:apk/alpine/scanelf@1.3.3-r0?distro=3.15.0\", \"pkg:apk/alpine/ssl_client@1.34.1-r3?distro=3.15.0\", \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\" ] }, { \"ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"dependsOn\": [ \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\" ] } ] } fs , repo and archive also work with sbom subcommand. # filesystem $ trivy sbom --artifact-type fs /path/to/project # repository $ trivy sbom --artifact-type repo github.com/aquasecurity/trivy-ci-test # container image archive $ trivy sbom --artifact-type archive alpine.tar","title":"SBOM"},{"location":"docs/sbom/cyclonedx/","text":"CycloneDX Trivy generates JSON reports in the CycloneDX format. Note that XML format is not supported at the moment. You can use the regular subcommands (like image , fs and rootfs ) and specify cyclonedx with the --format option. $ trivy image --format cyclonedx --output result.json alpine:3.15 Result $ cat result.json | jq . { \"bomFormat\": \"CycloneDX\", \"specVersion\": \"1.4\", \"serialNumber\": \"urn:uuid:2be5773d-7cd3-4b4b-90a5-e165474ddace\", \"version\": 1, \"metadata\": { \"timestamp\": \"2022-02-22T15:11:40.270597Z\", \"tools\": [ { \"vendor\": \"aquasecurity\", \"name\": \"trivy\", \"version\": \"dev\" } ], \"component\": { \"bom-ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"type\": \"container\", \"name\": \"alpine:3.15\", \"version\": \"\", \"purl\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SchemaVersion\", \"value\": \"2\" }, { \"name\": \"aquasecurity:trivy:ImageID\", \"value\": \"sha256:c059bfaa849c4d8e4aecaeb3a10c2d9b3d85f5165c66ad3a4d937758128c4d18\" }, { \"name\": \"aquasecurity:trivy:RepoDigest\", \"value\": \"alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300\" }, { \"name\": \"aquasecurity:trivy:DiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" }, { \"name\": \"aquasecurity:trivy:RepoTag\", \"value\": \"alpine:3.15\" } ] } }, \"components\": [ { \"bom-ref\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"type\": \"library\", \"name\": \"alpine-baselayout\", \"version\": \"3.2.0-r18\", \"licenses\": [ { \"expression\": \"GPL-2.0-only\" } ], \"purl\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SrcName\", \"value\": \"alpine-baselayout\" }, { \"name\": \"aquasecurity:trivy:SrcVersion\", \"value\": \"3.2.0-r18\" }, { \"name\": \"aquasecurity:trivy:LayerDigest\", \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\" }, { \"name\": \"aquasecurity:trivy:LayerDiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" } ] }, ...(snip)... { \"bom-ref\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\", \"type\": \"library\", \"name\": \"zlib\", \"version\": \"1.2.11-r3\", \"licenses\": [ { \"expression\": \"Zlib\" } ], \"purl\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SrcName\", \"value\": \"zlib\" }, { \"name\": \"aquasecurity:trivy:SrcVersion\", \"value\": \"1.2.11-r3\" }, { \"name\": \"aquasecurity:trivy:LayerDigest\", \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\" }, { \"name\": \"aquasecurity:trivy:LayerDiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" } ] }, { \"bom-ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\", \"type\": \"operating-system\", \"name\": \"alpine\", \"version\": \"3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:Type\", \"value\": \"alpine\" }, { \"name\": \"aquasecurity:trivy:Class\", \"value\": \"os-pkgs\" } ] } ], \"dependencies\": [ { \"ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\", \"dependsOn\": [ \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"pkg:apk/alpine/alpine-keys@2.4-r1?distro=3.15.0\", \"pkg:apk/alpine/apk-tools@2.12.7-r3?distro=3.15.0\", \"pkg:apk/alpine/busybox@1.34.1-r3?distro=3.15.0\", \"pkg:apk/alpine/ca-certificates-bundle@20191127-r7?distro=3.15.0\", \"pkg:apk/alpine/libc-utils@0.7.2-r3?distro=3.15.0\", \"pkg:apk/alpine/libcrypto1.1@1.1.1l-r7?distro=3.15.0\", \"pkg:apk/alpine/libretls@3.3.4-r2?distro=3.15.0\", \"pkg:apk/alpine/libssl1.1@1.1.1l-r7?distro=3.15.0\", \"pkg:apk/alpine/musl@1.2.2-r7?distro=3.15.0\", \"pkg:apk/alpine/musl-utils@1.2.2-r7?distro=3.15.0\", \"pkg:apk/alpine/scanelf@1.3.3-r0?distro=3.15.0\", \"pkg:apk/alpine/ssl_client@1.34.1-r3?distro=3.15.0\", \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\" ] }, { \"ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"dependsOn\": [ \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\" ] } ], \"vulnerabilities\": [ { \"id\": \"CVE-2021-42386\", \"source\": { \"name\": \"alpine\", \"url\": \"https://secdb.alpinelinux.org/\" }, \"ratings\": [ { \"source\": { \"name\": \"nvd\" }, \"score\": 7.2, \"severity\": \"high\", \"method\": \"CVSSv31\", \"vector\": \"CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H\" }, { \"source\": { \"name\": \"nvd\" }, \"score\": 6.5, \"severity\": \"medium\", \"method\": \"CVSSv2\", \"vector\": \"AV:N/AC:L/Au:S/C:P/I:P/A:P\" }, { \"source\": { \"name\": \"redhat\" }, \"score\": 6.6, \"severity\": \"medium\", \"method\": \"CVSSv31\", \"vector\": \"CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H\" } ], \"cwes\": [ 416 ], \"description\": \"A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function\", \"advisories\": [ { \"url\": \"https://access.redhat.com/security/cve/CVE-2021-42386\" }, { \"url\": \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42386\" } ], \"published\": \"2021-11-15 21:15:00 +0000 UTC\", \"updated\": \"2022-01-04 17:14:00 +0000 UTC\", \"affects\": [ { \"ref\": \"pkg:apk/alpine/busybox@1.33.1-r3?distro=3.14.2\" }, { \"ref\": \"pkg:apk/alpine/ssl_client@1.33.1-r3?distro=3.14.2\" } ] } ] }","title":"CycloneDX"},{"location":"docs/sbom/cyclonedx/#cyclonedx","text":"Trivy generates JSON reports in the CycloneDX format. Note that XML format is not supported at the moment. You can use the regular subcommands (like image , fs and rootfs ) and specify cyclonedx with the --format option. $ trivy image --format cyclonedx --output result.json alpine:3.15 Result $ cat result.json | jq . { \"bomFormat\": \"CycloneDX\", \"specVersion\": \"1.4\", \"serialNumber\": \"urn:uuid:2be5773d-7cd3-4b4b-90a5-e165474ddace\", \"version\": 1, \"metadata\": { \"timestamp\": \"2022-02-22T15:11:40.270597Z\", \"tools\": [ { \"vendor\": \"aquasecurity\", \"name\": \"trivy\", \"version\": \"dev\" } ], \"component\": { \"bom-ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"type\": \"container\", \"name\": \"alpine:3.15\", \"version\": \"\", \"purl\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SchemaVersion\", \"value\": \"2\" }, { \"name\": \"aquasecurity:trivy:ImageID\", \"value\": \"sha256:c059bfaa849c4d8e4aecaeb3a10c2d9b3d85f5165c66ad3a4d937758128c4d18\" }, { \"name\": \"aquasecurity:trivy:RepoDigest\", \"value\": \"alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300\" }, { \"name\": \"aquasecurity:trivy:DiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" }, { \"name\": \"aquasecurity:trivy:RepoTag\", \"value\": \"alpine:3.15\" } ] } }, \"components\": [ { \"bom-ref\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"type\": \"library\", \"name\": \"alpine-baselayout\", \"version\": \"3.2.0-r18\", \"licenses\": [ { \"expression\": \"GPL-2.0-only\" } ], \"purl\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SrcName\", \"value\": \"alpine-baselayout\" }, { \"name\": \"aquasecurity:trivy:SrcVersion\", \"value\": \"3.2.0-r18\" }, { \"name\": \"aquasecurity:trivy:LayerDigest\", \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\" }, { \"name\": \"aquasecurity:trivy:LayerDiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" } ] }, ...(snip)... { \"bom-ref\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\", \"type\": \"library\", \"name\": \"zlib\", \"version\": \"1.2.11-r3\", \"licenses\": [ { \"expression\": \"Zlib\" } ], \"purl\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:SrcName\", \"value\": \"zlib\" }, { \"name\": \"aquasecurity:trivy:SrcVersion\", \"value\": \"1.2.11-r3\" }, { \"name\": \"aquasecurity:trivy:LayerDigest\", \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\" }, { \"name\": \"aquasecurity:trivy:LayerDiffID\", \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\" } ] }, { \"bom-ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\", \"type\": \"operating-system\", \"name\": \"alpine\", \"version\": \"3.15.0\", \"properties\": [ { \"name\": \"aquasecurity:trivy:Type\", \"value\": \"alpine\" }, { \"name\": \"aquasecurity:trivy:Class\", \"value\": \"os-pkgs\" } ] } ], \"dependencies\": [ { \"ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\", \"dependsOn\": [ \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\", \"pkg:apk/alpine/alpine-keys@2.4-r1?distro=3.15.0\", \"pkg:apk/alpine/apk-tools@2.12.7-r3?distro=3.15.0\", \"pkg:apk/alpine/busybox@1.34.1-r3?distro=3.15.0\", \"pkg:apk/alpine/ca-certificates-bundle@20191127-r7?distro=3.15.0\", \"pkg:apk/alpine/libc-utils@0.7.2-r3?distro=3.15.0\", \"pkg:apk/alpine/libcrypto1.1@1.1.1l-r7?distro=3.15.0\", \"pkg:apk/alpine/libretls@3.3.4-r2?distro=3.15.0\", \"pkg:apk/alpine/libssl1.1@1.1.1l-r7?distro=3.15.0\", \"pkg:apk/alpine/musl@1.2.2-r7?distro=3.15.0\", \"pkg:apk/alpine/musl-utils@1.2.2-r7?distro=3.15.0\", \"pkg:apk/alpine/scanelf@1.3.3-r0?distro=3.15.0\", \"pkg:apk/alpine/ssl_client@1.34.1-r3?distro=3.15.0\", \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\" ] }, { \"ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&arch=amd64\", \"dependsOn\": [ \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\" ] } ], \"vulnerabilities\": [ { \"id\": \"CVE-2021-42386\", \"source\": { \"name\": \"alpine\", \"url\": \"https://secdb.alpinelinux.org/\" }, \"ratings\": [ { \"source\": { \"name\": \"nvd\" }, \"score\": 7.2, \"severity\": \"high\", \"method\": \"CVSSv31\", \"vector\": \"CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H\" }, { \"source\": { \"name\": \"nvd\" }, \"score\": 6.5, \"severity\": \"medium\", \"method\": \"CVSSv2\", \"vector\": \"AV:N/AC:L/Au:S/C:P/I:P/A:P\" }, { \"source\": { \"name\": \"redhat\" }, \"score\": 6.6, \"severity\": \"medium\", \"method\": \"CVSSv31\", \"vector\": \"CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H\" } ], \"cwes\": [ 416 ], \"description\": \"A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function\", \"advisories\": [ { \"url\": \"https://access.redhat.com/security/cve/CVE-2021-42386\" }, { \"url\": \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42386\" } ], \"published\": \"2021-11-15 21:15:00 +0000 UTC\", \"updated\": \"2022-01-04 17:14:00 +0000 UTC\", \"affects\": [ { \"ref\": \"pkg:apk/alpine/busybox@1.33.1-r3?distro=3.14.2\" }, { \"ref\": \"pkg:apk/alpine/ssl_client@1.33.1-r3?distro=3.14.2\" } ] } ] }","title":"CycloneDX"},{"location":"docs/sbom/spdx/","text":"SPDX Trivy generates reports in the SPDX format. You can use the regular subcommands (like image , fs and rootfs ) and specify spdx with the --format option. $ trivy image --format spdx --output result.spdx alpine:3.15 Result $ cat result.spdx SPDXVersion: SPDX-2.2 DataLicense: CC0-1.0 SPDXID: SPDXRef-DOCUMENT DocumentName: alpine:3.15 DocumentNamespace: http://aquasecurity.github.io/trivy/container_image/alpine:3.15-bebf6b19-a94c-4e2c-af44-065f63923f48 Creator: Organization: aquasecurity Creator: Tool: trivy Created: 2022-04-28T07:32:57.142806Z ##### Package: zlib PackageName: zlib SPDXID: SPDXRef-12bc938ac028a5e1 PackageVersion: 1.2.12-r0 FilesAnalyzed: false PackageLicenseConcluded: Zlib PackageLicenseDeclared: Zlib ##### Package: apk-tools PackageName: apk-tools SPDXID: SPDXRef-26c274652190d87f PackageVersion: 2.12.7-r3 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only ##### Package: libretls PackageName: libretls SPDXID: SPDXRef-2b021966d19a8211 PackageVersion: 3.3.4-r3 FilesAnalyzed: false PackageLicenseConcluded: ISC AND (BSD-3-Clause OR MIT) PackageLicenseDeclared: ISC AND (BSD-3-Clause OR MIT) ##### Package: busybox PackageName: busybox SPDXID: SPDXRef-317ce3476703f20d PackageVersion: 1.34.1-r5 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only ##### Package: libcrypto1.1 PackageName: libcrypto1.1 SPDXID: SPDXRef-34f407fb4dbd67f4 PackageVersion: 1.1.1n-r0 FilesAnalyzed: false PackageLicenseConcluded: OpenSSL PackageLicenseDeclared: OpenSSL ##### Package: libc-utils PackageName: libc-utils SPDXID: SPDXRef-4bbc1cb449d54083 PackageVersion: 0.7.2-r3 FilesAnalyzed: false PackageLicenseConcluded: BSD-2-Clause AND BSD-3-Clause PackageLicenseDeclared: BSD-2-Clause AND BSD-3-Clause ##### Package: alpine-keys PackageName: alpine-keys SPDXID: SPDXRef-a3bdd174be1456b6 PackageVersion: 2.4-r1 FilesAnalyzed: false PackageLicenseConcluded: MIT PackageLicenseDeclared: MIT ##### Package: ca-certificates-bundle PackageName: ca-certificates-bundle SPDXID: SPDXRef-ac6472ba26fb991c PackageVersion: 20211220-r0 FilesAnalyzed: false PackageLicenseConcluded: MPL-2.0 AND MIT PackageLicenseDeclared: MPL-2.0 AND MIT ##### Package: libssl1.1 PackageName: libssl1.1 SPDXID: SPDXRef-b2d1b1d70fe90f7d PackageVersion: 1.1.1n-r0 FilesAnalyzed: false PackageLicenseConcluded: OpenSSL PackageLicenseDeclared: OpenSSL ##### Package: scanelf PackageName: scanelf SPDXID: SPDXRef-c617077ba6649520 PackageVersion: 1.3.3-r0 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only ##### Package: musl PackageName: musl SPDXID: SPDXRef-ca80b810029cde0e PackageVersion: 1.2.2-r7 FilesAnalyzed: false PackageLicenseConcluded: MIT PackageLicenseDeclared: MIT ##### Package: alpine-baselayout PackageName: alpine-baselayout SPDXID: SPDXRef-d782e64751ba9faa PackageVersion: 3.2.0-r18 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only ##### Package: musl-utils PackageName: musl-utils SPDXID: SPDXRef-e5e8a237f6162e22 PackageVersion: 1.2.2-r7 FilesAnalyzed: false PackageLicenseConcluded: MIT BSD GPL2+ PackageLicenseDeclared: MIT BSD GPL2+ ##### Package: ssl_client PackageName: ssl_client SPDXID: SPDXRef-fdf0ce84f6337be4 PackageVersion: 1.34.1-r5 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only SPDX-JSON format is also supported by using spdx-json with the --format option. $ trivy image --format spdx-json --output result.spdx.json alpine:3.15 Result $ cat result.spdx.json | jq . { \"SPDXID\": \"SPDXRef-DOCUMENT\", \"creationInfo\": { \"created\": \"2022-04-28T08:16:55.328255Z\", \"creators\": [ \"Tool: trivy\", \"Organization: aquasecurity\" ] }, \"dataLicense\": \"CC0-1.0\", \"documentNamespace\": \"http://aquasecurity.github.io/trivy/container_image/alpine:3.15-d9549e3a-a4c5-4ee3-8bde-8c78d451fbe7\", \"name\": \"alpine:3.15\", \"packages\": [ { \"SPDXID\": \"SPDXRef-12bc938ac028a5e1\", \"filesAnalyzed\": false, \"licenseConcluded\": \"Zlib\", \"licenseDeclared\": \"Zlib\", \"name\": \"zlib\", \"versionInfo\": \"1.2.12-r0\" }, { \"SPDXID\": \"SPDXRef-26c274652190d87f\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"apk-tools\", \"versionInfo\": \"2.12.7-r3\" }, { \"SPDXID\": \"SPDXRef-2b021966d19a8211\", \"filesAnalyzed\": false, \"licenseConcluded\": \"ISC AND (BSD-3-Clause OR MIT)\", \"licenseDeclared\": \"ISC AND (BSD-3-Clause OR MIT)\", \"name\": \"libretls\", \"versionInfo\": \"3.3.4-r3\" }, { \"SPDXID\": \"SPDXRef-317ce3476703f20d\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"busybox\", \"versionInfo\": \"1.34.1-r5\" }, { \"SPDXID\": \"SPDXRef-34f407fb4dbd67f4\", \"filesAnalyzed\": false, \"licenseConcluded\": \"OpenSSL\", \"licenseDeclared\": \"OpenSSL\", \"name\": \"libcrypto1.1\", \"versionInfo\": \"1.1.1n-r0\" }, { \"SPDXID\": \"SPDXRef-4bbc1cb449d54083\", \"filesAnalyzed\": false, \"licenseConcluded\": \"BSD-2-Clause AND BSD-3-Clause\", \"licenseDeclared\": \"BSD-2-Clause AND BSD-3-Clause\", \"name\": \"libc-utils\", \"versionInfo\": \"0.7.2-r3\" }, { \"SPDXID\": \"SPDXRef-a3bdd174be1456b6\", \"filesAnalyzed\": false, \"licenseConcluded\": \"MIT\", \"licenseDeclared\": \"MIT\", \"name\": \"alpine-keys\", \"versionInfo\": \"2.4-r1\" }, { \"SPDXID\": \"SPDXRef-ac6472ba26fb991c\", \"filesAnalyzed\": false, \"licenseConcluded\": \"MPL-2.0 AND MIT\", \"licenseDeclared\": \"MPL-2.0 AND MIT\", \"name\": \"ca-certificates-bundle\", \"versionInfo\": \"20211220-r0\" }, { \"SPDXID\": \"SPDXRef-b2d1b1d70fe90f7d\", \"filesAnalyzed\": false, \"licenseConcluded\": \"OpenSSL\", \"licenseDeclared\": \"OpenSSL\", \"name\": \"libssl1.1\", \"versionInfo\": \"1.1.1n-r0\" }, { \"SPDXID\": \"SPDXRef-c617077ba6649520\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"scanelf\", \"versionInfo\": \"1.3.3-r0\" }, { \"SPDXID\": \"SPDXRef-ca80b810029cde0e\", \"filesAnalyzed\": false, \"licenseConcluded\": \"MIT\", \"licenseDeclared\": \"MIT\", \"name\": \"musl\", \"versionInfo\": \"1.2.2-r7\" }, { \"SPDXID\": \"SPDXRef-d782e64751ba9faa\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"alpine-baselayout\", \"versionInfo\": \"3.2.0-r18\" }, { \"SPDXID\": \"SPDXRef-e5e8a237f6162e22\", \"filesAnalyzed\": false, \"licenseConcluded\": \"MIT BSD GPL2+\", \"licenseDeclared\": \"MIT BSD GPL2+\", \"name\": \"musl-utils\", \"versionInfo\": \"1.2.2-r7\" }, { \"SPDXID\": \"SPDXRef-fdf0ce84f6337be4\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"ssl_client\", \"versionInfo\": \"1.34.1-r5\" } ], \"spdxVersion\": \"SPDX-2.2\" }","title":"SPDX"},{"location":"docs/sbom/spdx/#spdx","text":"Trivy generates reports in the SPDX format. You can use the regular subcommands (like image , fs and rootfs ) and specify spdx with the --format option. $ trivy image --format spdx --output result.spdx alpine:3.15 Result $ cat result.spdx SPDXVersion: SPDX-2.2 DataLicense: CC0-1.0 SPDXID: SPDXRef-DOCUMENT DocumentName: alpine:3.15 DocumentNamespace: http://aquasecurity.github.io/trivy/container_image/alpine:3.15-bebf6b19-a94c-4e2c-af44-065f63923f48 Creator: Organization: aquasecurity Creator: Tool: trivy Created: 2022-04-28T07:32:57.142806Z ##### Package: zlib PackageName: zlib SPDXID: SPDXRef-12bc938ac028a5e1 PackageVersion: 1.2.12-r0 FilesAnalyzed: false PackageLicenseConcluded: Zlib PackageLicenseDeclared: Zlib ##### Package: apk-tools PackageName: apk-tools SPDXID: SPDXRef-26c274652190d87f PackageVersion: 2.12.7-r3 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only ##### Package: libretls PackageName: libretls SPDXID: SPDXRef-2b021966d19a8211 PackageVersion: 3.3.4-r3 FilesAnalyzed: false PackageLicenseConcluded: ISC AND (BSD-3-Clause OR MIT) PackageLicenseDeclared: ISC AND (BSD-3-Clause OR MIT) ##### Package: busybox PackageName: busybox SPDXID: SPDXRef-317ce3476703f20d PackageVersion: 1.34.1-r5 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only ##### Package: libcrypto1.1 PackageName: libcrypto1.1 SPDXID: SPDXRef-34f407fb4dbd67f4 PackageVersion: 1.1.1n-r0 FilesAnalyzed: false PackageLicenseConcluded: OpenSSL PackageLicenseDeclared: OpenSSL ##### Package: libc-utils PackageName: libc-utils SPDXID: SPDXRef-4bbc1cb449d54083 PackageVersion: 0.7.2-r3 FilesAnalyzed: false PackageLicenseConcluded: BSD-2-Clause AND BSD-3-Clause PackageLicenseDeclared: BSD-2-Clause AND BSD-3-Clause ##### Package: alpine-keys PackageName: alpine-keys SPDXID: SPDXRef-a3bdd174be1456b6 PackageVersion: 2.4-r1 FilesAnalyzed: false PackageLicenseConcluded: MIT PackageLicenseDeclared: MIT ##### Package: ca-certificates-bundle PackageName: ca-certificates-bundle SPDXID: SPDXRef-ac6472ba26fb991c PackageVersion: 20211220-r0 FilesAnalyzed: false PackageLicenseConcluded: MPL-2.0 AND MIT PackageLicenseDeclared: MPL-2.0 AND MIT ##### Package: libssl1.1 PackageName: libssl1.1 SPDXID: SPDXRef-b2d1b1d70fe90f7d PackageVersion: 1.1.1n-r0 FilesAnalyzed: false PackageLicenseConcluded: OpenSSL PackageLicenseDeclared: OpenSSL ##### Package: scanelf PackageName: scanelf SPDXID: SPDXRef-c617077ba6649520 PackageVersion: 1.3.3-r0 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only ##### Package: musl PackageName: musl SPDXID: SPDXRef-ca80b810029cde0e PackageVersion: 1.2.2-r7 FilesAnalyzed: false PackageLicenseConcluded: MIT PackageLicenseDeclared: MIT ##### Package: alpine-baselayout PackageName: alpine-baselayout SPDXID: SPDXRef-d782e64751ba9faa PackageVersion: 3.2.0-r18 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only ##### Package: musl-utils PackageName: musl-utils SPDXID: SPDXRef-e5e8a237f6162e22 PackageVersion: 1.2.2-r7 FilesAnalyzed: false PackageLicenseConcluded: MIT BSD GPL2+ PackageLicenseDeclared: MIT BSD GPL2+ ##### Package: ssl_client PackageName: ssl_client SPDXID: SPDXRef-fdf0ce84f6337be4 PackageVersion: 1.34.1-r5 FilesAnalyzed: false PackageLicenseConcluded: GPL-2.0-only PackageLicenseDeclared: GPL-2.0-only SPDX-JSON format is also supported by using spdx-json with the --format option. $ trivy image --format spdx-json --output result.spdx.json alpine:3.15 Result $ cat result.spdx.json | jq . { \"SPDXID\": \"SPDXRef-DOCUMENT\", \"creationInfo\": { \"created\": \"2022-04-28T08:16:55.328255Z\", \"creators\": [ \"Tool: trivy\", \"Organization: aquasecurity\" ] }, \"dataLicense\": \"CC0-1.0\", \"documentNamespace\": \"http://aquasecurity.github.io/trivy/container_image/alpine:3.15-d9549e3a-a4c5-4ee3-8bde-8c78d451fbe7\", \"name\": \"alpine:3.15\", \"packages\": [ { \"SPDXID\": \"SPDXRef-12bc938ac028a5e1\", \"filesAnalyzed\": false, \"licenseConcluded\": \"Zlib\", \"licenseDeclared\": \"Zlib\", \"name\": \"zlib\", \"versionInfo\": \"1.2.12-r0\" }, { \"SPDXID\": \"SPDXRef-26c274652190d87f\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"apk-tools\", \"versionInfo\": \"2.12.7-r3\" }, { \"SPDXID\": \"SPDXRef-2b021966d19a8211\", \"filesAnalyzed\": false, \"licenseConcluded\": \"ISC AND (BSD-3-Clause OR MIT)\", \"licenseDeclared\": \"ISC AND (BSD-3-Clause OR MIT)\", \"name\": \"libretls\", \"versionInfo\": \"3.3.4-r3\" }, { \"SPDXID\": \"SPDXRef-317ce3476703f20d\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"busybox\", \"versionInfo\": \"1.34.1-r5\" }, { \"SPDXID\": \"SPDXRef-34f407fb4dbd67f4\", \"filesAnalyzed\": false, \"licenseConcluded\": \"OpenSSL\", \"licenseDeclared\": \"OpenSSL\", \"name\": \"libcrypto1.1\", \"versionInfo\": \"1.1.1n-r0\" }, { \"SPDXID\": \"SPDXRef-4bbc1cb449d54083\", \"filesAnalyzed\": false, \"licenseConcluded\": \"BSD-2-Clause AND BSD-3-Clause\", \"licenseDeclared\": \"BSD-2-Clause AND BSD-3-Clause\", \"name\": \"libc-utils\", \"versionInfo\": \"0.7.2-r3\" }, { \"SPDXID\": \"SPDXRef-a3bdd174be1456b6\", \"filesAnalyzed\": false, \"licenseConcluded\": \"MIT\", \"licenseDeclared\": \"MIT\", \"name\": \"alpine-keys\", \"versionInfo\": \"2.4-r1\" }, { \"SPDXID\": \"SPDXRef-ac6472ba26fb991c\", \"filesAnalyzed\": false, \"licenseConcluded\": \"MPL-2.0 AND MIT\", \"licenseDeclared\": \"MPL-2.0 AND MIT\", \"name\": \"ca-certificates-bundle\", \"versionInfo\": \"20211220-r0\" }, { \"SPDXID\": \"SPDXRef-b2d1b1d70fe90f7d\", \"filesAnalyzed\": false, \"licenseConcluded\": \"OpenSSL\", \"licenseDeclared\": \"OpenSSL\", \"name\": \"libssl1.1\", \"versionInfo\": \"1.1.1n-r0\" }, { \"SPDXID\": \"SPDXRef-c617077ba6649520\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"scanelf\", \"versionInfo\": \"1.3.3-r0\" }, { \"SPDXID\": \"SPDXRef-ca80b810029cde0e\", \"filesAnalyzed\": false, \"licenseConcluded\": \"MIT\", \"licenseDeclared\": \"MIT\", \"name\": \"musl\", \"versionInfo\": \"1.2.2-r7\" }, { \"SPDXID\": \"SPDXRef-d782e64751ba9faa\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"alpine-baselayout\", \"versionInfo\": \"3.2.0-r18\" }, { \"SPDXID\": \"SPDXRef-e5e8a237f6162e22\", \"filesAnalyzed\": false, \"licenseConcluded\": \"MIT BSD GPL2+\", \"licenseDeclared\": \"MIT BSD GPL2+\", \"name\": \"musl-utils\", \"versionInfo\": \"1.2.2-r7\" }, { \"SPDXID\": \"SPDXRef-fdf0ce84f6337be4\", \"filesAnalyzed\": false, \"licenseConcluded\": \"GPL-2.0-only\", \"licenseDeclared\": \"GPL-2.0-only\", \"name\": \"ssl_client\", \"versionInfo\": \"1.34.1-r5\" } ], \"spdxVersion\": \"SPDX-2.2\" }","title":"SPDX"},{"location":"docs/secret/configuration/","text":"Configuration Trivy tries to load trivy-secret.yaml in the current directory by default. If the file doesn't exist, only built-in rules are used. You can customize the config file path via the --secret-config flag. You can see the example here . Custom Rules Trivy allows defining custom rules. You can see an example. rules : - id : rule1 category : general title : Generic Rule severity : HIGH path : .*\\.sh keywords : - secret regex : (?i)(?P<key>(secret))(=|:).{0,5}['\"](?P<secret>[0-9a-zA-Z\\-_=]{8,64})['\"] secret-group-name : secret allow-rules : - id : skip-text description : skip text files path : .*\\.txt id (required) Unique identifier for this rule. category (required) String used for metadata and reporting purposes. title (required) Short human-readable title of the rule. severity (required) How critical this rule is. Allowed values: CRITICAL HIGH MEDIUM LOW regex (required) Golang regular expression used to detect secrets. path (optional) Golang regular expression used to match paths. keywords (optional, recommended) Keywords are used for pre-regex check filtering. Rules that contain keywords will perform a quick string compare check to make sure the keyword(s) are in the content being scanned. Ideally these values should either be part of the identifier or unique strings specific to the rule's regex. It is recommended to define for better performance. allow-rules (optional) Allow rules for a single rule to reduce false positives with known secrets. The details are below. Allow Rules If the detected secret is matched with the specified regex , then that secret will be skipped and not detected. The same logic applies for path . allow-rules can be defined globally and per each rule. The fields are the same. rules : - id : rule1 category : general title : Generic Rule severity : HIGH regex : (?i)(?P<key>(secret))(=|:).{0,5}['\"](?P<secret>[0-9a-zA-Z\\-_=]{8,64})['\"] allow-rules : - id : skip-text description : skip text files path : .*\\.txt allow-rules : - id : social-security-number description : skip social security number regex : 219-09-9999 id (required) Unique identifier for this allow rule. description (optional) Short human-readable description of this allow rule. regex (optional) Golang regular expression used to allow detected secrets. regex or path must be specified. path (optional) Golang regular expression used to allow matched paths. regex or path must be specified. Enable Rules Trivy provides plenty of out-of-box rules and allow rules, but you may not need all of them. In that case, enable-builin-rules will be helpful. If you just need AWS secret detection, you can enable only relevant rules as shown below. It specifies AWS-related rule IDs in enable-builin-rules . All other rules are disabled, so the scanning will be much faster. We would strongly recommend using this option if you don't need all rules. You can see a full list of built-in rule IDs and [built-in allow rule IDs][builtin-allow]. enable-builtin-rules : - aws-access-key-id - aws-account-id - aws-secret-access-key Disable Rules Trivy offers built-in rules and allow rules, but you may want to disable some of them. For example, you don't use Slack, so Slack doesn't have to be scanned. You can specify the Slack rule IDs, slack-access-token and slack-web-hook in disable-rules so that those rules will be disabled for less false positives. You should specify either enable-builin-rules or disable-rules . If they both are specified, disable-rules takes precedence. In case github-pat is specified in enable-builin-rules and disable-rules , it will be disabled. In addition, there are some allow rules. Markdown files are ignored by default, but you may want to scan markdown files as well. You can disable the allow rule by adding markdown to disable-allow-rules . You can see a full list of built-in rule IDs and [built-in allow rule IDs][builtin-allow]. disable-rules : - slack-access-token - slack-web-hook disable-allow-rules : - markdown","title":"Configuration"},{"location":"docs/secret/configuration/#configuration","text":"Trivy tries to load trivy-secret.yaml in the current directory by default. If the file doesn't exist, only built-in rules are used. You can customize the config file path via the --secret-config flag. You can see the example here .","title":"Configuration"},{"location":"docs/secret/configuration/#custom-rules","text":"Trivy allows defining custom rules. You can see an example. rules : - id : rule1 category : general title : Generic Rule severity : HIGH path : .*\\.sh keywords : - secret regex : (?i)(?P<key>(secret))(=|:).{0,5}['\"](?P<secret>[0-9a-zA-Z\\-_=]{8,64})['\"] secret-group-name : secret allow-rules : - id : skip-text description : skip text files path : .*\\.txt id (required) Unique identifier for this rule. category (required) String used for metadata and reporting purposes. title (required) Short human-readable title of the rule. severity (required) How critical this rule is. Allowed values: CRITICAL HIGH MEDIUM LOW regex (required) Golang regular expression used to detect secrets. path (optional) Golang regular expression used to match paths. keywords (optional, recommended) Keywords are used for pre-regex check filtering. Rules that contain keywords will perform a quick string compare check to make sure the keyword(s) are in the content being scanned. Ideally these values should either be part of the identifier or unique strings specific to the rule's regex. It is recommended to define for better performance. allow-rules (optional) Allow rules for a single rule to reduce false positives with known secrets. The details are below.","title":"Custom Rules"},{"location":"docs/secret/configuration/#allow-rules","text":"If the detected secret is matched with the specified regex , then that secret will be skipped and not detected. The same logic applies for path . allow-rules can be defined globally and per each rule. The fields are the same. rules : - id : rule1 category : general title : Generic Rule severity : HIGH regex : (?i)(?P<key>(secret))(=|:).{0,5}['\"](?P<secret>[0-9a-zA-Z\\-_=]{8,64})['\"] allow-rules : - id : skip-text description : skip text files path : .*\\.txt allow-rules : - id : social-security-number description : skip social security number regex : 219-09-9999 id (required) Unique identifier for this allow rule. description (optional) Short human-readable description of this allow rule. regex (optional) Golang regular expression used to allow detected secrets. regex or path must be specified. path (optional) Golang regular expression used to allow matched paths. regex or path must be specified.","title":"Allow Rules"},{"location":"docs/secret/configuration/#enable-rules","text":"Trivy provides plenty of out-of-box rules and allow rules, but you may not need all of them. In that case, enable-builin-rules will be helpful. If you just need AWS secret detection, you can enable only relevant rules as shown below. It specifies AWS-related rule IDs in enable-builin-rules . All other rules are disabled, so the scanning will be much faster. We would strongly recommend using this option if you don't need all rules. You can see a full list of built-in rule IDs and [built-in allow rule IDs][builtin-allow]. enable-builtin-rules : - aws-access-key-id - aws-account-id - aws-secret-access-key","title":"Enable Rules"},{"location":"docs/secret/configuration/#disable-rules","text":"Trivy offers built-in rules and allow rules, but you may want to disable some of them. For example, you don't use Slack, so Slack doesn't have to be scanned. You can specify the Slack rule IDs, slack-access-token and slack-web-hook in disable-rules so that those rules will be disabled for less false positives. You should specify either enable-builin-rules or disable-rules . If they both are specified, disable-rules takes precedence. In case github-pat is specified in enable-builin-rules and disable-rules , it will be disabled. In addition, there are some allow rules. Markdown files are ignored by default, but you may want to scan markdown files as well. You can disable the allow rule by adding markdown to disable-allow-rules . You can see a full list of built-in rule IDs and [built-in allow rule IDs][builtin-allow]. disable-rules : - slack-access-token - slack-web-hook disable-allow-rules : - markdown","title":"Disable Rules"},{"location":"docs/secret/examples/","text":"Examples Also see quick start . Skip Directories Trivy traversals directories and scans all files except those matching the built-in allow rules by default. If your have a lot of files in your container image or project, the scanning takes time. To make it faster, you can skip traversal in the specific directory. Also, it would be helpful if your project contains secrets and certificates for testing. $ trivy image --skip-dirs /var/lib --skip-dirs /var/log YOUR_IMAGE $ trivy fs --skip-dirs ./my-test-dir --skip-dirs ./my-testing-cert/ /path/to/your_project --skip-fles also works similarly. Filter by severity Use --severity option. $ trivy fs --severity CRITICAL ./ app/secret.sh ( secrets ) ======================= Total: 1 ( CRITICAL: 1 ) +----------+-------------------+----------+---------+--------------------------------+ | CATEGORY | DESCRIPTION | SEVERITY | LINE NO | MATCH | +----------+-------------------+----------+---------+--------------------------------+ | AWS | AWS Access Key ID | CRITICAL | 10 | export AWS_ACCESS_KEY_ID = ***** | +----------+-------------------+----------+---------+--------------------------------+ Disable secret scanning If you need vulnerability scanning only, you can disable secret scanning via the --security-checks flag. $ trivy image --security-checks vuln alpine:3.15 With configuration file trivy-secret.yaml in the working directory is loaded by default. $ cat trivy-secret.yaml rules : - id : rule1 category : general title : Generic Rule severity : HIGH regex : (?i)(?P<key>(secret))(=|:).{0,5}['\"](?P<secret>[0-9a-zA-Z\\-_=]{8,64})['\"] allow-rules : - id : social-security-number description : skip social security number regex : 219-09-9999 - id : log-dir description : skip log directory path : ^\\/var\\/log\\/ disable-rules : - slack-access-token - slack-web-hook disable-allow-rules : - markdown # The following command automatically loads the above configuration. $ trivy image YOUR_IMAGE Also, you can customize the config file path via --secret-config . $ cat ./secret-config/trivy.yaml rules : - id : rule1 category : general title : Generic Rule severity : HIGH regex : (?i)(?P<key>(secret))(=|:).{0,5}['\"](?P<secret>[0-9a-zA-Z\\-_=]{8,64})['\"] allow-rules : - id : skip-text description : skip text files path : .*\\.txt enable-builtin-rules : - aws-access-key-id - aws-account-id - aws-secret-access-key disable-allow-rules : - usr-dirs # Pass the above config with `--secret-config`. $ trivy fs --secret-config ./secret-config/trivy.yaml /path/to/your_project","title":"Examples"},{"location":"docs/secret/examples/#examples","text":"Also see quick start .","title":"Examples"},{"location":"docs/secret/examples/#skip-directories","text":"Trivy traversals directories and scans all files except those matching the built-in allow rules by default. If your have a lot of files in your container image or project, the scanning takes time. To make it faster, you can skip traversal in the specific directory. Also, it would be helpful if your project contains secrets and certificates for testing. $ trivy image --skip-dirs /var/lib --skip-dirs /var/log YOUR_IMAGE $ trivy fs --skip-dirs ./my-test-dir --skip-dirs ./my-testing-cert/ /path/to/your_project --skip-fles also works similarly.","title":"Skip Directories"},{"location":"docs/secret/examples/#filter-by-severity","text":"Use --severity option. $ trivy fs --severity CRITICAL ./ app/secret.sh ( secrets ) ======================= Total: 1 ( CRITICAL: 1 ) +----------+-------------------+----------+---------+--------------------------------+ | CATEGORY | DESCRIPTION | SEVERITY | LINE NO | MATCH | +----------+-------------------+----------+---------+--------------------------------+ | AWS | AWS Access Key ID | CRITICAL | 10 | export AWS_ACCESS_KEY_ID = ***** | +----------+-------------------+----------+---------+--------------------------------+","title":"Filter by severity"},{"location":"docs/secret/examples/#disable-secret-scanning","text":"If you need vulnerability scanning only, you can disable secret scanning via the --security-checks flag. $ trivy image --security-checks vuln alpine:3.15","title":"Disable secret scanning"},{"location":"docs/secret/examples/#with-configuration-file","text":"trivy-secret.yaml in the working directory is loaded by default. $ cat trivy-secret.yaml rules : - id : rule1 category : general title : Generic Rule severity : HIGH regex : (?i)(?P<key>(secret))(=|:).{0,5}['\"](?P<secret>[0-9a-zA-Z\\-_=]{8,64})['\"] allow-rules : - id : social-security-number description : skip social security number regex : 219-09-9999 - id : log-dir description : skip log directory path : ^\\/var\\/log\\/ disable-rules : - slack-access-token - slack-web-hook disable-allow-rules : - markdown # The following command automatically loads the above configuration. $ trivy image YOUR_IMAGE Also, you can customize the config file path via --secret-config . $ cat ./secret-config/trivy.yaml rules : - id : rule1 category : general title : Generic Rule severity : HIGH regex : (?i)(?P<key>(secret))(=|:).{0,5}['\"](?P<secret>[0-9a-zA-Z\\-_=]{8,64})['\"] allow-rules : - id : skip-text description : skip text files path : .*\\.txt enable-builtin-rules : - aws-access-key-id - aws-account-id - aws-secret-access-key disable-allow-rules : - usr-dirs # Pass the above config with `--secret-config`. $ trivy fs --secret-config ./secret-config/trivy.yaml /path/to/your_project","title":"With configuration file"},{"location":"docs/secret/scanning/","text":"Secret Scanning Trivy scans any container image, filesystem and git repository to detect exposed secrets like passwords, api keys, and tokens. Secret scanning is enabled by default. Trivy will scan every plaintext file, according to builtin rules or configuration. There are plenty of builtin rules: AWS access key GCP service account GitHub personal access token GitLab personal access token Slack access token etc. You can see a full list of built-in rules and built-in allow rules . Tip If your secret is not detected properly, please make sure that your file including the secret is not in the allowed paths . You can disable allow rules via disable-allow-rules . Quick start This section shows how to scan secrets in container image and filesystem. Other subcommands should be the same. Container image Specify an image name. $ trivy image myimage:1.0.0 2022 -04-21T18:56:44.099+0300 INFO Detected OS: alpine 2022 -04-21T18:56:44.099+0300 INFO Detecting Alpine vulnerabilities... 2022 -04-21T18:56:44.101+0300 INFO Number of language-specific files: 0 myimage:1.0.0 ( alpine 3 .15.0 ) ============================= Total: 6 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 2 ) +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | busybox | CVE-2022-28391 | CRITICAL | 1 .34.1-r3 | 1 .34.1-r5 | CVE-2022-28391 affecting | | | | | | | package busybox 1 .35.0 | | | | | | | -->avd.aquasec.com/nvd/cve-2022-28391 | +--------------+------------------ | | -------------------+---------------+---------------------------------------+ | ssl_client | CVE-2022-28391 | | 1 .34.1-r3 | 1 .34.1-r5 | CVE-2022-28391 affecting | | | | | | | package busybox 1 .35.0 | | | | | | | -->avd.aquasec.com/nvd/cve-2022-28391 | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ app/secret.sh ( secrets ) ======================= Total: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 1 ) +----------+-------------------+----------+---------+--------------------------------+ | CATEGORY | DESCRIPTION | SEVERITY | LINE NO | MATCH | +----------+-------------------+----------+---------+--------------------------------+ | AWS | AWS Access Key ID | CRITICAL | 10 | export AWS_ACCESS_KEY_ID = ***** | +----------+-------------------+----------+---------+--------------------------------+ Tip Trivy tries to detect a base image and skip those layers for secret scanning. A base image usually contains a lot of files and makes secret scanning much slower. If a secret is not detected properly, you can see base layers with the --debug flag. Filesystem $ trivy fs /path/to/your_project ... ( snip ) ... certs/key.pem ( secrets ) ======================== Total: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 1 , CRITICAL: 0 ) +----------------------+------------------------+----------+---------+---------------------------------+ | CATEGORY | DESCRIPTION | SEVERITY | LINE NO | MATCH | +----------------------+------------------------+----------+---------+---------------------------------+ | AsymmetricPrivateKey | Asymmetric Private Key | HIGH | 1 | -----BEGIN RSA PRIVATE KEY----- | +----------------------+------------------------+----------+---------+---------------------------------+ Tip Your project may have some secrets for testing. You can skip them with --skip-dirs or --skip-files . We would recommend specifying these options so that the secret scanning can be faster if those files don't need to be scanned. Also, you can specify paths to be allowed in a configuration file. See the detail here . Configuration Trivy has a set of builtin rules for secret scanning, which can be extended or modified by a configuration file. If you don't need secret scanning, you can disable it via the --security-checks flag. $ trivy image --security-checks vuln alpine:3.15 Recommendation We would recommend specifying --skip-dirs for faster secret scanning. In container image scanning, Trivy walks the file tree rooted / and scans all the files other than built-in allowed paths . It will take a while if your image contains a lot of files even though Trivy tries to avoid scanning layers from a base image. If you want to make scanning faster, --skip-dirs and --skip-files helps so that Trivy will skip scanning those files and directories. The usage examples are here . allow-rules is also helpful. See the allow-rules section. In addition, all the built-in rules are enabled by default, so it takes some time to scan all of them. If you don't need all those rules, you can use enable-builtin-rules or disable-rules in the configuration file. You should use enable-builin-rules if you need only AWS secret detection, for example. All rules are disabled except for the ones you specify, so it runs very fast. On the other hand, you should use disable-rules if you just want to disable some built-in rules. See the enable-rules and disable-rules sections for the detail. Credit This feature is inspired by gitleaks .","title":"Scanning"},{"location":"docs/secret/scanning/#secret-scanning","text":"Trivy scans any container image, filesystem and git repository to detect exposed secrets like passwords, api keys, and tokens. Secret scanning is enabled by default. Trivy will scan every plaintext file, according to builtin rules or configuration. There are plenty of builtin rules: AWS access key GCP service account GitHub personal access token GitLab personal access token Slack access token etc. You can see a full list of built-in rules and built-in allow rules . Tip If your secret is not detected properly, please make sure that your file including the secret is not in the allowed paths . You can disable allow rules via disable-allow-rules .","title":"Secret Scanning"},{"location":"docs/secret/scanning/#quick-start","text":"This section shows how to scan secrets in container image and filesystem. Other subcommands should be the same.","title":"Quick start"},{"location":"docs/secret/scanning/#container-image","text":"Specify an image name. $ trivy image myimage:1.0.0 2022 -04-21T18:56:44.099+0300 INFO Detected OS: alpine 2022 -04-21T18:56:44.099+0300 INFO Detecting Alpine vulnerabilities... 2022 -04-21T18:56:44.101+0300 INFO Number of language-specific files: 0 myimage:1.0.0 ( alpine 3 .15.0 ) ============================= Total: 6 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 2 ) +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | busybox | CVE-2022-28391 | CRITICAL | 1 .34.1-r3 | 1 .34.1-r5 | CVE-2022-28391 affecting | | | | | | | package busybox 1 .35.0 | | | | | | | -->avd.aquasec.com/nvd/cve-2022-28391 | +--------------+------------------ | | -------------------+---------------+---------------------------------------+ | ssl_client | CVE-2022-28391 | | 1 .34.1-r3 | 1 .34.1-r5 | CVE-2022-28391 affecting | | | | | | | package busybox 1 .35.0 | | | | | | | -->avd.aquasec.com/nvd/cve-2022-28391 | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ app/secret.sh ( secrets ) ======================= Total: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 1 ) +----------+-------------------+----------+---------+--------------------------------+ | CATEGORY | DESCRIPTION | SEVERITY | LINE NO | MATCH | +----------+-------------------+----------+---------+--------------------------------+ | AWS | AWS Access Key ID | CRITICAL | 10 | export AWS_ACCESS_KEY_ID = ***** | +----------+-------------------+----------+---------+--------------------------------+ Tip Trivy tries to detect a base image and skip those layers for secret scanning. A base image usually contains a lot of files and makes secret scanning much slower. If a secret is not detected properly, you can see base layers with the --debug flag.","title":"Container image"},{"location":"docs/secret/scanning/#filesystem","text":"$ trivy fs /path/to/your_project ... ( snip ) ... certs/key.pem ( secrets ) ======================== Total: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 1 , CRITICAL: 0 ) +----------------------+------------------------+----------+---------+---------------------------------+ | CATEGORY | DESCRIPTION | SEVERITY | LINE NO | MATCH | +----------------------+------------------------+----------+---------+---------------------------------+ | AsymmetricPrivateKey | Asymmetric Private Key | HIGH | 1 | -----BEGIN RSA PRIVATE KEY----- | +----------------------+------------------------+----------+---------+---------------------------------+ Tip Your project may have some secrets for testing. You can skip them with --skip-dirs or --skip-files . We would recommend specifying these options so that the secret scanning can be faster if those files don't need to be scanned. Also, you can specify paths to be allowed in a configuration file. See the detail here .","title":"Filesystem"},{"location":"docs/secret/scanning/#configuration","text":"Trivy has a set of builtin rules for secret scanning, which can be extended or modified by a configuration file. If you don't need secret scanning, you can disable it via the --security-checks flag. $ trivy image --security-checks vuln alpine:3.15","title":"Configuration"},{"location":"docs/secret/scanning/#recommendation","text":"We would recommend specifying --skip-dirs for faster secret scanning. In container image scanning, Trivy walks the file tree rooted / and scans all the files other than built-in allowed paths . It will take a while if your image contains a lot of files even though Trivy tries to avoid scanning layers from a base image. If you want to make scanning faster, --skip-dirs and --skip-files helps so that Trivy will skip scanning those files and directories. The usage examples are here . allow-rules is also helpful. See the allow-rules section. In addition, all the built-in rules are enabled by default, so it takes some time to scan all of them. If you don't need all those rules, you can use enable-builtin-rules or disable-rules in the configuration file. You should use enable-builin-rules if you need only AWS secret detection, for example. All rules are disabled except for the ones you specify, so it runs very fast. On the other hand, you should use disable-rules if you just want to disable some built-in rules. See the enable-rules and disable-rules sections for the detail.","title":"Recommendation"},{"location":"docs/secret/scanning/#credit","text":"This feature is inspired by gitleaks .","title":"Credit"},{"location":"docs/vulnerability/distributions/","text":"CBL-Mariner Trivy scans CBL-Mariner . Support The following table provides an outline of the features Trivy offers. Version Container image Virtual machine Distroless Multi-arch Unfixed support 1.0 \u2714 \u2714 amd64, arm64 \u2714 2.0 \u2714 \u2714 amd64, arm64 \u2714 Examples $ trivy image cblmariner.azurecr.io/base/core:1.0 2022-01-31T15:02:27.754+0200 INFO Detected OS: cbl-mariner 2022-01-31T15:02:27.754+0200 INFO Detecting CBL-Mariner vulnerabilities... 2022-01-31T15:02:27.757+0200 INFO Number of language-specific files: 0 cblmariner.azurecr.io/base/core:1.0 (cbl-mariner 1.0.20220122) ============================================================== Total: 14 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 4, CRITICAL: 5) Data source See here .","title":"Distributions"},{"location":"docs/vulnerability/distributions/#cbl-mariner","text":"Trivy scans CBL-Mariner .","title":"CBL-Mariner"},{"location":"docs/vulnerability/distributions/#support","text":"The following table provides an outline of the features Trivy offers. Version Container image Virtual machine Distroless Multi-arch Unfixed support 1.0 \u2714 \u2714 amd64, arm64 \u2714 2.0 \u2714 \u2714 amd64, arm64 \u2714","title":"Support"},{"location":"docs/vulnerability/distributions/#examples","text":"$ trivy image cblmariner.azurecr.io/base/core:1.0 2022-01-31T15:02:27.754+0200 INFO Detected OS: cbl-mariner 2022-01-31T15:02:27.754+0200 INFO Detecting CBL-Mariner vulnerabilities... 2022-01-31T15:02:27.757+0200 INFO Number of language-specific files: 0 cblmariner.azurecr.io/base/core:1.0 (cbl-mariner 1.0.20220122) ============================================================== Total: 14 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 4, CRITICAL: 5)","title":"Examples"},{"location":"docs/vulnerability/distributions/#data-source","text":"See here .","title":"Data source"},{"location":"docs/vulnerability/detection/data-source/","text":"OS OS Source Arch Linux Vulnerable Issues Alpine Linux secdb Amazon Linux 1 Amazon Linux Security Center Amazon Linux 2 Amazon Linux Security Center Debian Security Bug Tracker OVAL Ubuntu Ubuntu CVE Tracker RHEL/CentOS OVAL Security Data AlmaLinux AlmaLinux Product Errata Rocky Linux Rocky Linux UpdateInfo Oracle Linux OVAL CBL-Mariner OVAL OpenSUSE/SLES CVRF Photon OS Photon Security Advisory Programming Language Language Source Commercial Use Delay 1 PHP PHP Security Advisories Database \u2705 - GitHub Advisory Database (Composer) \u2705 - Python GitHub Advisory Database (pip) \u2705 - Open Source Vulnerabilities (PyPI) \u2705 - Ruby Ruby Advisory Database \u2705 - GitHub Advisory Database (RubyGems) \u2705 - Node.js Ecosystem Security Working Group \u2705 - GitHub Advisory Database (npm) \u2705 - Java GitLab Advisories Community \u2705 1 month GitHub Advisory Database (Maven) \u2705 - Go GitLab Advisories Community \u2705 1 month The Go Vulnerability Database \u2705 - Rust Open Source Vulnerabilities (crates.io) \u2705 - .NET GitHub Advisory Database (NuGet) \u2705 - Others Name Source National Vulnerability Database NVD Intentional delay between vulnerability disclosure and registration in the DB \u21a9","title":"Data Sources"},{"location":"docs/vulnerability/detection/data-source/#os","text":"OS Source Arch Linux Vulnerable Issues Alpine Linux secdb Amazon Linux 1 Amazon Linux Security Center Amazon Linux 2 Amazon Linux Security Center Debian Security Bug Tracker OVAL Ubuntu Ubuntu CVE Tracker RHEL/CentOS OVAL Security Data AlmaLinux AlmaLinux Product Errata Rocky Linux Rocky Linux UpdateInfo Oracle Linux OVAL CBL-Mariner OVAL OpenSUSE/SLES CVRF Photon OS Photon Security Advisory","title":"OS"},{"location":"docs/vulnerability/detection/data-source/#programming-language","text":"Language Source Commercial Use Delay 1 PHP PHP Security Advisories Database \u2705 - GitHub Advisory Database (Composer) \u2705 - Python GitHub Advisory Database (pip) \u2705 - Open Source Vulnerabilities (PyPI) \u2705 - Ruby Ruby Advisory Database \u2705 - GitHub Advisory Database (RubyGems) \u2705 - Node.js Ecosystem Security Working Group \u2705 - GitHub Advisory Database (npm) \u2705 - Java GitLab Advisories Community \u2705 1 month GitHub Advisory Database (Maven) \u2705 - Go GitLab Advisories Community \u2705 1 month The Go Vulnerability Database \u2705 - Rust Open Source Vulnerabilities (crates.io) \u2705 - .NET GitHub Advisory Database (NuGet) \u2705 -","title":"Programming Language"},{"location":"docs/vulnerability/detection/data-source/#others","text":"Name Source National Vulnerability Database NVD Intentional delay between vulnerability disclosure and registration in the DB \u21a9","title":"Others"},{"location":"docs/vulnerability/detection/language/","text":"Language-specific Packages Trivy automatically detects the following files in the container and scans vulnerabilities in the application dependencies. Language File Image 8 Rootfs 9 Filesystem 10 Repository 11 Dev dependencies Ruby Gemfile.lock - - \u2705 \u2705 included gemspec \u2705 \u2705 - - included Python Pipfile.lock - - \u2705 \u2705 excluded poetry.lock - - \u2705 \u2705 included requirements.txt - - \u2705 \u2705 included egg package 1 \u2705 \u2705 - - excluded wheel package 2 \u2705 \u2705 - - excluded PHP composer.lock \u2705 \u2705 \u2705 \u2705 excluded Node.js package-lock.json - - \u2705 \u2705 excluded yarn.lock - - \u2705 \u2705 included package.json \u2705 \u2705 - - excluded .NET packages.lock.json \u2705 \u2705 \u2705 \u2705 included packages.config \u2705 \u2705 \u2705 \u2705 excluded Java JAR/WAR/PAR/EAR 3 4 \u2705 \u2705 - - included pom.xml 5 - - \u2705 \u2705 excluded Go Binaries built by Go 6 \u2705 \u2705 - - excluded go.mod 7 - - \u2705 \u2705 included Rust Cargo.lock \u2705 \u2705 \u2705 \u2705 included The path of these files does not matter. Example: Dockerfile *.egg-info , *.egg-info/PKG-INFO , *.egg and EGG-INFO/PKG-INFO \u21a9 .dist-info/META-DATA \u21a9 *.jar , *.war , *.par and *.ear \u21a9 It requires Internet access \u21a9 It requires Internet access when the POM doesn't exist in your local repository \u21a9 UPX-compressed binaries don't work \u21a9 If smaller than go 1.17, go.sum is also required \u21a9 \u2705 means \"enabled\" and - means \"disabled\" in the image scanning \u21a9 \u2705 means \"enabled\" and - means \"disabled\" in the rootfs scanning \u21a9 \u2705 means \"enabled\" and - means \"disabled\" in the filesystem scanning \u21a9 \u2705 means \"enabled\" and - means \"disabled\" in the git repository scanning \u21a9","title":"Language-specific Packages"},{"location":"docs/vulnerability/detection/language/#language-specific-packages","text":"Trivy automatically detects the following files in the container and scans vulnerabilities in the application dependencies. Language File Image 8 Rootfs 9 Filesystem 10 Repository 11 Dev dependencies Ruby Gemfile.lock - - \u2705 \u2705 included gemspec \u2705 \u2705 - - included Python Pipfile.lock - - \u2705 \u2705 excluded poetry.lock - - \u2705 \u2705 included requirements.txt - - \u2705 \u2705 included egg package 1 \u2705 \u2705 - - excluded wheel package 2 \u2705 \u2705 - - excluded PHP composer.lock \u2705 \u2705 \u2705 \u2705 excluded Node.js package-lock.json - - \u2705 \u2705 excluded yarn.lock - - \u2705 \u2705 included package.json \u2705 \u2705 - - excluded .NET packages.lock.json \u2705 \u2705 \u2705 \u2705 included packages.config \u2705 \u2705 \u2705 \u2705 excluded Java JAR/WAR/PAR/EAR 3 4 \u2705 \u2705 - - included pom.xml 5 - - \u2705 \u2705 excluded Go Binaries built by Go 6 \u2705 \u2705 - - excluded go.mod 7 - - \u2705 \u2705 included Rust Cargo.lock \u2705 \u2705 \u2705 \u2705 included The path of these files does not matter. Example: Dockerfile *.egg-info , *.egg-info/PKG-INFO , *.egg and EGG-INFO/PKG-INFO \u21a9 .dist-info/META-DATA \u21a9 *.jar , *.war , *.par and *.ear \u21a9 It requires Internet access \u21a9 It requires Internet access when the POM doesn't exist in your local repository \u21a9 UPX-compressed binaries don't work \u21a9 If smaller than go 1.17, go.sum is also required \u21a9 \u2705 means \"enabled\" and - means \"disabled\" in the image scanning \u21a9 \u2705 means \"enabled\" and - means \"disabled\" in the rootfs scanning \u21a9 \u2705 means \"enabled\" and - means \"disabled\" in the filesystem scanning \u21a9 \u2705 means \"enabled\" and - means \"disabled\" in the git repository scanning \u21a9","title":"Language-specific Packages"},{"location":"docs/vulnerability/detection/os/","text":"Supported OS The unfixed/unfixable vulnerabilities mean that the patch has not yet been provided on their distribution. Trivy doesn't support self-compiled packages/binaries, but official packages provided by vendors such as Red Hat and Debian. OS Supported Versions Target Packages Detection of unfixed vulnerabilities Alpine Linux 2.2 - 2.7, 3.0 - 3.15, edge Installed by apk NO Red Hat Universal Base Image 1 7, 8 Installed by yum/rpm YES Red Hat Enterprise Linux 6, 7, 8 Installed by yum/rpm YES CentOS 6, 7, 8 Installed by yum/rpm YES AlmaLinux 8 Installed by yum/rpm NO Rocky Linux 8 Installed by yum/rpm NO Oracle Linux 5, 6, 7, 8 Installed by yum/rpm NO CBL-Mariner 1.0, 2.0 Installed by yum/rpm YES Amazon Linux 1, 2 Installed by yum/rpm NO openSUSE Leap 42, 15 Installed by zypper/rpm NO SUSE Enterprise Linux 11, 12, 15 Installed by zypper/rpm NO Photon OS 1.0, 2.0, 3.0, 4.0 Installed by tdnf/yum/rpm NO Debian GNU/Linux wheezy, jessie, stretch, buster, bullseye Installed by apt/apt-get/dpkg YES Ubuntu All versions supported by Canonical Installed by apt/apt-get/dpkg YES Distroless 2 Any Installed by apt/apt-get/dpkg YES https://developers.redhat.com/products/rhel/ubi \u21a9 https://github.com/GoogleContainerTools/distroless \u21a9","title":"OS Packages"},{"location":"docs/vulnerability/detection/os/#supported-os","text":"The unfixed/unfixable vulnerabilities mean that the patch has not yet been provided on their distribution. Trivy doesn't support self-compiled packages/binaries, but official packages provided by vendors such as Red Hat and Debian. OS Supported Versions Target Packages Detection of unfixed vulnerabilities Alpine Linux 2.2 - 2.7, 3.0 - 3.15, edge Installed by apk NO Red Hat Universal Base Image 1 7, 8 Installed by yum/rpm YES Red Hat Enterprise Linux 6, 7, 8 Installed by yum/rpm YES CentOS 6, 7, 8 Installed by yum/rpm YES AlmaLinux 8 Installed by yum/rpm NO Rocky Linux 8 Installed by yum/rpm NO Oracle Linux 5, 6, 7, 8 Installed by yum/rpm NO CBL-Mariner 1.0, 2.0 Installed by yum/rpm YES Amazon Linux 1, 2 Installed by yum/rpm NO openSUSE Leap 42, 15 Installed by zypper/rpm NO SUSE Enterprise Linux 11, 12, 15 Installed by zypper/rpm NO Photon OS 1.0, 2.0, 3.0, 4.0 Installed by tdnf/yum/rpm NO Debian GNU/Linux wheezy, jessie, stretch, buster, bullseye Installed by apt/apt-get/dpkg YES Ubuntu All versions supported by Canonical Installed by apt/apt-get/dpkg YES Distroless 2 Any Installed by apt/apt-get/dpkg YES https://developers.redhat.com/products/rhel/ubi \u21a9 https://github.com/GoogleContainerTools/distroless \u21a9","title":"Supported OS"},{"location":"docs/vulnerability/detection/supported/","text":"Supported Container Runtime Docker Engine Podman Container Registry Docker Registry HTTP API V2 OCI Distribution Specification Image Tar Formats Trivy scans a tar image with the following format. Docker Image Specification Moby Project Buildah Podman img Kaniko Image Layout OCI Image Format Specification","title":"Supported"},{"location":"docs/vulnerability/detection/supported/#supported","text":"","title":"Supported"},{"location":"docs/vulnerability/detection/supported/#container-runtime","text":"Docker Engine Podman","title":"Container Runtime"},{"location":"docs/vulnerability/detection/supported/#container-registry","text":"Docker Registry HTTP API V2 OCI Distribution Specification","title":"Container Registry"},{"location":"docs/vulnerability/detection/supported/#image-tar-formats","text":"Trivy scans a tar image with the following format. Docker Image Specification Moby Project Buildah Podman img Kaniko","title":"Image Tar Formats"},{"location":"docs/vulnerability/detection/supported/#image-layout","text":"OCI Image Format Specification","title":"Image Layout"},{"location":"docs/vulnerability/examples/cache/","text":"Cache Clear Caches The --clear-cache option removes caches. The scan is not performed. $ trivy image --clear-cache Result 2019-11-15T15:13:26.209+0200 INFO Reopening vulnerability DB 2019-11-15T15:13:26.209+0200 INFO Removing image caches... Cache Directory Specify where the cache is stored with --cache-dir . $ trivy --cache-dir /tmp/trivy/ image python:3.4-alpine3.9 Cache Backend EXPERIMENTAL This feature might change without preserving backwards compatibility. Trivy supports local filesystem and Redis as the cache backend. This option is useful especially for client/server mode. Two options: fs the cache path can be specified by --cache-dir redis:// redis://[HOST]:[PORT] TTL can be configured via --cache-ttl $ trivy server --cache-backend redis://localhost:6379 Trivy also support for connecting to Redis using TLS, you only need to specify --redis-ca , --redis-cert , and --redis-key option. $ trivy server --cache-backend redis://localhost:6379 \\ --redis-ca /path/to/ca-cert.pem \\ --redis-cert /path/to/cert.pem \\ --redis-key /path/to/key.pem TLS option for redis is hidden from Trivy command-line flag, but you still can use it.","title":"Cache"},{"location":"docs/vulnerability/examples/cache/#cache","text":"","title":"Cache"},{"location":"docs/vulnerability/examples/cache/#clear-caches","text":"The --clear-cache option removes caches. The scan is not performed. $ trivy image --clear-cache Result 2019-11-15T15:13:26.209+0200 INFO Reopening vulnerability DB 2019-11-15T15:13:26.209+0200 INFO Removing image caches...","title":"Clear Caches"},{"location":"docs/vulnerability/examples/cache/#cache-directory","text":"Specify where the cache is stored with --cache-dir . $ trivy --cache-dir /tmp/trivy/ image python:3.4-alpine3.9","title":"Cache Directory"},{"location":"docs/vulnerability/examples/cache/#cache-backend","text":"EXPERIMENTAL This feature might change without preserving backwards compatibility. Trivy supports local filesystem and Redis as the cache backend. This option is useful especially for client/server mode. Two options: fs the cache path can be specified by --cache-dir redis:// redis://[HOST]:[PORT] TTL can be configured via --cache-ttl $ trivy server --cache-backend redis://localhost:6379 Trivy also support for connecting to Redis using TLS, you only need to specify --redis-ca , --redis-cert , and --redis-key option. $ trivy server --cache-backend redis://localhost:6379 \\ --redis-ca /path/to/ca-cert.pem \\ --redis-cert /path/to/cert.pem \\ --redis-key /path/to/key.pem TLS option for redis is hidden from Trivy command-line flag, but you still can use it.","title":"Cache Backend"},{"location":"docs/vulnerability/examples/db/","text":"Vulnerability DB Skip update of vulnerability DB Trivy downloads its vulnerability database every 12 hours when it starts operating. This is usually fast, as the size of the DB is only 10~30MB. But if you want to skip even that, use the --skip-db-update option. $ trivy image --skip-db-update python:3.4-alpine3.9 Result 2019-05-16T12:48:08.703+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 (alpine 3.9.2) =================================== Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0) +---------+------------------+----------+-------------------+---------------+--------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+--------------------------------+ | openssl | CVE-2019-1543 | MEDIUM | 1.1.1a-r1 | 1.1.1b-r1 | openssl: ChaCha20-Poly1305 | | | | | | | with long nonces | +---------+------------------+----------+-------------------+---------------+--------------------------------+ Only download vulnerability database You can also ask Trivy to simply retrieve the vulnerability database. This is useful to initialize workers in Continuous Integration systems. $ trivy image --download-db-only DB Repository Trivy could also download the vulnerability database from an external OCI registry by using --db-repository option. $ trivy image --db-repository registry.gitlab.com/gitlab-org/security-products/dependencies/trivy-db","title":"Vulnerability DB"},{"location":"docs/vulnerability/examples/db/#vulnerability-db","text":"","title":"Vulnerability DB"},{"location":"docs/vulnerability/examples/db/#skip-update-of-vulnerability-db","text":"Trivy downloads its vulnerability database every 12 hours when it starts operating. This is usually fast, as the size of the DB is only 10~30MB. But if you want to skip even that, use the --skip-db-update option. $ trivy image --skip-db-update python:3.4-alpine3.9 Result 2019-05-16T12:48:08.703+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 (alpine 3.9.2) =================================== Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0) +---------+------------------+----------+-------------------+---------------+--------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+--------------------------------+ | openssl | CVE-2019-1543 | MEDIUM | 1.1.1a-r1 | 1.1.1b-r1 | openssl: ChaCha20-Poly1305 | | | | | | | with long nonces | +---------+------------------+----------+-------------------+---------------+--------------------------------+","title":"Skip update of vulnerability DB"},{"location":"docs/vulnerability/examples/db/#only-download-vulnerability-database","text":"You can also ask Trivy to simply retrieve the vulnerability database. This is useful to initialize workers in Continuous Integration systems. $ trivy image --download-db-only","title":"Only download vulnerability database"},{"location":"docs/vulnerability/examples/db/#db-repository","text":"Trivy could also download the vulnerability database from an external OCI registry by using --db-repository option. $ trivy image --db-repository registry.gitlab.com/gitlab-org/security-products/dependencies/trivy-db","title":"DB Repository"},{"location":"docs/vulnerability/examples/filter/","text":"Filter Vulnerabilities Hide Unfixed Vulnerabilities By default, Trivy also detects unpatched/unfixed vulnerabilities. This means you can't fix these vulnerabilities even if you update all packages. If you would like to ignore them, use the --ignore-unfixed option. $ trivy image --ignore-unfixed ruby:2.4.0 Result 2019-05-16T12:49:52.656+0900 INFO Updating vulnerability database... 2019-05-16T12:50:14.786+0900 INFO Detecting Debian vulnerabilities... ruby:2.4.0 (debian 8.7) ======================= Total: 4730 (UNKNOWN: 1, LOW: 145, MEDIUM: 3487, HIGH: 1014, CRITICAL: 83) +------------------------------+------------------+----------+----------------------------+----------------------------------+-----------------------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +------------------------------+------------------+----------+----------------------------+----------------------------------+-----------------------------------------------------+ | apt | CVE-2019-3462 | CRITICAL | 1.0.9.8.3 | 1.0.9.8.5 | Incorrect sanitation of the | | | | | | | 302 redirect field in HTTP | | | | | | | transport method of... | + +------------------+----------+ +----------------------------------+-----------------------------------------------------+ | | CVE-2016-1252 | MEDIUM | | 1.0.9.8.4 | The apt package in Debian | | | | | | | jessie before 1.0.9.8.4, in | | | | | | | Debian unstable before... | +------------------------------+------------------+----------+----------------------------+----------------------------------+-----------------------------------------------------+ | bash | CVE-2019-9924 | HIGH | 4.3-11 | 4.3-11+deb8u2 | bash: BASH_CMD is writable in | | | | | | | restricted bash shells | + +------------------+ + +----------------------------------+-----------------------------------------------------+ | | CVE-2016-7543 | | | 4.3-11+deb8u1 | bash: Specially crafted | | | | | | | SHELLOPTS+PS4 variables allows | | | | | | | command substitution | + +------------------+----------+ + +-----------------------------------------------------+ | | CVE-2016-0634 | MEDIUM | | | bash: Arbitrary code execution | | | | | | | via malicious hostname | + +------------------+----------+ +----------------------------------+-----------------------------------------------------+ | | CVE-2016-9401 | LOW | | 4.3-11+deb8u2 | bash: popd controlled free | +------------------------------+------------------+----------+----------------------------+----------------------------------+-----------------------------------------------------+ ... By Severity Use --severity option. $ trivy image --severity HIGH,CRITICAL ruby:2.4.0 Result 2019 -05-16T01:51:46.255+0900 INFO Updating vulnerability database... 2019 -05-16T01:51:49.213+0900 INFO Detecting Debian vulnerabilities... ruby:2.4.0 ( debian 8 .7 ) ======================= Total: 1785 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 1680 , CRITICAL: 105 ) +-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+ | apt | CVE-2019-3462 | CRITICAL | 1 .0.9.8.3 | 1 .0.9.8.5 | Incorrect sanitation of the | | | | | | | 302 redirect field in HTTP | | | | | | | transport method of... | +-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+ | bash | CVE-2019-9924 | HIGH | 4 .3-11 | 4 .3-11+deb8u2 | bash: BASH_CMD is writable in | | | | | | | restricted bash shells | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2016-7543 | | | 4 .3-11+deb8u1 | bash: Specially crafted | | | | | | | SHELLOPTS+PS4 variables allows | | | | | | | command substitution | +-----------------------------+------------------+ +---------------------------+----------------------------------+-------------------------------------------------+ | binutils | CVE-2017-8421 | | 2 .25-5 | | binutils: Memory exhaustion in | | | | | | | objdump via a crafted PE file | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2017-14930 | | | | binutils: Memory leak in | | | | | | | decode_line_info | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2017-7614 | | | | binutils: NULL | | | | | | | pointer dereference in | | | | | | | bfd_elf_final_link function | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2014-9939 | | | | binutils: buffer overflow in | | | | | | | ihex.c | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2017-13716 | | | | binutils: Memory leak with the | | | | | | | C++ symbol demangler routine | | | | | | | in libiberty | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2018-12699 | | | | binutils: heap-based buffer | | | | | | | overflow in finish_stab in | | | | | | | stabs.c | +-----------------------------+------------------+ +---------------------------+----------------------------------+-------------------------------------------------+ | bsdutils | CVE-2015-5224 | | 2 .25.2-6 | | util-linux: File name | | | | | | | collision due to incorrect | | | | | | | mkstemp use | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2016-2779 | | | | util-linux: runuser tty hijack | | | | | | | via TIOCSTI ioctl | +-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+ By Vulnerability IDs Use .trivyignore . $ cat .trivyignore # Accept the risk CVE-2018-14618 # No impact in our settings CVE-2019-1543 $ trivy image python:3.4-alpine3.9 Result 2019 -05-16T12:53:10.076+0900 INFO Updating vulnerability database... 2019 -05-16T12:53:28.134+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 ( alpine 3 .9.2 ) =================================== Total: 0 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 0 ) By Type Use --vuln-type option. $ trivy image --vuln-type os ruby:2.4.0 Available values: - library - os Result 2019 -05-22T19:36:50.530+0200 \u001b [ 34mINFO\u001b [ 0m Updating vulnerability database... 2019 -05-22T19:36:51.681+0200 \u001b [ 34mINFO\u001b [ 0m Detecting Alpine vulnerabilities... 2019 -05-22T19:36:51.685+0200 \u001b [ 34mINFO\u001b [ 0m Updating npm Security DB... 2019 -05-22T19:36:52.389+0200 \u001b [ 34mINFO\u001b [ 0m Detecting npm vulnerabilities... 2019 -05-22T19:36:52.390+0200 \u001b [ 34mINFO\u001b [ 0m Updating pipenv Security DB... 2019 -05-22T19:36:53.406+0200 \u001b [ 34mINFO\u001b [ 0m Detecting pipenv vulnerabilities... ruby:2.4.0 ( debian 8 .7 ) Total: 4751 ( UNKNOWN: 1 , LOW: 150 , MEDIUM: 3504 , HIGH: 1013 , CRITICAL: 83 ) +---------+------------------+----------+-------------------+---------------+----------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | curl | CVE-2018-14618 | CRITICAL | 7 .61.0-r0 | 7 .61.1-r0 | curl: NTLM password overflow | | | | | | | via integer overflow | + +------------------+----------+ +---------------+----------------------------------+ | | CVE-2018-16839 | HIGH | | 7 .61.1-r1 | curl: Integer overflow leading | | | | | | | to heap-based buffer overflow in | | | | | | | Curl_sasl_create_plain_message () | + +------------------+ + +---------------+----------------------------------+ | | CVE-2019-3822 | | | 7 .61.1-r2 | curl: NTLMv2 type-3 header | | | | | | | stack buffer overflow | + +------------------+ + +---------------+----------------------------------+ | | CVE-2018-16840 | | | 7 .61.1-r1 | curl: Use-after-free when | | | | | | | closing \"easy\" handle in | | | | | | | Curl_close () | + +------------------+----------+ +---------------+----------------------------------+ | | CVE-2019-3823 | MEDIUM | | 7 .61.1-r2 | curl: SMTP end-of-response | | | | | | | out-of-bounds read | + +------------------+ + + +----------------------------------+ | | CVE-2018-16890 | | | | curl: NTLM type-2 heap | | | | | | | out-of-bounds buffer read | + +------------------+ + +---------------+----------------------------------+ | | CVE-2018-16842 | | | 7 .61.1-r1 | curl: Heap-based buffer | | | | | | | over-read in the curl tool | | | | | | | warning formatting | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | git | CVE-2018-17456 | HIGH | 2 .15.2-r0 | 2 .15.3-r0 | git: arbitrary code execution | | | | | | | via .gitmodules | + +------------------+ + + +----------------------------------+ | | CVE-2018-19486 | | | | git: Improper handling of | | | | | | | PATH allows for commands to be | | | | | | | executed from... | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | libssh2 | CVE-2019-3855 | CRITICAL | 1 .8.0-r2 | 1 .8.1-r0 | libssh2: Integer overflow in | | | | | | | transport read resulting in | | | | | | | out of bounds write... | + +------------------+----------+ + +----------------------------------+ | | CVE-2019-3861 | MEDIUM | | | libssh2: Out-of-bounds reads | | | | | | | with specially crafted SSH | | | | | | | packets | + +------------------+ + + +----------------------------------+ | | CVE-2019-3857 | | | | libssh2: Integer overflow in | | | | | | | SSH packet processing channel | | | | | | | resulting in out of... | + +------------------+ + + +----------------------------------+ | | CVE-2019-3856 | | | | libssh2: Integer overflow in | | | | | | | keyboard interactive handling | | | | | | | resulting in out of bounds... | + +------------------+ + + +----------------------------------+ | | CVE-2019-3863 | | | | libssh2: Integer overflow | | | | | | | in user authenticate | | | | | | | keyboard interactive allows | | | | | | | out-of-bounds writes | + +------------------+ + + +----------------------------------+ | | CVE-2019-3862 | | | | libssh2: Out-of-bounds memory | | | | | | | comparison with specially | | | | | | | crafted message channel | | | | | | | request | + +------------------+ + + +----------------------------------+ | | CVE-2019-3860 | | | | libssh2: Out-of-bounds reads | | | | | | | with specially crafted SFTP | | | | | | | packets | + +------------------+ + + +----------------------------------+ | | CVE-2019-3858 | | | | libssh2: Zero-byte allocation | | | | | | | with a specially crafted SFTP | | | | | | | packed leading to an... | + +------------------+ + + +----------------------------------+ | | CVE-2019-3859 | | | | libssh2: Unchecked use of | | | | | | | _libssh2_packet_require and | | | | | | | _libssh2_packet_requirev | | | | | | | resulting in out-of-bounds | | | | | | | read | +---------+------------------+ +-------------------+---------------+----------------------------------+ | libxml2 | CVE-2018-14404 | | 2 .9.7-r0 | 2 .9.8-r1 | libxml2: NULL pointer | | | | | | | dereference in | | | | | | | xpath.c:xmlXPathCompOpEval () | | | | | | | can allow attackers to cause | | | | | | | a... | + +------------------+ + + +----------------------------------+ | | CVE-2018-14567 | | | | libxml2: Infinite loop when | | | | | | | --with-lzma is used allows for | | | | | | | denial of service... | + +------------------+----------+ + +----------------------------------+ | | CVE-2018-9251 | LOW | | | libxml2: infinite loop in | | | | | | | xz_decomp function in xzlib.c | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | openssh | CVE-2019-6109 | MEDIUM | 7 .5_p1-r9 | 7 .5_p1-r10 | openssh: Missing character | | | | | | | encoding in progress display | | | | | | | allows for spoofing of scp... | + +------------------+ + + +----------------------------------+ | | CVE-2019-6111 | | | | openssh: Improper validation | | | | | | | of object names allows | | | | | | | malicious server to overwrite | | | | | | | files... | + +------------------+----------+ + +----------------------------------+ | | CVE-2018-20685 | LOW | | | openssh: scp client improper | | | | | | | directory name validation | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | sqlite | CVE-2018-20346 | MEDIUM | 3 .21.0-r1 | 3 .25.3-r0 | CVE-2018-20505 CVE-2018-20506 | | | | | | | sqlite: Multiple flaws in | | | | | | | sqlite which can be triggered | | | | | | | via... | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | tar | CVE-2018-20482 | LOW | 1 .29-r1 | 1 .31-r0 | tar: Infinite read loop in | | | | | | | sparse_dump_region function in | | | | | | | sparse.c | +---------+------------------+----------+-------------------+---------------+----------------------------------+ By Open Policy Agent EXPERIMENTAL This feature might change without preserving backwards compatibility. Trivy supports Open Policy Agent (OPA) to filter vulnerabilities. You can specify a Rego file with --ignore-policy option. The Rego package name must be trivy and it must include a rule called ignore which determines if each individual vulnerability should be excluded (ignore=true) or not (ignore=false). In the policy, each vulnerability will be available for inspection as the input variable. The structure of each vulnerability input is the same as for the Trivy JSON output. There is a built-in Rego library with helper functions that you can import into your policy using: import data.lib.trivy . For more info about the helper functions, look at the library here To get started, see the example policy . $ trivy image --ignore-policy contrib/example_policy/basic.rego centos:7 Result centos:7 ( centos 7 .9.2009 ) ========================== Total: 9 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 4 , CRITICAL: 5 ) +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+ | glib2 | CVE-2015-8385 | HIGH | 2 .56.1-7.el7 | | pcre: buffer overflow caused | | | | | | | by named forward reference | | | | | | | to duplicate group number... | | | | | | | -->avd.aquasec.com/nvd/cve-2015-8385 | + +------------------+ + +-------------------+-----------------------------------------+ | | CVE-2016-3191 | | | | pcre: workspace overflow for | | | | | | | ( *ACCEPT ) with deeply nested | | | | | | | parentheses ( 8 .39/13, 10 .22/12 ) | | | | | | | -->avd.aquasec.com/nvd/cve-2016-3191 | + +------------------+ + +-------------------+-----------------------------------------+ | | CVE-2021-27219 | | | 2 .56.1-9.el7_9 | glib: integer overflow in | | | | | | | g_bytes_new function on | | | | | | | 64 -bit platforms due to an... | | | | | | | -->avd.aquasec.com/nvd/cve-2021-27219 | +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+ | glibc | CVE-2019-1010022 | CRITICAL | 2 .17-317.el7 | | glibc: stack guard protection bypass | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1010022 | +--------------+ + + +-------------------+ + | glibc-common | | | | | | | | | | | | | +--------------+------------------+ +-------------------+-------------------+-----------------------------------------+ | nss | CVE-2021-43527 | | 3 .53.1-3.el7_9 | 3 .67.0-4.el7_9 | nss: Memory corruption in | | | | | | | decodeECorDsaSignature with | | | | | | | DSA signatures ( and RSA-PSS ) | | | | | | | -->avd.aquasec.com/nvd/cve-2021-43527 | +--------------+ + + + + + | nss-sysinit | | | | | | | | | | | | | | | | | | | | | | | | | | | +--------------+ + + + + + | nss-tools | | | | | | | | | | | | | | | | | | | | | | | | | | | +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+ | openssl-libs | CVE-2020-1971 | HIGH | 1 :1.0.2k-19.el7 | 1 :1.0.2k-21.el7_9 | openssl: EDIPARTYNAME | | | | | | | NULL pointer de-reference | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1971 | +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+","title":"Vulnerability Filtering"},{"location":"docs/vulnerability/examples/filter/#filter-vulnerabilities","text":"","title":"Filter Vulnerabilities"},{"location":"docs/vulnerability/examples/filter/#hide-unfixed-vulnerabilities","text":"By default, Trivy also detects unpatched/unfixed vulnerabilities. This means you can't fix these vulnerabilities even if you update all packages. If you would like to ignore them, use the --ignore-unfixed option. $ trivy image --ignore-unfixed ruby:2.4.0 Result 2019-05-16T12:49:52.656+0900 INFO Updating vulnerability database... 2019-05-16T12:50:14.786+0900 INFO Detecting Debian vulnerabilities... ruby:2.4.0 (debian 8.7) ======================= Total: 4730 (UNKNOWN: 1, LOW: 145, MEDIUM: 3487, HIGH: 1014, CRITICAL: 83) +------------------------------+------------------+----------+----------------------------+----------------------------------+-----------------------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +------------------------------+------------------+----------+----------------------------+----------------------------------+-----------------------------------------------------+ | apt | CVE-2019-3462 | CRITICAL | 1.0.9.8.3 | 1.0.9.8.5 | Incorrect sanitation of the | | | | | | | 302 redirect field in HTTP | | | | | | | transport method of... | + +------------------+----------+ +----------------------------------+-----------------------------------------------------+ | | CVE-2016-1252 | MEDIUM | | 1.0.9.8.4 | The apt package in Debian | | | | | | | jessie before 1.0.9.8.4, in | | | | | | | Debian unstable before... | +------------------------------+------------------+----------+----------------------------+----------------------------------+-----------------------------------------------------+ | bash | CVE-2019-9924 | HIGH | 4.3-11 | 4.3-11+deb8u2 | bash: BASH_CMD is writable in | | | | | | | restricted bash shells | + +------------------+ + +----------------------------------+-----------------------------------------------------+ | | CVE-2016-7543 | | | 4.3-11+deb8u1 | bash: Specially crafted | | | | | | | SHELLOPTS+PS4 variables allows | | | | | | | command substitution | + +------------------+----------+ + +-----------------------------------------------------+ | | CVE-2016-0634 | MEDIUM | | | bash: Arbitrary code execution | | | | | | | via malicious hostname | + +------------------+----------+ +----------------------------------+-----------------------------------------------------+ | | CVE-2016-9401 | LOW | | 4.3-11+deb8u2 | bash: popd controlled free | +------------------------------+------------------+----------+----------------------------+----------------------------------+-----------------------------------------------------+ ...","title":"Hide Unfixed Vulnerabilities"},{"location":"docs/vulnerability/examples/filter/#by-severity","text":"Use --severity option. $ trivy image --severity HIGH,CRITICAL ruby:2.4.0 Result 2019 -05-16T01:51:46.255+0900 INFO Updating vulnerability database... 2019 -05-16T01:51:49.213+0900 INFO Detecting Debian vulnerabilities... ruby:2.4.0 ( debian 8 .7 ) ======================= Total: 1785 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 1680 , CRITICAL: 105 ) +-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+ | apt | CVE-2019-3462 | CRITICAL | 1 .0.9.8.3 | 1 .0.9.8.5 | Incorrect sanitation of the | | | | | | | 302 redirect field in HTTP | | | | | | | transport method of... | +-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+ | bash | CVE-2019-9924 | HIGH | 4 .3-11 | 4 .3-11+deb8u2 | bash: BASH_CMD is writable in | | | | | | | restricted bash shells | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2016-7543 | | | 4 .3-11+deb8u1 | bash: Specially crafted | | | | | | | SHELLOPTS+PS4 variables allows | | | | | | | command substitution | +-----------------------------+------------------+ +---------------------------+----------------------------------+-------------------------------------------------+ | binutils | CVE-2017-8421 | | 2 .25-5 | | binutils: Memory exhaustion in | | | | | | | objdump via a crafted PE file | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2017-14930 | | | | binutils: Memory leak in | | | | | | | decode_line_info | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2017-7614 | | | | binutils: NULL | | | | | | | pointer dereference in | | | | | | | bfd_elf_final_link function | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2014-9939 | | | | binutils: buffer overflow in | | | | | | | ihex.c | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2017-13716 | | | | binutils: Memory leak with the | | | | | | | C++ symbol demangler routine | | | | | | | in libiberty | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2018-12699 | | | | binutils: heap-based buffer | | | | | | | overflow in finish_stab in | | | | | | | stabs.c | +-----------------------------+------------------+ +---------------------------+----------------------------------+-------------------------------------------------+ | bsdutils | CVE-2015-5224 | | 2 .25.2-6 | | util-linux: File name | | | | | | | collision due to incorrect | | | | | | | mkstemp use | + +------------------+ + +----------------------------------+-------------------------------------------------+ | | CVE-2016-2779 | | | | util-linux: runuser tty hijack | | | | | | | via TIOCSTI ioctl | +-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+","title":"By Severity"},{"location":"docs/vulnerability/examples/filter/#by-vulnerability-ids","text":"Use .trivyignore . $ cat .trivyignore # Accept the risk CVE-2018-14618 # No impact in our settings CVE-2019-1543 $ trivy image python:3.4-alpine3.9 Result 2019 -05-16T12:53:10.076+0900 INFO Updating vulnerability database... 2019 -05-16T12:53:28.134+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 ( alpine 3 .9.2 ) =================================== Total: 0 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 0 )","title":"By Vulnerability IDs"},{"location":"docs/vulnerability/examples/filter/#by-type","text":"Use --vuln-type option. $ trivy image --vuln-type os ruby:2.4.0 Available values: - library - os Result 2019 -05-22T19:36:50.530+0200 \u001b [ 34mINFO\u001b [ 0m Updating vulnerability database... 2019 -05-22T19:36:51.681+0200 \u001b [ 34mINFO\u001b [ 0m Detecting Alpine vulnerabilities... 2019 -05-22T19:36:51.685+0200 \u001b [ 34mINFO\u001b [ 0m Updating npm Security DB... 2019 -05-22T19:36:52.389+0200 \u001b [ 34mINFO\u001b [ 0m Detecting npm vulnerabilities... 2019 -05-22T19:36:52.390+0200 \u001b [ 34mINFO\u001b [ 0m Updating pipenv Security DB... 2019 -05-22T19:36:53.406+0200 \u001b [ 34mINFO\u001b [ 0m Detecting pipenv vulnerabilities... ruby:2.4.0 ( debian 8 .7 ) Total: 4751 ( UNKNOWN: 1 , LOW: 150 , MEDIUM: 3504 , HIGH: 1013 , CRITICAL: 83 ) +---------+------------------+----------+-------------------+---------------+----------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | curl | CVE-2018-14618 | CRITICAL | 7 .61.0-r0 | 7 .61.1-r0 | curl: NTLM password overflow | | | | | | | via integer overflow | + +------------------+----------+ +---------------+----------------------------------+ | | CVE-2018-16839 | HIGH | | 7 .61.1-r1 | curl: Integer overflow leading | | | | | | | to heap-based buffer overflow in | | | | | | | Curl_sasl_create_plain_message () | + +------------------+ + +---------------+----------------------------------+ | | CVE-2019-3822 | | | 7 .61.1-r2 | curl: NTLMv2 type-3 header | | | | | | | stack buffer overflow | + +------------------+ + +---------------+----------------------------------+ | | CVE-2018-16840 | | | 7 .61.1-r1 | curl: Use-after-free when | | | | | | | closing \"easy\" handle in | | | | | | | Curl_close () | + +------------------+----------+ +---------------+----------------------------------+ | | CVE-2019-3823 | MEDIUM | | 7 .61.1-r2 | curl: SMTP end-of-response | | | | | | | out-of-bounds read | + +------------------+ + + +----------------------------------+ | | CVE-2018-16890 | | | | curl: NTLM type-2 heap | | | | | | | out-of-bounds buffer read | + +------------------+ + +---------------+----------------------------------+ | | CVE-2018-16842 | | | 7 .61.1-r1 | curl: Heap-based buffer | | | | | | | over-read in the curl tool | | | | | | | warning formatting | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | git | CVE-2018-17456 | HIGH | 2 .15.2-r0 | 2 .15.3-r0 | git: arbitrary code execution | | | | | | | via .gitmodules | + +------------------+ + + +----------------------------------+ | | CVE-2018-19486 | | | | git: Improper handling of | | | | | | | PATH allows for commands to be | | | | | | | executed from... | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | libssh2 | CVE-2019-3855 | CRITICAL | 1 .8.0-r2 | 1 .8.1-r0 | libssh2: Integer overflow in | | | | | | | transport read resulting in | | | | | | | out of bounds write... | + +------------------+----------+ + +----------------------------------+ | | CVE-2019-3861 | MEDIUM | | | libssh2: Out-of-bounds reads | | | | | | | with specially crafted SSH | | | | | | | packets | + +------------------+ + + +----------------------------------+ | | CVE-2019-3857 | | | | libssh2: Integer overflow in | | | | | | | SSH packet processing channel | | | | | | | resulting in out of... | + +------------------+ + + +----------------------------------+ | | CVE-2019-3856 | | | | libssh2: Integer overflow in | | | | | | | keyboard interactive handling | | | | | | | resulting in out of bounds... | + +------------------+ + + +----------------------------------+ | | CVE-2019-3863 | | | | libssh2: Integer overflow | | | | | | | in user authenticate | | | | | | | keyboard interactive allows | | | | | | | out-of-bounds writes | + +------------------+ + + +----------------------------------+ | | CVE-2019-3862 | | | | libssh2: Out-of-bounds memory | | | | | | | comparison with specially | | | | | | | crafted message channel | | | | | | | request | + +------------------+ + + +----------------------------------+ | | CVE-2019-3860 | | | | libssh2: Out-of-bounds reads | | | | | | | with specially crafted SFTP | | | | | | | packets | + +------------------+ + + +----------------------------------+ | | CVE-2019-3858 | | | | libssh2: Zero-byte allocation | | | | | | | with a specially crafted SFTP | | | | | | | packed leading to an... | + +------------------+ + + +----------------------------------+ | | CVE-2019-3859 | | | | libssh2: Unchecked use of | | | | | | | _libssh2_packet_require and | | | | | | | _libssh2_packet_requirev | | | | | | | resulting in out-of-bounds | | | | | | | read | +---------+------------------+ +-------------------+---------------+----------------------------------+ | libxml2 | CVE-2018-14404 | | 2 .9.7-r0 | 2 .9.8-r1 | libxml2: NULL pointer | | | | | | | dereference in | | | | | | | xpath.c:xmlXPathCompOpEval () | | | | | | | can allow attackers to cause | | | | | | | a... | + +------------------+ + + +----------------------------------+ | | CVE-2018-14567 | | | | libxml2: Infinite loop when | | | | | | | --with-lzma is used allows for | | | | | | | denial of service... | + +------------------+----------+ + +----------------------------------+ | | CVE-2018-9251 | LOW | | | libxml2: infinite loop in | | | | | | | xz_decomp function in xzlib.c | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | openssh | CVE-2019-6109 | MEDIUM | 7 .5_p1-r9 | 7 .5_p1-r10 | openssh: Missing character | | | | | | | encoding in progress display | | | | | | | allows for spoofing of scp... | + +------------------+ + + +----------------------------------+ | | CVE-2019-6111 | | | | openssh: Improper validation | | | | | | | of object names allows | | | | | | | malicious server to overwrite | | | | | | | files... | + +------------------+----------+ + +----------------------------------+ | | CVE-2018-20685 | LOW | | | openssh: scp client improper | | | | | | | directory name validation | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | sqlite | CVE-2018-20346 | MEDIUM | 3 .21.0-r1 | 3 .25.3-r0 | CVE-2018-20505 CVE-2018-20506 | | | | | | | sqlite: Multiple flaws in | | | | | | | sqlite which can be triggered | | | | | | | via... | +---------+------------------+----------+-------------------+---------------+----------------------------------+ | tar | CVE-2018-20482 | LOW | 1 .29-r1 | 1 .31-r0 | tar: Infinite read loop in | | | | | | | sparse_dump_region function in | | | | | | | sparse.c | +---------+------------------+----------+-------------------+---------------+----------------------------------+","title":"By Type"},{"location":"docs/vulnerability/examples/filter/#by-open-policy-agent","text":"EXPERIMENTAL This feature might change without preserving backwards compatibility. Trivy supports Open Policy Agent (OPA) to filter vulnerabilities. You can specify a Rego file with --ignore-policy option. The Rego package name must be trivy and it must include a rule called ignore which determines if each individual vulnerability should be excluded (ignore=true) or not (ignore=false). In the policy, each vulnerability will be available for inspection as the input variable. The structure of each vulnerability input is the same as for the Trivy JSON output. There is a built-in Rego library with helper functions that you can import into your policy using: import data.lib.trivy . For more info about the helper functions, look at the library here To get started, see the example policy . $ trivy image --ignore-policy contrib/example_policy/basic.rego centos:7 Result centos:7 ( centos 7 .9.2009 ) ========================== Total: 9 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 4 , CRITICAL: 5 ) +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+ | glib2 | CVE-2015-8385 | HIGH | 2 .56.1-7.el7 | | pcre: buffer overflow caused | | | | | | | by named forward reference | | | | | | | to duplicate group number... | | | | | | | -->avd.aquasec.com/nvd/cve-2015-8385 | + +------------------+ + +-------------------+-----------------------------------------+ | | CVE-2016-3191 | | | | pcre: workspace overflow for | | | | | | | ( *ACCEPT ) with deeply nested | | | | | | | parentheses ( 8 .39/13, 10 .22/12 ) | | | | | | | -->avd.aquasec.com/nvd/cve-2016-3191 | + +------------------+ + +-------------------+-----------------------------------------+ | | CVE-2021-27219 | | | 2 .56.1-9.el7_9 | glib: integer overflow in | | | | | | | g_bytes_new function on | | | | | | | 64 -bit platforms due to an... | | | | | | | -->avd.aquasec.com/nvd/cve-2021-27219 | +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+ | glibc | CVE-2019-1010022 | CRITICAL | 2 .17-317.el7 | | glibc: stack guard protection bypass | | | | | | | -->avd.aquasec.com/nvd/cve-2019-1010022 | +--------------+ + + +-------------------+ + | glibc-common | | | | | | | | | | | | | +--------------+------------------+ +-------------------+-------------------+-----------------------------------------+ | nss | CVE-2021-43527 | | 3 .53.1-3.el7_9 | 3 .67.0-4.el7_9 | nss: Memory corruption in | | | | | | | decodeECorDsaSignature with | | | | | | | DSA signatures ( and RSA-PSS ) | | | | | | | -->avd.aquasec.com/nvd/cve-2021-43527 | +--------------+ + + + + + | nss-sysinit | | | | | | | | | | | | | | | | | | | | | | | | | | | +--------------+ + + + + + | nss-tools | | | | | | | | | | | | | | | | | | | | | | | | | | | +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+ | openssl-libs | CVE-2020-1971 | HIGH | 1 :1.0.2k-19.el7 | 1 :1.0.2k-21.el7_9 | openssl: EDIPARTYNAME | | | | | | | NULL pointer de-reference | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1971 | +--------------+------------------+----------+-------------------+-------------------+-----------------------------------------+","title":"By Open Policy Agent"},{"location":"docs/vulnerability/examples/others/","text":"Others Skip Files Trivy traversals directories and looks for all lock files by default. If your image contains lock files which are not maintained by you, you can skip the file. $ trivy image --skip-files \"/Gemfile.lock\" --skip-files \"/var/lib/gems/2.5.0/gems/http_parser.rb-0.6.0/Gemfile.lock\" quay.io/fluentd_elasticsearch/fluentd:v2.9.0 Skip Directories Trivy traversals directories and look for all lock files by default. If your image contains lock files which are not maintained by you, you can skip traversal in the specific directory. $ trivy image --skip-dirs /var/lib/gems/2.5.0/gems/fluent-plugin-detect-exceptions-0.0.13 --skip-dirs \"/var/lib/gems/2.5.0/gems/http_parser.rb-0.6.0\" quay.io/fluentd_elasticsearch/fluentd:v2.9.0 Exit Code By default, Trivy exits with code 0 even when vulnerabilities are detected. Use the --exit-code option if you want to exit with a non-zero exit code. $ trivy image --exit-code 1 python:3.4-alpine3.9 Result 2019-05-16T12:51:43.500+0900 INFO Updating vulnerability database... 2019-05-16T12:52:00.387+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 (alpine 3.9.2) =================================== Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0) +---------+------------------+----------+-------------------+---------------+--------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+--------------------------------+ | openssl | CVE-2019-1543 | MEDIUM | 1.1.1a-r1 | 1.1.1b-r1 | openssl: ChaCha20-Poly1305 | | | | | | | with long nonces | +---------+------------------+----------+-------------------+---------------+--------------------------------+ This option is useful for CI/CD. In the following example, the test will fail only when a critical vulnerability is found. $ trivy image --exit-code 0 --severity MEDIUM,HIGH ruby:2.4.0 $ trivy image --exit-code 1 --severity CRITICAL ruby:2.4.0 Reset The --reset option removes all caches and database. After this, it takes a long time as the vulnerability database needs to be rebuilt locally. $ trivy image --reset Result 2019-05-16T13:05:31.935+0900 INFO Resetting...","title":"Others"},{"location":"docs/vulnerability/examples/others/#others","text":"","title":"Others"},{"location":"docs/vulnerability/examples/others/#skip-files","text":"Trivy traversals directories and looks for all lock files by default. If your image contains lock files which are not maintained by you, you can skip the file. $ trivy image --skip-files \"/Gemfile.lock\" --skip-files \"/var/lib/gems/2.5.0/gems/http_parser.rb-0.6.0/Gemfile.lock\" quay.io/fluentd_elasticsearch/fluentd:v2.9.0","title":"Skip Files"},{"location":"docs/vulnerability/examples/others/#skip-directories","text":"Trivy traversals directories and look for all lock files by default. If your image contains lock files which are not maintained by you, you can skip traversal in the specific directory. $ trivy image --skip-dirs /var/lib/gems/2.5.0/gems/fluent-plugin-detect-exceptions-0.0.13 --skip-dirs \"/var/lib/gems/2.5.0/gems/http_parser.rb-0.6.0\" quay.io/fluentd_elasticsearch/fluentd:v2.9.0","title":"Skip Directories"},{"location":"docs/vulnerability/examples/others/#exit-code","text":"By default, Trivy exits with code 0 even when vulnerabilities are detected. Use the --exit-code option if you want to exit with a non-zero exit code. $ trivy image --exit-code 1 python:3.4-alpine3.9 Result 2019-05-16T12:51:43.500+0900 INFO Updating vulnerability database... 2019-05-16T12:52:00.387+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 (alpine 3.9.2) =================================== Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0) +---------+------------------+----------+-------------------+---------------+--------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+--------------------------------+ | openssl | CVE-2019-1543 | MEDIUM | 1.1.1a-r1 | 1.1.1b-r1 | openssl: ChaCha20-Poly1305 | | | | | | | with long nonces | +---------+------------------+----------+-------------------+---------------+--------------------------------+ This option is useful for CI/CD. In the following example, the test will fail only when a critical vulnerability is found. $ trivy image --exit-code 0 --severity MEDIUM,HIGH ruby:2.4.0 $ trivy image --exit-code 1 --severity CRITICAL ruby:2.4.0","title":"Exit Code"},{"location":"docs/vulnerability/examples/others/#reset","text":"The --reset option removes all caches and database. After this, it takes a long time as the vulnerability database needs to be rebuilt locally. $ trivy image --reset Result 2019-05-16T13:05:31.935+0900 INFO Resetting...","title":"Reset"},{"location":"docs/vulnerability/examples/report/","text":"Report Formats Table (Default) $ trivy image -f table golang:1.12-alpine JSON $ trivy image -f json -o results.json golang:1.12-alpine Caution v0.20.0 changes the JSON schema. For more details, see here . Result 2019-05-16T01:46:31.777+0900 INFO Updating vulnerability database... 2019-05-16T01:47:03.007+0900 INFO Detecting Alpine vulnerabilities... JSON [ { \"Target\": \"php-app/composer.lock\", \"Vulnerabilities\": null }, { \"Target\": \"node-app/package-lock.json\", \"Vulnerabilities\": [ { \"VulnerabilityID\": \"CVE-2018-16487\", \"PkgName\": \"lodash\", \"InstalledVersion\": \"4.17.4\", \"FixedVersion\": \"\\u003e=4.17.11\", \"Title\": \"lodash: Prototype pollution in utilities function\", \"Description\": \"A prototype pollution vulnerability was found in lodash \\u003c4.17.11 where the functions merge, mergeWith, and defaultsDeep can be tricked into adding or modifying properties of Object.prototype.\", \"Severity\": \"HIGH\", \"References\": [ \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16487\", ] } ] }, { \"Target\": \"trivy-ci-test (alpine 3.7.1)\", \"Vulnerabilities\": [ { \"VulnerabilityID\": \"CVE-2018-16840\", \"PkgName\": \"curl\", \"InstalledVersion\": \"7.61.0-r0\", \"FixedVersion\": \"7.61.1-r1\", \"Title\": \"curl: Use-after-free when closing \\\"easy\\\" handle in Curl_close()\", \"Description\": \"A heap use-after-free flaw was found in curl versions from 7.59.0 through 7.61.1 in the code related to closing an easy handle. \", \"Severity\": \"HIGH\", \"References\": [ \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16840\", ] }, { \"VulnerabilityID\": \"CVE-2019-3822\", \"PkgName\": \"curl\", \"InstalledVersion\": \"7.61.0-r0\", \"FixedVersion\": \"7.61.1-r2\", \"Title\": \"curl: NTLMv2 type-3 header stack buffer overflow\", \"Description\": \"libcurl versions from 7.36.0 to before 7.64.0 are vulnerable to a stack-based buffer overflow. \", \"Severity\": \"HIGH\", \"References\": [ \"https://curl.haxx.se/docs/CVE-2019-3822.html\", \"https://lists.apache.org/thread.html/8338a0f605bdbb3a6098bb76f666a95fc2b2f53f37fa1ecc89f1146f@%3Cdevnull.infra.apache.org%3E\" ] }, { \"VulnerabilityID\": \"CVE-2018-16839\", \"PkgName\": \"curl\", \"InstalledVersion\": \"7.61.0-r0\", \"FixedVersion\": \"7.61.1-r1\", \"Title\": \"curl: Integer overflow leading to heap-based buffer overflow in Curl_sasl_create_plain_message()\", \"Description\": \"Curl versions 7.33.0 through 7.61.1 are vulnerable to a buffer overrun in the SASL authentication code that may lead to denial of service.\", \"Severity\": \"HIGH\", \"References\": [ \"https://github.com/curl/curl/commit/f3a24d7916b9173c69a3e0ee790102993833d6c5\", ] }, { \"VulnerabilityID\": \"CVE-2018-19486\", \"PkgName\": \"git\", \"InstalledVersion\": \"2.15.2-r0\", \"FixedVersion\": \"2.15.3-r0\", \"Title\": \"git: Improper handling of PATH allows for commands to be executed from the current directory\", \"Description\": \"Git before 2.19.2 on Linux and UNIX executes commands from the current working directory (as if '.' were at the end of $PATH) in certain cases involving the run_command() API and run-command.c, because there was a dangerous change from execvp to execv during 2017.\", \"Severity\": \"HIGH\", \"References\": [ \"https://usn.ubuntu.com/3829-1/\", ] }, { \"VulnerabilityID\": \"CVE-2018-17456\", \"PkgName\": \"git\", \"InstalledVersion\": \"2.15.2-r0\", \"FixedVersion\": \"2.15.3-r0\", \"Title\": \"git: arbitrary code execution via .gitmodules\", \"Description\": \"Git before 2.14.5, 2.15.x before 2.15.3, 2.16.x before 2.16.5, 2.17.x before 2.17.2, 2.18.x before 2.18.1, and 2.19.x before 2.19.1 allows remote code execution during processing of a recursive \\\"git clone\\\" of a superproject if a .gitmodules file has a URL field beginning with a '-' character.\", \"Severity\": \"HIGH\", \"References\": [ \"http://www.securitytracker.com/id/1041811\", ] } ] }, { \"Target\": \"python-app/Pipfile.lock\", \"Vulnerabilities\": null }, { \"Target\": \"ruby-app/Gemfile.lock\", \"Vulnerabilities\": null }, { \"Target\": \"rust-app/Cargo.lock\", \"Vulnerabilities\": null } ] VulnerabilityID , PkgName , InstalledVersion , and Severity in Vulnerabilities are always filled with values, but other fields might be empty. SARIF Sarif can be generated with the --format sarif option. $ trivy image --format sarif -o report.sarif golang:1.12-alpine This SARIF file can be uploaded to GitHub code scanning results, and there is a Trivy GitHub Action for automating this process. Template Custom Template $ trivy image --format template --template \"{{ range . }} {{ .Target }} {{ end }}\" golang:1.12-alpine Result 2020-01-02T18:02:32.856+0100 INFO Detecting Alpine vulnerabilities... golang:1.12-alpine (alpine 3.10.2) You can compute different figures within the template using sprig functions. As an example you can summarize the different classes of issues: $ trivy image --format template --template '{{- $critical := 0 }}{{- $high := 0 }}{{- range . }}{{- range .Vulnerabilities }}{{- if eq .Severity \"CRITICAL\" }}{{- $critical = add $critical 1 }}{{- end }}{{- if eq .Severity \"HIGH\" }}{{- $high = add $high 1 }}{{- end }}{{- end }}{{- end }}Critical: {{ $critical }}, High: {{ $high }}' golang:1.12-alpine Result Critical: 0, High: 2 For other features of sprig, see the official sprig documentation. Load templates from a file You can load templates from a file prefixing the template path with an @. $ trivy image --format template --template \"@/path/to/template\" golang:1.12-alpine Default Templates If Trivy is installed using rpm then default templates can be found at /usr/local/share/trivy/templates . XML In the following example using the template junit.tpl XML can be generated. $ trivy image --format template --template \"@contrib/junit.tpl\" -o junit-report.xml golang:1.12-alpine ASFF Trivy also supports an ASFF template for reporting findings to AWS Security Hub HTML $ trivy image --format template --template \"@contrib/html.tpl\" -o report.html golang:1.12-alpine The following example shows use of default HTML template when Trivy is installed using rpm. $ trivy image --format template --template \"@/usr/local/share/trivy/templates/html.tpl\" -o report.html golang:1.12-alpine","title":"Report Formats"},{"location":"docs/vulnerability/examples/report/#report-formats","text":"","title":"Report Formats"},{"location":"docs/vulnerability/examples/report/#table-default","text":"$ trivy image -f table golang:1.12-alpine","title":"Table (Default)"},{"location":"docs/vulnerability/examples/report/#json","text":"$ trivy image -f json -o results.json golang:1.12-alpine Caution v0.20.0 changes the JSON schema. For more details, see here . Result 2019-05-16T01:46:31.777+0900 INFO Updating vulnerability database... 2019-05-16T01:47:03.007+0900 INFO Detecting Alpine vulnerabilities... JSON [ { \"Target\": \"php-app/composer.lock\", \"Vulnerabilities\": null }, { \"Target\": \"node-app/package-lock.json\", \"Vulnerabilities\": [ { \"VulnerabilityID\": \"CVE-2018-16487\", \"PkgName\": \"lodash\", \"InstalledVersion\": \"4.17.4\", \"FixedVersion\": \"\\u003e=4.17.11\", \"Title\": \"lodash: Prototype pollution in utilities function\", \"Description\": \"A prototype pollution vulnerability was found in lodash \\u003c4.17.11 where the functions merge, mergeWith, and defaultsDeep can be tricked into adding or modifying properties of Object.prototype.\", \"Severity\": \"HIGH\", \"References\": [ \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16487\", ] } ] }, { \"Target\": \"trivy-ci-test (alpine 3.7.1)\", \"Vulnerabilities\": [ { \"VulnerabilityID\": \"CVE-2018-16840\", \"PkgName\": \"curl\", \"InstalledVersion\": \"7.61.0-r0\", \"FixedVersion\": \"7.61.1-r1\", \"Title\": \"curl: Use-after-free when closing \\\"easy\\\" handle in Curl_close()\", \"Description\": \"A heap use-after-free flaw was found in curl versions from 7.59.0 through 7.61.1 in the code related to closing an easy handle. \", \"Severity\": \"HIGH\", \"References\": [ \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16840\", ] }, { \"VulnerabilityID\": \"CVE-2019-3822\", \"PkgName\": \"curl\", \"InstalledVersion\": \"7.61.0-r0\", \"FixedVersion\": \"7.61.1-r2\", \"Title\": \"curl: NTLMv2 type-3 header stack buffer overflow\", \"Description\": \"libcurl versions from 7.36.0 to before 7.64.0 are vulnerable to a stack-based buffer overflow. \", \"Severity\": \"HIGH\", \"References\": [ \"https://curl.haxx.se/docs/CVE-2019-3822.html\", \"https://lists.apache.org/thread.html/8338a0f605bdbb3a6098bb76f666a95fc2b2f53f37fa1ecc89f1146f@%3Cdevnull.infra.apache.org%3E\" ] }, { \"VulnerabilityID\": \"CVE-2018-16839\", \"PkgName\": \"curl\", \"InstalledVersion\": \"7.61.0-r0\", \"FixedVersion\": \"7.61.1-r1\", \"Title\": \"curl: Integer overflow leading to heap-based buffer overflow in Curl_sasl_create_plain_message()\", \"Description\": \"Curl versions 7.33.0 through 7.61.1 are vulnerable to a buffer overrun in the SASL authentication code that may lead to denial of service.\", \"Severity\": \"HIGH\", \"References\": [ \"https://github.com/curl/curl/commit/f3a24d7916b9173c69a3e0ee790102993833d6c5\", ] }, { \"VulnerabilityID\": \"CVE-2018-19486\", \"PkgName\": \"git\", \"InstalledVersion\": \"2.15.2-r0\", \"FixedVersion\": \"2.15.3-r0\", \"Title\": \"git: Improper handling of PATH allows for commands to be executed from the current directory\", \"Description\": \"Git before 2.19.2 on Linux and UNIX executes commands from the current working directory (as if '.' were at the end of $PATH) in certain cases involving the run_command() API and run-command.c, because there was a dangerous change from execvp to execv during 2017.\", \"Severity\": \"HIGH\", \"References\": [ \"https://usn.ubuntu.com/3829-1/\", ] }, { \"VulnerabilityID\": \"CVE-2018-17456\", \"PkgName\": \"git\", \"InstalledVersion\": \"2.15.2-r0\", \"FixedVersion\": \"2.15.3-r0\", \"Title\": \"git: arbitrary code execution via .gitmodules\", \"Description\": \"Git before 2.14.5, 2.15.x before 2.15.3, 2.16.x before 2.16.5, 2.17.x before 2.17.2, 2.18.x before 2.18.1, and 2.19.x before 2.19.1 allows remote code execution during processing of a recursive \\\"git clone\\\" of a superproject if a .gitmodules file has a URL field beginning with a '-' character.\", \"Severity\": \"HIGH\", \"References\": [ \"http://www.securitytracker.com/id/1041811\", ] } ] }, { \"Target\": \"python-app/Pipfile.lock\", \"Vulnerabilities\": null }, { \"Target\": \"ruby-app/Gemfile.lock\", \"Vulnerabilities\": null }, { \"Target\": \"rust-app/Cargo.lock\", \"Vulnerabilities\": null } ] VulnerabilityID , PkgName , InstalledVersion , and Severity in Vulnerabilities are always filled with values, but other fields might be empty.","title":"JSON"},{"location":"docs/vulnerability/examples/report/#sarif","text":"Sarif can be generated with the --format sarif option. $ trivy image --format sarif -o report.sarif golang:1.12-alpine This SARIF file can be uploaded to GitHub code scanning results, and there is a Trivy GitHub Action for automating this process.","title":"SARIF"},{"location":"docs/vulnerability/examples/report/#template","text":"","title":"Template"},{"location":"docs/vulnerability/examples/report/#custom-template","text":"$ trivy image --format template --template \"{{ range . }} {{ .Target }} {{ end }}\" golang:1.12-alpine Result 2020-01-02T18:02:32.856+0100 INFO Detecting Alpine vulnerabilities... golang:1.12-alpine (alpine 3.10.2) You can compute different figures within the template using sprig functions. As an example you can summarize the different classes of issues: $ trivy image --format template --template '{{- $critical := 0 }}{{- $high := 0 }}{{- range . }}{{- range .Vulnerabilities }}{{- if eq .Severity \"CRITICAL\" }}{{- $critical = add $critical 1 }}{{- end }}{{- if eq .Severity \"HIGH\" }}{{- $high = add $high 1 }}{{- end }}{{- end }}{{- end }}Critical: {{ $critical }}, High: {{ $high }}' golang:1.12-alpine Result Critical: 0, High: 2 For other features of sprig, see the official sprig documentation.","title":"Custom Template"},{"location":"docs/vulnerability/examples/report/#load-templates-from-a-file","text":"You can load templates from a file prefixing the template path with an @. $ trivy image --format template --template \"@/path/to/template\" golang:1.12-alpine","title":"Load templates from a file"},{"location":"docs/vulnerability/examples/report/#default-templates","text":"If Trivy is installed using rpm then default templates can be found at /usr/local/share/trivy/templates .","title":"Default Templates"},{"location":"docs/vulnerability/examples/report/#xml","text":"In the following example using the template junit.tpl XML can be generated. $ trivy image --format template --template \"@contrib/junit.tpl\" -o junit-report.xml golang:1.12-alpine","title":"XML"},{"location":"docs/vulnerability/examples/report/#asff","text":"Trivy also supports an ASFF template for reporting findings to AWS Security Hub","title":"ASFF"},{"location":"docs/vulnerability/examples/report/#html","text":"$ trivy image --format template --template \"@contrib/html.tpl\" -o report.html golang:1.12-alpine The following example shows use of default HTML template when Trivy is installed using rpm. $ trivy image --format template --template \"@/usr/local/share/trivy/templates/html.tpl\" -o report.html golang:1.12-alpine","title":"HTML"},{"location":"docs/vulnerability/languages/golang/","text":"Go Features Trivy supports two types of Go scanning, Go Modules and binaries built by Go. The following table provides an outline of the features Trivy offers. Artifact Offline 1 Dev dependencies Modules \u2713 Include Binaries \u2713 Exclude Note Trivy scans only dependencies of the Go project. Let's say you scan the Docker binary, Trivy doesn't detect vulnerabilities of Docker itself. Also, when you scan go.mod in Kubernetes, the Kubernetes vulnerabilities will not be found. Go Modules Depending on Go versions, the required files are different. Version Required files Offline License >=1.17 go.mod \u2713 - <1.17 go.mod, go.sum \u2713 - In Go 1.17+ projects, Trivy uses go.mod for direct/indirect dependencies. On the other hand, it uses go.mod for direct dependencies and go.sum for indirect dependencies in Go 1.16 or less. Go 1.17+ holds actually needed indirect dependencies in go.mod , and it reduces false detection. go.sum in Go 1.16 or less contains all indirect dependencies that are even not needed for compiling. If you want to have better detection, please consider updating the Go version in your project. Note The Go version doesn't mean your CLI version, but the Go version in your go.mod. module github.com/aquasecurity/trivy go 1.18 require ( github.com/CycloneDX/cyclonedx-go v0.5.0 ... ) To update the Go version in your project, you need to run the following command. $ go mod tidy -go=1.18 Go binaries Trivy scans binaries built by Go. If there is a Go binary in your container image, Trivy automatically finds and scans it. Also, you can scan your local binaries. $ trivy fs ./your_binary It doesn't require the Internet access. \u21a9","title":"Go"},{"location":"docs/vulnerability/languages/golang/#go","text":"","title":"Go"},{"location":"docs/vulnerability/languages/golang/#features","text":"Trivy supports two types of Go scanning, Go Modules and binaries built by Go. The following table provides an outline of the features Trivy offers. Artifact Offline 1 Dev dependencies Modules \u2713 Include Binaries \u2713 Exclude Note Trivy scans only dependencies of the Go project. Let's say you scan the Docker binary, Trivy doesn't detect vulnerabilities of Docker itself. Also, when you scan go.mod in Kubernetes, the Kubernetes vulnerabilities will not be found.","title":"Features"},{"location":"docs/vulnerability/languages/golang/#go-modules","text":"Depending on Go versions, the required files are different. Version Required files Offline License >=1.17 go.mod \u2713 - <1.17 go.mod, go.sum \u2713 - In Go 1.17+ projects, Trivy uses go.mod for direct/indirect dependencies. On the other hand, it uses go.mod for direct dependencies and go.sum for indirect dependencies in Go 1.16 or less. Go 1.17+ holds actually needed indirect dependencies in go.mod , and it reduces false detection. go.sum in Go 1.16 or less contains all indirect dependencies that are even not needed for compiling. If you want to have better detection, please consider updating the Go version in your project. Note The Go version doesn't mean your CLI version, but the Go version in your go.mod. module github.com/aquasecurity/trivy go 1.18 require ( github.com/CycloneDX/cyclonedx-go v0.5.0 ... ) To update the Go version in your project, you need to run the following command. $ go mod tidy -go=1.18","title":"Go Modules"},{"location":"docs/vulnerability/languages/golang/#go-binaries","text":"Trivy scans binaries built by Go. If there is a Go binary in your container image, Trivy automatically finds and scans it. Also, you can scan your local binaries. $ trivy fs ./your_binary It doesn't require the Internet access. \u21a9","title":"Go binaries"},{"location":"docs/vulnerability/scanning/","text":"Vulnerability Scanning Trivy scans Container Images , Rootfs , Filesystem , and Git Repositories to detect vulnerabilities.","title":"Overview"},{"location":"docs/vulnerability/scanning/#vulnerability-scanning","text":"Trivy scans Container Images , Rootfs , Filesystem , and Git Repositories to detect vulnerabilities.","title":"Vulnerability Scanning"},{"location":"docs/vulnerability/scanning/filesystem/","text":"Filesystem Scan a local project including language-specific files. $ trivy fs /path/to/project Standalone mode Local Project Trivy will look for vulnerabilities based on lock files such as Gemfile.lock and package-lock.json. $ trivy fs ~/src/github.com/aquasecurity/trivy-ci-test Result 2020-06-01T17:06:58.652+0300 WARN OS is not detected and vulnerabilities in OS packages are not detected. 2020-06-01T17:06:58.652+0300 INFO Detecting pipenv vulnerabilities... 2020-06-01T17:06:58.691+0300 INFO Detecting cargo vulnerabilities... Pipfile.lock ============ Total: 10 (UNKNOWN: 2, LOW: 0, MEDIUM: 6, HIGH: 2, CRITICAL: 0) +---------------------+------------------+----------+-------------------+------------------------+------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------------------+------------------+----------+-------------------+------------------------+------------------------------------+ | django | CVE-2020-7471 | HIGH | 2.0.9 | 3.0.3, 2.2.10, 1.11.28 | django: potential | | | | | | | SQL injection via | | | | | | | StringAgg(delimiter) | + +------------------+----------+ +------------------------+------------------------------------+ | | CVE-2019-19844 | MEDIUM | | 3.0.1, 2.2.9, 1.11.27 | Django: crafted email address | | | | | | | allows account takeover | + +------------------+ + +------------------------+------------------------------------+ | | CVE-2019-3498 | | | 2.1.5, 2.0.10, 1.11.18 | python-django: Content | | | | | | | spoofing via URL path in | | | | | | | default 404 page | + +------------------+ + +------------------------+------------------------------------+ | | CVE-2019-6975 | | | 2.1.6, 2.0.11, 1.11.19 | python-django: | | | | | | | memory exhaustion in | | | | | | | django.utils.numberformat.format() | +---------------------+------------------+----------+-------------------+------------------------+------------------------------------+ ... Single file It's also possible to scan a single file. $ trivy fs ~/src/github.com/aquasecurity/trivy-ci-test/Pipfile.lock Client/Server mode You must launch Trivy server in advance. $ trivy server Then, Trivy works as a client if you specify the --server option. $ trivy fs --server http://localhost:4954 --severity CRITICAL ./integration/testdata/fixtures/fs/pom/ Result pom.xml (pom) ============= Total: 4 (CRITICAL: 4) +---------------------------------------------+------------------+----------+-------------------+--------------------------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------------------------------------------+------------------+----------+-------------------+--------------------------------+---------------------------------------+ | com.fasterxml.jackson.core:jackson-databind | CVE-2017-17485 | CRITICAL | 2.9.1 | 2.8.11, 2.9.4 | jackson-databind: Unsafe | | | | | | | deserialization due to | | | | | | | incomplete black list (incomplete | | | | | | | fix for CVE-2017-15095)... | | | | | | | -->avd.aquasec.com/nvd/cve-2017-17485 | + +------------------+ + +--------------------------------+---------------------------------------+ | | CVE-2020-9546 | | | 2.7.9.7, 2.8.11.6, 2.9.10.4 | jackson-databind: Serialization | | | | | | | gadgets in shaded-hikari-config | | | | | | | -->avd.aquasec.com/nvd/cve-2020-9546 | + +------------------+ + + +---------------------------------------+ | | CVE-2020-9547 | | | | jackson-databind: Serialization | | | | | | | gadgets in ibatis-sqlmap | | | | | | | -->avd.aquasec.com/nvd/cve-2020-9547 | + +------------------+ + + +---------------------------------------+ | | CVE-2020-9548 | | | | jackson-databind: Serialization | | | | | | | gadgets in anteros-core | | | | | | | -->avd.aquasec.com/nvd/cve-2020-9548 | +---------------------------------------------+------------------+----------+-------------------+--------------------------------+---------------------------------------+","title":"Filesystem"},{"location":"docs/vulnerability/scanning/filesystem/#filesystem","text":"Scan a local project including language-specific files. $ trivy fs /path/to/project","title":"Filesystem"},{"location":"docs/vulnerability/scanning/filesystem/#standalone-mode","text":"","title":"Standalone mode"},{"location":"docs/vulnerability/scanning/filesystem/#local-project","text":"Trivy will look for vulnerabilities based on lock files such as Gemfile.lock and package-lock.json. $ trivy fs ~/src/github.com/aquasecurity/trivy-ci-test Result 2020-06-01T17:06:58.652+0300 WARN OS is not detected and vulnerabilities in OS packages are not detected. 2020-06-01T17:06:58.652+0300 INFO Detecting pipenv vulnerabilities... 2020-06-01T17:06:58.691+0300 INFO Detecting cargo vulnerabilities... Pipfile.lock ============ Total: 10 (UNKNOWN: 2, LOW: 0, MEDIUM: 6, HIGH: 2, CRITICAL: 0) +---------------------+------------------+----------+-------------------+------------------------+------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------------------+------------------+----------+-------------------+------------------------+------------------------------------+ | django | CVE-2020-7471 | HIGH | 2.0.9 | 3.0.3, 2.2.10, 1.11.28 | django: potential | | | | | | | SQL injection via | | | | | | | StringAgg(delimiter) | + +------------------+----------+ +------------------------+------------------------------------+ | | CVE-2019-19844 | MEDIUM | | 3.0.1, 2.2.9, 1.11.27 | Django: crafted email address | | | | | | | allows account takeover | + +------------------+ + +------------------------+------------------------------------+ | | CVE-2019-3498 | | | 2.1.5, 2.0.10, 1.11.18 | python-django: Content | | | | | | | spoofing via URL path in | | | | | | | default 404 page | + +------------------+ + +------------------------+------------------------------------+ | | CVE-2019-6975 | | | 2.1.6, 2.0.11, 1.11.19 | python-django: | | | | | | | memory exhaustion in | | | | | | | django.utils.numberformat.format() | +---------------------+------------------+----------+-------------------+------------------------+------------------------------------+ ...","title":"Local Project"},{"location":"docs/vulnerability/scanning/filesystem/#single-file","text":"It's also possible to scan a single file. $ trivy fs ~/src/github.com/aquasecurity/trivy-ci-test/Pipfile.lock","title":"Single file"},{"location":"docs/vulnerability/scanning/filesystem/#clientserver-mode","text":"You must launch Trivy server in advance. $ trivy server Then, Trivy works as a client if you specify the --server option. $ trivy fs --server http://localhost:4954 --severity CRITICAL ./integration/testdata/fixtures/fs/pom/ Result pom.xml (pom) ============= Total: 4 (CRITICAL: 4) +---------------------------------------------+------------------+----------+-------------------+--------------------------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------------------------------------------+------------------+----------+-------------------+--------------------------------+---------------------------------------+ | com.fasterxml.jackson.core:jackson-databind | CVE-2017-17485 | CRITICAL | 2.9.1 | 2.8.11, 2.9.4 | jackson-databind: Unsafe | | | | | | | deserialization due to | | | | | | | incomplete black list (incomplete | | | | | | | fix for CVE-2017-15095)... | | | | | | | -->avd.aquasec.com/nvd/cve-2017-17485 | + +------------------+ + +--------------------------------+---------------------------------------+ | | CVE-2020-9546 | | | 2.7.9.7, 2.8.11.6, 2.9.10.4 | jackson-databind: Serialization | | | | | | | gadgets in shaded-hikari-config | | | | | | | -->avd.aquasec.com/nvd/cve-2020-9546 | + +------------------+ + + +---------------------------------------+ | | CVE-2020-9547 | | | | jackson-databind: Serialization | | | | | | | gadgets in ibatis-sqlmap | | | | | | | -->avd.aquasec.com/nvd/cve-2020-9547 | + +------------------+ + + +---------------------------------------+ | | CVE-2020-9548 | | | | jackson-databind: Serialization | | | | | | | gadgets in anteros-core | | | | | | | -->avd.aquasec.com/nvd/cve-2020-9548 | +---------------------------------------------+------------------+----------+-------------------+--------------------------------+---------------------------------------+","title":"Client/Server mode"},{"location":"docs/vulnerability/scanning/git-repository/","text":"Git Repository Scan your remote git repository $ trivy repo https://github.com/knqyf263/trivy-ci-test Result 2021-03-09T15:04:19.003+0200 INFO Detecting cargo vulnerabilities... 2021-03-09T15:04:19.005+0200 INFO Detecting pipenv vulnerabilities... Cargo.lock ========== Total: 7 (UNKNOWN: 7, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0) +----------+-------------------+----------+-------------------+------------------------------+---------------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +----------+-------------------+----------+-------------------+------------------------------+---------------------------------------------+ | ammonia | RUSTSEC-2019-0001 | UNKNOWN | 1.9.0 | >= 2.1.0 | Uncontrolled recursion leads | | | | | | | to abort in HTML serialization | | | | | | | -->rustsec.org/advisories/RUSTSEC-2019-0001 | +----------+-------------------+ +-------------------+------------------------------+---------------------------------------------+ | openssl | RUSTSEC-2016-0001 | | 0.8.3 | >= 0.9.0 | SSL/TLS MitM vulnerability | | | | | | | due to insecure defaults | | | | | | | -->rustsec.org/advisories/RUSTSEC-2016-0001 | +----------+-------------------+ +-------------------+------------------------------+---------------------------------------------+ | smallvec | RUSTSEC-2018-0018 | | 0.6.9 | >= 0.6.13 | smallvec creates uninitialized | | | | | | | value of any type | | | | | | | -->rustsec.org/advisories/RUSTSEC-2018-0018 | + +-------------------+ + +------------------------------+---------------------------------------------+ | | RUSTSEC-2019-0009 | | | >= 0.6.10 | Double-free and use-after-free | | | | | | | in SmallVec::grow() | | | | | | | -->rustsec.org/advisories/RUSTSEC-2019-0009 | + +-------------------+ + + +---------------------------------------------+ | | RUSTSEC-2019-0012 | | | | Memory corruption in SmallVec::grow() | | | | | | | -->rustsec.org/advisories/RUSTSEC-2019-0012 | + +-------------------+ + +------------------------------+---------------------------------------------+ | | RUSTSEC-2021-0003 | | | >= 0.6.14, < 1.0.0, >= 1.6.1 | Buffer overflow in SmallVec::insert_many | | | | | | | -->rustsec.org/advisories/RUSTSEC-2021-0003 | +----------+-------------------+ +-------------------+------------------------------+---------------------------------------------+ | tempdir | RUSTSEC-2018-0017 | | 0.3.7 | | `tempdir` crate has been | | | | | | | deprecated; use `tempfile` instead | | | | | | | -->rustsec.org/advisories/RUSTSEC-2018-0017 | +----------+-------------------+----------+-------------------+------------------------------+---------------------------------------------+ Pipfile.lock ============ Total: 20 (UNKNOWN: 3, LOW: 0, MEDIUM: 7, HIGH: 5, CRITICAL: 5) +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | django | CVE-2019-19844 | CRITICAL | 2.0.9 | 3.0.1, 2.2.9, 1.11.27 | Django: crafted email address | | | | | | | allows account takeover | | | | | | | -->avd.aquasec.com/nvd/cve-2019-19844 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-7471 | | | 3.0.3, 2.2.10, 1.11.28 | django: potential SQL injection | | | | | | | via StringAgg(delimiter) | | | | | | | -->avd.aquasec.com/nvd/cve-2020-7471 | + +------------------+----------+ +------------------------+---------------------------------------+ | | CVE-2019-6975 | HIGH | | 2.1.6, 2.0.11, 1.11.19 | python-django: memory exhaustion in | | | | | | | django.utils.numberformat.format() | | | | | | | -->avd.aquasec.com/nvd/cve-2019-6975 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-9402 | | | 3.0.4, 2.2.11, 1.11.29 | django: potential SQL injection | | | | | | | via \"tolerance\" parameter in | | | | | | | GIS functions and aggregates... | | | | | | | -->avd.aquasec.com/nvd/cve-2020-9402 | + +------------------+----------+ +------------------------+---------------------------------------+ | | CVE-2019-3498 | MEDIUM | | 2.1.5, 2.0.10, 1.11.18 | python-django: Content spoofing | | | | | | | via URL path in default 404 page | | | | | | | -->avd.aquasec.com/nvd/cve-2019-3498 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-13254 | | | 3.0.7, 2.2.13 | django: potential data leakage | | | | | | | via malformed memcached keys | | | | | | | -->avd.aquasec.com/nvd/cve-2020-13254 | + +------------------+ + + +---------------------------------------+ | | CVE-2020-13596 | | | | django: possible XSS via | | | | | | | admin ForeignKeyRawIdWidget | | | | | | | -->avd.aquasec.com/nvd/cve-2020-13596 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | django-cors-headers | pyup.io-37132 | UNKNOWN | 2.5.2 | 3.0.0 | In django-cors-headers | | | | | | | version 3.0.0, | | | | | | | ``CORS_ORIGIN_WHITELIST`` | | | | | | | requires URI schemes, and | | | | | | | optionally ports. This... | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | djangorestframework | CVE-2020-25626 | MEDIUM | 3.9.2 | 3.11.2 | django-rest-framework: XSS | | | | | | | Vulnerability in API viewer | | | | | | | -->avd.aquasec.com/nvd/cve-2020-25626 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | httplib2 | CVE-2021-21240 | HIGH | 0.12.1 | 0.19.0 | python-httplib2: Regular | | | | | | | expression denial of | | | | | | | service via malicious header | | | | | | | -->avd.aquasec.com/nvd/cve-2021-21240 | + +------------------+----------+ +------------------------+---------------------------------------+ | | CVE-2020-11078 | MEDIUM | | 0.18.0 | python-httplib2: CRLF injection | | | | | | | via an attacker controlled | | | | | | | unescaped part of uri for... | | | | | | | -->avd.aquasec.com/nvd/cve-2020-11078 | + +------------------+----------+ + +---------------------------------------+ | | pyup.io-38303 | UNKNOWN | | | Httplib2 0.18.0 is an | | | | | | | important security update to | | | | | | | patch a CWE-93 CRLF... | +---------------------+------------------+ +-------------------+------------------------+---------------------------------------+ | jinja2 | pyup.io-39525 | | 2.10.1 | 2.11.3 | This affects the package | | | | | | | jinja2 from 0.0.0 and before | | | | | | | 2.11.3. The ReDOS... | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | py | CVE-2020-29651 | HIGH | 1.8.0 | | python-py: ReDoS in the py.path.svnwc | | | | | | | component via mailicious input | | | | | | | to blame functionality... | | | | | | | -->avd.aquasec.com/nvd/cve-2020-29651 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | pyyaml | CVE-2019-20477 | CRITICAL | 5.1 | | PyYAML: command execution | | | | | | | through python/object/apply | | | | | | | constructor in FullLoader | | | | | | | -->avd.aquasec.com/nvd/cve-2019-20477 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-14343 | | | 5.4 | PyYAML: incomplete | | | | | | | fix for CVE-2020-1747 | | | | | | | -->avd.aquasec.com/nvd/cve-2020-14343 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-1747 | | | 5.3.1 | PyYAML: arbitrary command | | | | | | | execution through python/object/new | | | | | | | when FullLoader is used | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1747 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | urllib3 | CVE-2019-11324 | HIGH | 1.24.1 | 1.24.2 | python-urllib3: Certification | | | | | | | mishandle when error should be thrown | | | | | | | -->avd.aquasec.com/nvd/cve-2019-11324 | + +------------------+----------+ +------------------------+---------------------------------------+ | | CVE-2019-11236 | MEDIUM | | | python-urllib3: CRLF injection | | | | | | | due to not encoding the | | | | | | | '\\r\\n' sequence leading to... | | | | | | | -->avd.aquasec.com/nvd/cve-2019-11236 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-26137 | | | 1.25.9 | python-urllib3: CRLF injection | | | | | | | via HTTP request method | | | | | | | -->avd.aquasec.com/nvd/cve-2020-26137 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ Scanning Private Repositories In order to scan private GitHub or GitLab repositories, the environment variable GITHUB_TOKEN or GITLAB_TOKEN must be set, respectively, with a valid token that has access to the private repository being scanned. The GITHUB_TOKEN environment variable will take precedence over GITLAB_TOKEN , so if a private GitLab repository will be scanned, then GITHUB_TOKEN must be unset. For example: $ export GITHUB_TOKEN=\"your_private_github_token\" $ trivy repo <your private GitHub repo URL> $ $ # or $ export GITLAB_TOKEN=\"your_private_gitlab_token\" $ trivy repo <your private GitLab repo URL>","title":"Git Repository"},{"location":"docs/vulnerability/scanning/git-repository/#git-repository","text":"Scan your remote git repository $ trivy repo https://github.com/knqyf263/trivy-ci-test Result 2021-03-09T15:04:19.003+0200 INFO Detecting cargo vulnerabilities... 2021-03-09T15:04:19.005+0200 INFO Detecting pipenv vulnerabilities... Cargo.lock ========== Total: 7 (UNKNOWN: 7, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0) +----------+-------------------+----------+-------------------+------------------------------+---------------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +----------+-------------------+----------+-------------------+------------------------------+---------------------------------------------+ | ammonia | RUSTSEC-2019-0001 | UNKNOWN | 1.9.0 | >= 2.1.0 | Uncontrolled recursion leads | | | | | | | to abort in HTML serialization | | | | | | | -->rustsec.org/advisories/RUSTSEC-2019-0001 | +----------+-------------------+ +-------------------+------------------------------+---------------------------------------------+ | openssl | RUSTSEC-2016-0001 | | 0.8.3 | >= 0.9.0 | SSL/TLS MitM vulnerability | | | | | | | due to insecure defaults | | | | | | | -->rustsec.org/advisories/RUSTSEC-2016-0001 | +----------+-------------------+ +-------------------+------------------------------+---------------------------------------------+ | smallvec | RUSTSEC-2018-0018 | | 0.6.9 | >= 0.6.13 | smallvec creates uninitialized | | | | | | | value of any type | | | | | | | -->rustsec.org/advisories/RUSTSEC-2018-0018 | + +-------------------+ + +------------------------------+---------------------------------------------+ | | RUSTSEC-2019-0009 | | | >= 0.6.10 | Double-free and use-after-free | | | | | | | in SmallVec::grow() | | | | | | | -->rustsec.org/advisories/RUSTSEC-2019-0009 | + +-------------------+ + + +---------------------------------------------+ | | RUSTSEC-2019-0012 | | | | Memory corruption in SmallVec::grow() | | | | | | | -->rustsec.org/advisories/RUSTSEC-2019-0012 | + +-------------------+ + +------------------------------+---------------------------------------------+ | | RUSTSEC-2021-0003 | | | >= 0.6.14, < 1.0.0, >= 1.6.1 | Buffer overflow in SmallVec::insert_many | | | | | | | -->rustsec.org/advisories/RUSTSEC-2021-0003 | +----------+-------------------+ +-------------------+------------------------------+---------------------------------------------+ | tempdir | RUSTSEC-2018-0017 | | 0.3.7 | | `tempdir` crate has been | | | | | | | deprecated; use `tempfile` instead | | | | | | | -->rustsec.org/advisories/RUSTSEC-2018-0017 | +----------+-------------------+----------+-------------------+------------------------------+---------------------------------------------+ Pipfile.lock ============ Total: 20 (UNKNOWN: 3, LOW: 0, MEDIUM: 7, HIGH: 5, CRITICAL: 5) +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | django | CVE-2019-19844 | CRITICAL | 2.0.9 | 3.0.1, 2.2.9, 1.11.27 | Django: crafted email address | | | | | | | allows account takeover | | | | | | | -->avd.aquasec.com/nvd/cve-2019-19844 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-7471 | | | 3.0.3, 2.2.10, 1.11.28 | django: potential SQL injection | | | | | | | via StringAgg(delimiter) | | | | | | | -->avd.aquasec.com/nvd/cve-2020-7471 | + +------------------+----------+ +------------------------+---------------------------------------+ | | CVE-2019-6975 | HIGH | | 2.1.6, 2.0.11, 1.11.19 | python-django: memory exhaustion in | | | | | | | django.utils.numberformat.format() | | | | | | | -->avd.aquasec.com/nvd/cve-2019-6975 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-9402 | | | 3.0.4, 2.2.11, 1.11.29 | django: potential SQL injection | | | | | | | via \"tolerance\" parameter in | | | | | | | GIS functions and aggregates... | | | | | | | -->avd.aquasec.com/nvd/cve-2020-9402 | + +------------------+----------+ +------------------------+---------------------------------------+ | | CVE-2019-3498 | MEDIUM | | 2.1.5, 2.0.10, 1.11.18 | python-django: Content spoofing | | | | | | | via URL path in default 404 page | | | | | | | -->avd.aquasec.com/nvd/cve-2019-3498 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-13254 | | | 3.0.7, 2.2.13 | django: potential data leakage | | | | | | | via malformed memcached keys | | | | | | | -->avd.aquasec.com/nvd/cve-2020-13254 | + +------------------+ + + +---------------------------------------+ | | CVE-2020-13596 | | | | django: possible XSS via | | | | | | | admin ForeignKeyRawIdWidget | | | | | | | -->avd.aquasec.com/nvd/cve-2020-13596 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | django-cors-headers | pyup.io-37132 | UNKNOWN | 2.5.2 | 3.0.0 | In django-cors-headers | | | | | | | version 3.0.0, | | | | | | | ``CORS_ORIGIN_WHITELIST`` | | | | | | | requires URI schemes, and | | | | | | | optionally ports. This... | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | djangorestframework | CVE-2020-25626 | MEDIUM | 3.9.2 | 3.11.2 | django-rest-framework: XSS | | | | | | | Vulnerability in API viewer | | | | | | | -->avd.aquasec.com/nvd/cve-2020-25626 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | httplib2 | CVE-2021-21240 | HIGH | 0.12.1 | 0.19.0 | python-httplib2: Regular | | | | | | | expression denial of | | | | | | | service via malicious header | | | | | | | -->avd.aquasec.com/nvd/cve-2021-21240 | + +------------------+----------+ +------------------------+---------------------------------------+ | | CVE-2020-11078 | MEDIUM | | 0.18.0 | python-httplib2: CRLF injection | | | | | | | via an attacker controlled | | | | | | | unescaped part of uri for... | | | | | | | -->avd.aquasec.com/nvd/cve-2020-11078 | + +------------------+----------+ + +---------------------------------------+ | | pyup.io-38303 | UNKNOWN | | | Httplib2 0.18.0 is an | | | | | | | important security update to | | | | | | | patch a CWE-93 CRLF... | +---------------------+------------------+ +-------------------+------------------------+---------------------------------------+ | jinja2 | pyup.io-39525 | | 2.10.1 | 2.11.3 | This affects the package | | | | | | | jinja2 from 0.0.0 and before | | | | | | | 2.11.3. The ReDOS... | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | py | CVE-2020-29651 | HIGH | 1.8.0 | | python-py: ReDoS in the py.path.svnwc | | | | | | | component via mailicious input | | | | | | | to blame functionality... | | | | | | | -->avd.aquasec.com/nvd/cve-2020-29651 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | pyyaml | CVE-2019-20477 | CRITICAL | 5.1 | | PyYAML: command execution | | | | | | | through python/object/apply | | | | | | | constructor in FullLoader | | | | | | | -->avd.aquasec.com/nvd/cve-2019-20477 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-14343 | | | 5.4 | PyYAML: incomplete | | | | | | | fix for CVE-2020-1747 | | | | | | | -->avd.aquasec.com/nvd/cve-2020-14343 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-1747 | | | 5.3.1 | PyYAML: arbitrary command | | | | | | | execution through python/object/new | | | | | | | when FullLoader is used | | | | | | | -->avd.aquasec.com/nvd/cve-2020-1747 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+ | urllib3 | CVE-2019-11324 | HIGH | 1.24.1 | 1.24.2 | python-urllib3: Certification | | | | | | | mishandle when error should be thrown | | | | | | | -->avd.aquasec.com/nvd/cve-2019-11324 | + +------------------+----------+ +------------------------+---------------------------------------+ | | CVE-2019-11236 | MEDIUM | | | python-urllib3: CRLF injection | | | | | | | due to not encoding the | | | | | | | '\\r\\n' sequence leading to... | | | | | | | -->avd.aquasec.com/nvd/cve-2019-11236 | + +------------------+ + +------------------------+---------------------------------------+ | | CVE-2020-26137 | | | 1.25.9 | python-urllib3: CRLF injection | | | | | | | via HTTP request method | | | | | | | -->avd.aquasec.com/nvd/cve-2020-26137 | +---------------------+------------------+----------+-------------------+------------------------+---------------------------------------+","title":"Git Repository"},{"location":"docs/vulnerability/scanning/git-repository/#scanning-private-repositories","text":"In order to scan private GitHub or GitLab repositories, the environment variable GITHUB_TOKEN or GITLAB_TOKEN must be set, respectively, with a valid token that has access to the private repository being scanned. The GITHUB_TOKEN environment variable will take precedence over GITLAB_TOKEN , so if a private GitLab repository will be scanned, then GITHUB_TOKEN must be unset. For example: $ export GITHUB_TOKEN=\"your_private_github_token\" $ trivy repo <your private GitHub repo URL> $ $ # or $ export GITLAB_TOKEN=\"your_private_gitlab_token\" $ trivy repo <your private GitLab repo URL>","title":"Scanning Private Repositories"},{"location":"docs/vulnerability/scanning/image/","text":"Image Container Images Simply specify an image name (and a tag). $ trivy image [YOUR_IMAGE_NAME] For example: $ trivy image python:3.4-alpine Result 2019-05-16T01:20:43.180+0900 INFO Updating vulnerability database... 2019-05-16T01:20:53.029+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 (alpine 3.9.2) =================================== Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0) +---------+------------------+----------+-------------------+---------------+--------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+--------------------------------+ | openssl | CVE-2019-1543 | MEDIUM | 1.1.1a-r1 | 1.1.1b-r1 | openssl: ChaCha20-Poly1305 | | | | | | | with long nonces | +---------+------------------+----------+-------------------+---------------+--------------------------------+ Tar Files $ docker pull ruby:3.1-alpine3.15 $ docker save ruby:3.1-alpine3.15 -o ruby-3.1.tar $ trivy image --input ruby-3.1.tar Result 2022-02-03T10:08:19.127Z INFO Detected OS: alpine 2022-02-03T10:08:19.127Z WARN This OS version is not on the EOL list: alpine 3.15 2022-02-03T10:08:19.127Z INFO Detecting Alpine vulnerabilities... 2022-02-03T10:08:19.127Z INFO Number of language-specific files: 2 2022-02-03T10:08:19.127Z INFO Detecting gemspec vulnerabilities... 2022-02-03T10:08:19.128Z INFO Detecting node-pkg vulnerabilities... 2022-02-03T10:08:19.128Z WARN This OS version is no longer supported by the distribution: alpine 3.15.0 2022-02-03T10:08:19.128Z WARN The vulnerability detection may be insufficient because security updates are not provided ruby-3.1.tar (alpine 3.15.0) ============================ Total: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0) +----------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +----------+------------------+----------+-------------------+---------------+---------------------------------------+ | gmp | CVE-2021-43618 | HIGH | 6.2.1-r0 | 6.2.1-r1 | gmp: Integer overflow and resultant | | | | | | | buffer overflow via crafted input | | | | | | | -->avd.aquasec.com/nvd/cve-2021-43618 | +----------+ + + + + + | gmp-dev | | | | | | | | | | | | | | | | | | | | +----------+ + + + + + | libgmpxx | | | | | | | | | | | | | | | | | | | | +----------+------------------+----------+-------------------+---------------+---------------------------------------+ Node.js (node-pkg) ================== Total: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0) Ruby (gemspec) ============== Total: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)","title":"Container Image"},{"location":"docs/vulnerability/scanning/image/#image","text":"","title":"Image"},{"location":"docs/vulnerability/scanning/image/#container-images","text":"Simply specify an image name (and a tag). $ trivy image [YOUR_IMAGE_NAME] For example: $ trivy image python:3.4-alpine Result 2019-05-16T01:20:43.180+0900 INFO Updating vulnerability database... 2019-05-16T01:20:53.029+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 (alpine 3.9.2) =================================== Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0) +---------+------------------+----------+-------------------+---------------+--------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+--------------------------------+ | openssl | CVE-2019-1543 | MEDIUM | 1.1.1a-r1 | 1.1.1b-r1 | openssl: ChaCha20-Poly1305 | | | | | | | with long nonces | +---------+------------------+----------+-------------------+---------------+--------------------------------+","title":"Container Images"},{"location":"docs/vulnerability/scanning/image/#tar-files","text":"$ docker pull ruby:3.1-alpine3.15 $ docker save ruby:3.1-alpine3.15 -o ruby-3.1.tar $ trivy image --input ruby-3.1.tar Result 2022-02-03T10:08:19.127Z INFO Detected OS: alpine 2022-02-03T10:08:19.127Z WARN This OS version is not on the EOL list: alpine 3.15 2022-02-03T10:08:19.127Z INFO Detecting Alpine vulnerabilities... 2022-02-03T10:08:19.127Z INFO Number of language-specific files: 2 2022-02-03T10:08:19.127Z INFO Detecting gemspec vulnerabilities... 2022-02-03T10:08:19.128Z INFO Detecting node-pkg vulnerabilities... 2022-02-03T10:08:19.128Z WARN This OS version is no longer supported by the distribution: alpine 3.15.0 2022-02-03T10:08:19.128Z WARN The vulnerability detection may be insufficient because security updates are not provided ruby-3.1.tar (alpine 3.15.0) ============================ Total: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0) +----------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +----------+------------------+----------+-------------------+---------------+---------------------------------------+ | gmp | CVE-2021-43618 | HIGH | 6.2.1-r0 | 6.2.1-r1 | gmp: Integer overflow and resultant | | | | | | | buffer overflow via crafted input | | | | | | | -->avd.aquasec.com/nvd/cve-2021-43618 | +----------+ + + + + + | gmp-dev | | | | | | | | | | | | | | | | | | | | +----------+ + + + + + | libgmpxx | | | | | | | | | | | | | | | | | | | | +----------+------------------+----------+-------------------+---------------+---------------------------------------+ Node.js (node-pkg) ================== Total: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0) Ruby (gemspec) ============== Total: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)","title":"Tar Files"},{"location":"docs/vulnerability/scanning/rootfs/","text":"Rootfs Scan a root filesystem (such as a host machine, a virtual machine image, or an unpacked container image filesystem). $ trivy rootfs /path/to/rootfs From Inside Containers Scan your container from inside the container. $ docker run --rm -it alpine:3.11 / # curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin / # trivy rootfs / Result 2021-03-08T05:22:26.378Z INFO Need to update DB 2021-03-08T05:22:26.380Z INFO Downloading DB... 20.37 MiB / 20.37 MiB [-------------------------------------------------------------------------------------------------------------------------------------] 100.00% 8.24 MiB p/s 2s 2021-03-08T05:22:30.134Z INFO Detecting Alpine vulnerabilities... 2021-03-08T05:22:30.138Z INFO Trivy skips scanning programming language libraries because no supported file was detected 313430f09696 (alpine 3.11.7) ============================ Total: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 6, CRITICAL: 0) +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | libcrypto1.1 | CVE-2021-23839 | HIGH | 1.1.1i-r0 | 1.1.1j-r0 | openssl: incorrect SSLv2 | | | | | | | rollback protection | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23839 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23840 | | | | openssl: integer | | | | | | | overflow in CipherUpdate | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23840 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23841 | | | | openssl: NULL pointer dereference | | | | | | | in X509_issuer_and_serial_hash() | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23841 | +--------------+------------------+ + + +---------------------------------------+ | libssl1.1 | CVE-2021-23839 | | | | openssl: incorrect SSLv2 | | | | | | | rollback protection | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23839 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23840 | | | | openssl: integer | | | | | | | overflow in CipherUpdate | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23840 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23841 | | | | openssl: NULL pointer dereference | | | | | | | in X509_issuer_and_serial_hash() | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23841 | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ Other Examples Embed in Dockerfile Unpacked container image filesystem","title":"Rootfs"},{"location":"docs/vulnerability/scanning/rootfs/#rootfs","text":"Scan a root filesystem (such as a host machine, a virtual machine image, or an unpacked container image filesystem). $ trivy rootfs /path/to/rootfs","title":"Rootfs"},{"location":"docs/vulnerability/scanning/rootfs/#from-inside-containers","text":"Scan your container from inside the container. $ docker run --rm -it alpine:3.11 / # curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin / # trivy rootfs / Result 2021-03-08T05:22:26.378Z INFO Need to update DB 2021-03-08T05:22:26.380Z INFO Downloading DB... 20.37 MiB / 20.37 MiB [-------------------------------------------------------------------------------------------------------------------------------------] 100.00% 8.24 MiB p/s 2s 2021-03-08T05:22:30.134Z INFO Detecting Alpine vulnerabilities... 2021-03-08T05:22:30.138Z INFO Trivy skips scanning programming language libraries because no supported file was detected 313430f09696 (alpine 3.11.7) ============================ Total: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 6, CRITICAL: 0) +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | libcrypto1.1 | CVE-2021-23839 | HIGH | 1.1.1i-r0 | 1.1.1j-r0 | openssl: incorrect SSLv2 | | | | | | | rollback protection | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23839 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23840 | | | | openssl: integer | | | | | | | overflow in CipherUpdate | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23840 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23841 | | | | openssl: NULL pointer dereference | | | | | | | in X509_issuer_and_serial_hash() | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23841 | +--------------+------------------+ + + +---------------------------------------+ | libssl1.1 | CVE-2021-23839 | | | | openssl: incorrect SSLv2 | | | | | | | rollback protection | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23839 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23840 | | | | openssl: integer | | | | | | | overflow in CipherUpdate | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23840 | + +------------------+ + + +---------------------------------------+ | | CVE-2021-23841 | | | | openssl: NULL pointer dereference | | | | | | | in X509_issuer_and_serial_hash() | | | | | | | -->avd.aquasec.com/nvd/cve-2021-23841 | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+","title":"From Inside Containers"},{"location":"docs/vulnerability/scanning/rootfs/#other-examples","text":"Embed in Dockerfile Unpacked container image filesystem","title":"Other Examples"},{"location":"getting-started/further/","text":"Further Reading Presentations Aqua Security YouTube Channel Trivy - container image scanning Using Trivy in client server mode Tweaking Trivy output to fit your workflow How does a vulnerability scanner identify packages? CNCF Webinar 2020 Trivy Open Source Scanner for Container Images \u2013 Just Download and Run! KubeCon + CloudNativeCon Europe 2020 Virtual Handling Container Vulnerabilities with Open Policy Agent - Teppei Fukuda, Aqua Security Blogs Trivy Vulnerability Scanner Joins the Aqua Open-source Family Trivy Image Vulnerability Scanner Now Under Apache 2.0 License DevSecOps with Trivy and GitHub Actions Find Image Vulnerabilities Using GitHub and Aqua Security Trivy Action Using Trivy to Discover Vulnerabilities in VS Code Projects","title":"Further Reading"},{"location":"getting-started/further/#further-reading","text":"","title":"Further Reading"},{"location":"getting-started/further/#presentations","text":"Aqua Security YouTube Channel Trivy - container image scanning Using Trivy in client server mode Tweaking Trivy output to fit your workflow How does a vulnerability scanner identify packages? CNCF Webinar 2020 Trivy Open Source Scanner for Container Images \u2013 Just Download and Run! KubeCon + CloudNativeCon Europe 2020 Virtual Handling Container Vulnerabilities with Open Policy Agent - Teppei Fukuda, Aqua Security","title":"Presentations"},{"location":"getting-started/further/#blogs","text":"Trivy Vulnerability Scanner Joins the Aqua Open-source Family Trivy Image Vulnerability Scanner Now Under Apache 2.0 License DevSecOps with Trivy and GitHub Actions Find Image Vulnerabilities Using GitHub and Aqua Security Trivy Action Using Trivy to Discover Vulnerabilities in VS Code Projects","title":"Blogs"},{"location":"getting-started/installation/","text":"Installation RHEL/CentOS Repository Add repository setting to /etc/yum.repos.d . cat << EOF | sudo tee -a /etc/yum.repos.d/trivy.repo [trivy] name=Trivy repository baseurl=https://aquasecurity.github.io/trivy-repo/rpm/releases/$releasever/$basearch/ gpgcheck=0 enabled=1 EOF sudo yum -y update sudo yum -y install trivy RPM rpm -ivh https://github.com/aquasecurity/trivy/releases/download/v0.27.1/trivy_0.27.1_Linux-64bit.rpm Debian/Ubuntu Repository Add repository setting to /etc/apt/sources.list.d . sudo apt-get install wget apt-transport-https gnupg lsb-release wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add - echo deb https://aquasecurity.github.io/trivy-repo/deb $( lsb_release -sc ) main | sudo tee -a /etc/apt/sources.list.d/trivy.list sudo apt-get update sudo apt-get install trivy DEB wget https://github.com/aquasecurity/trivy/releases/download/v0.27.1/trivy_0.27.1_Linux-64bit.deb sudo dpkg -i trivy_0.27.1_Linux-64bit.deb Arch Linux Package trivy-bin can be installed from the Arch User Repository. pikaur pikaur -Sy trivy-bin yay yay -Sy trivy-bin Homebrew You can use homebrew on macOS and Linux. brew install aquasecurity/trivy/trivy Nix/NixOS You can use nix on Linux or macOS and on others unofficially. Note that trivy is currently only in the unstable channels. nix-env --install trivy Or through your configuration on NixOS or with home-manager as usual Install Script This script downloads Trivy binary based on your OS and architecture. curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.27.1 Binary Download the archive file for your operating system/architecture from here . Unpack the archive, and put the binary somewhere in your $PATH (on UNIX-y systems, /usr/local/bin or the like). Make sure it has execution bits turned on. From source mkdir -p $GOPATH /src/github.com/aquasecurity cd $GOPATH /src/github.com/aquasecurity git clone --depth 1 --branch v0.27.1 https://github.com/aquasecurity/trivy cd trivy/cmd/trivy/ export GO111MODULE = on go install Docker Docker Hub Replace [YOUR_CACHE_DIR] with the cache directory on your machine. docker pull aquasec/trivy:0.27.1 Example: Linux docker run --rm -v [ YOUR_CACHE_DIR ] :/root/.cache/ aquasec/trivy:0.27.1 image [ YOUR_IMAGE_NAME ] macOS docker run --rm -v $HOME /Library/Caches:/root/.cache/ aquasec/trivy:0.27.1 image [ YOUR_IMAGE_NAME If you would like to scan the image on your host machine, you need to mount docker.sock . docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\ -v $HOME /Library/Caches:/root/.cache/ aquasec/trivy:0.27.1 python:3.4-alpine Please re-pull latest aquasec/trivy if an error occurred. Result 2019 -05-16T01:20:43.180+0900 INFO Updating vulnerability database... 2019 -05-16T01:20:53.029+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 ( alpine 3 .9.2 ) =================================== Total: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 1 , HIGH: 0 , CRITICAL: 0 ) +---------+------------------+----------+-------------------+---------------+--------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+--------------------------------+ | openssl | CVE-2019-1543 | MEDIUM | 1 .1.1a-r1 | 1 .1.1b-r1 | openssl: ChaCha20-Poly1305 | | | | | | | with long nonces | +---------+------------------+----------+-------------------+---------------+--------------------------------+ GitHub Container Registry The same image is hosted on GitHub Container Registry as well. docker pull ghcr.io/aquasecurity/trivy:0.27.1 Amazon ECR Public The same image is hosted on Amazon ECR Public as well. docker pull public.ecr.aws/aquasecurity/trivy:0.27.1 Helm Installing from the Aqua Chart Repository helm repo add aquasecurity https://aquasecurity.github.io/helm-charts/ helm repo update helm search repo trivy helm install my-trivy aquasecurity/trivy Installing the Chart To install the chart with the release name my-release : helm install my-release . The command deploys Trivy on the Kubernetes cluster in the default configuration. The Parameters section lists the parameters that can be configured during installation. Tip : List all releases using helm list .","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#rhelcentos","text":"Repository Add repository setting to /etc/yum.repos.d . cat << EOF | sudo tee -a /etc/yum.repos.d/trivy.repo [trivy] name=Trivy repository baseurl=https://aquasecurity.github.io/trivy-repo/rpm/releases/$releasever/$basearch/ gpgcheck=0 enabled=1 EOF sudo yum -y update sudo yum -y install trivy RPM rpm -ivh https://github.com/aquasecurity/trivy/releases/download/v0.27.1/trivy_0.27.1_Linux-64bit.rpm","title":"RHEL/CentOS"},{"location":"getting-started/installation/#debianubuntu","text":"Repository Add repository setting to /etc/apt/sources.list.d . sudo apt-get install wget apt-transport-https gnupg lsb-release wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add - echo deb https://aquasecurity.github.io/trivy-repo/deb $( lsb_release -sc ) main | sudo tee -a /etc/apt/sources.list.d/trivy.list sudo apt-get update sudo apt-get install trivy DEB wget https://github.com/aquasecurity/trivy/releases/download/v0.27.1/trivy_0.27.1_Linux-64bit.deb sudo dpkg -i trivy_0.27.1_Linux-64bit.deb","title":"Debian/Ubuntu"},{"location":"getting-started/installation/#arch-linux","text":"Package trivy-bin can be installed from the Arch User Repository. pikaur pikaur -Sy trivy-bin yay yay -Sy trivy-bin","title":"Arch Linux"},{"location":"getting-started/installation/#homebrew","text":"You can use homebrew on macOS and Linux. brew install aquasecurity/trivy/trivy","title":"Homebrew"},{"location":"getting-started/installation/#nixnixos","text":"You can use nix on Linux or macOS and on others unofficially. Note that trivy is currently only in the unstable channels. nix-env --install trivy Or through your configuration on NixOS or with home-manager as usual","title":"Nix/NixOS"},{"location":"getting-started/installation/#install-script","text":"This script downloads Trivy binary based on your OS and architecture. curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.27.1","title":"Install Script"},{"location":"getting-started/installation/#binary","text":"Download the archive file for your operating system/architecture from here . Unpack the archive, and put the binary somewhere in your $PATH (on UNIX-y systems, /usr/local/bin or the like). Make sure it has execution bits turned on.","title":"Binary"},{"location":"getting-started/installation/#from-source","text":"mkdir -p $GOPATH /src/github.com/aquasecurity cd $GOPATH /src/github.com/aquasecurity git clone --depth 1 --branch v0.27.1 https://github.com/aquasecurity/trivy cd trivy/cmd/trivy/ export GO111MODULE = on go install","title":"From source"},{"location":"getting-started/installation/#docker","text":"","title":"Docker"},{"location":"getting-started/installation/#docker-hub","text":"Replace [YOUR_CACHE_DIR] with the cache directory on your machine. docker pull aquasec/trivy:0.27.1 Example: Linux docker run --rm -v [ YOUR_CACHE_DIR ] :/root/.cache/ aquasec/trivy:0.27.1 image [ YOUR_IMAGE_NAME ] macOS docker run --rm -v $HOME /Library/Caches:/root/.cache/ aquasec/trivy:0.27.1 image [ YOUR_IMAGE_NAME If you would like to scan the image on your host machine, you need to mount docker.sock . docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\ -v $HOME /Library/Caches:/root/.cache/ aquasec/trivy:0.27.1 python:3.4-alpine Please re-pull latest aquasec/trivy if an error occurred. Result 2019 -05-16T01:20:43.180+0900 INFO Updating vulnerability database... 2019 -05-16T01:20:53.029+0900 INFO Detecting Alpine vulnerabilities... python:3.4-alpine3.9 ( alpine 3 .9.2 ) =================================== Total: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 1 , HIGH: 0 , CRITICAL: 0 ) +---------+------------------+----------+-------------------+---------------+--------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +---------+------------------+----------+-------------------+---------------+--------------------------------+ | openssl | CVE-2019-1543 | MEDIUM | 1 .1.1a-r1 | 1 .1.1b-r1 | openssl: ChaCha20-Poly1305 | | | | | | | with long nonces | +---------+------------------+----------+-------------------+---------------+--------------------------------+","title":"Docker Hub"},{"location":"getting-started/installation/#github-container-registry","text":"The same image is hosted on GitHub Container Registry as well. docker pull ghcr.io/aquasecurity/trivy:0.27.1","title":"GitHub Container Registry"},{"location":"getting-started/installation/#amazon-ecr-public","text":"The same image is hosted on Amazon ECR Public as well. docker pull public.ecr.aws/aquasecurity/trivy:0.27.1","title":"Amazon ECR Public"},{"location":"getting-started/installation/#helm","text":"","title":"Helm"},{"location":"getting-started/installation/#installing-from-the-aqua-chart-repository","text":"helm repo add aquasecurity https://aquasecurity.github.io/helm-charts/ helm repo update helm search repo trivy helm install my-trivy aquasecurity/trivy","title":"Installing from the Aqua Chart Repository"},{"location":"getting-started/installation/#installing-the-chart","text":"To install the chart with the release name my-release : helm install my-release . The command deploys Trivy on the Kubernetes cluster in the default configuration. The Parameters section lists the parameters that can be configured during installation. Tip : List all releases using helm list .","title":"Installing the Chart"},{"location":"getting-started/overview/","text":"Overview Trivy detects three types of security issues: Vulnerabilities OS packages (Alpine, Red Hat Universal Base Image, Red Hat Enterprise Linux, CentOS, AlmaLinux, Rocky Linux, CBL-Mariner, Oracle Linux, Debian, Ubuntu, Amazon Linux, openSUSE Leap, SUSE Enterprise Linux, Photon OS and Distroless) Language-specific packages (Bundler, Composer, Pipenv, Poetry, npm, yarn, Cargo, NuGet, Maven, and Go) Misconfigurations Kubernetes Docker Terraform CloudFormation more coming soon Secrets AWS access key GCP service account GitHub personal access token etc. Trivy can scan three different artifacts: Container Images Filesystem Git Repositories It is designed to be used in CI. Before pushing to a container registry or deploying your application, you can scan your local container image and other artifacts easily. See Integrations for details.","title":"Overview"},{"location":"getting-started/overview/#overview","text":"Trivy detects three types of security issues: Vulnerabilities OS packages (Alpine, Red Hat Universal Base Image, Red Hat Enterprise Linux, CentOS, AlmaLinux, Rocky Linux, CBL-Mariner, Oracle Linux, Debian, Ubuntu, Amazon Linux, openSUSE Leap, SUSE Enterprise Linux, Photon OS and Distroless) Language-specific packages (Bundler, Composer, Pipenv, Poetry, npm, yarn, Cargo, NuGet, Maven, and Go) Misconfigurations Kubernetes Docker Terraform CloudFormation more coming soon Secrets AWS access key GCP service account GitHub personal access token etc. Trivy can scan three different artifacts: Container Images Filesystem Git Repositories It is designed to be used in CI. Before pushing to a container registry or deploying your application, you can scan your local container image and other artifacts easily. See Integrations for details.","title":"Overview"},{"location":"getting-started/quickstart/","text":"Quick Start Scan image for vulnerabilities and secrets Simply specify an image name (and a tag). $ trivy image [YOUR_IMAGE_NAME] For example: $ trivy image myimage:1.0.0 2022 -04-21T18:56:44.099+0300 INFO Detected OS: alpine 2022 -04-21T18:56:44.099+0300 INFO Detecting Alpine vulnerabilities... 2022 -04-21T18:56:44.101+0300 INFO Number of language-specific files: 0 myimage:1.0.0 ( alpine 3 .15.0 ) ============================= Total: 6 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 2 ) +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | busybox | CVE-2022-28391 | CRITICAL | 1 .34.1-r3 | 1 .34.1-r5 | CVE-2022-28391 affecting | | | | | | | package busybox 1 .35.0 | | | | | | | -->avd.aquasec.com/nvd/cve-2022-28391 | +--------------+------------------ | | -------------------+---------------+---------------------------------------+ | ssl_client | CVE-2022-28391 | | 1 .34.1-r3 | 1 .34.1-r5 | CVE-2022-28391 affecting | | | | | | | package busybox 1 .35.0 | | | | | | | -->avd.aquasec.com/nvd/cve-2022-28391 | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ app/deploy.sh ( secrets ) ======================= Total: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 1 ) +----------+-------------------+----------+---------+--------------------------------+ | CATEGORY | DESCRIPTION | SEVERITY | LINE NO | MATCH | +----------+-------------------+----------+---------+--------------------------------+ | AWS | AWS Access Key ID | CRITICAL | 10 | export AWS_ACCESS_KEY_ID = ***** | +----------+-------------------+----------+---------+--------------------------------+ For more details, see vulnerability and secret pages. Scan directory for misconfigurations Simply specify a directory containing IaC files such as Terraform and Dockerfile. $ trivy config [YOUR_IAC_DIR] For example: $ ls build/ Dockerfile $ trivy config ./build 2021 -07-09T10:06:29.188+0300 INFO Need to update the built-in policies 2021 -07-09T10:06:29.188+0300 INFO Downloading the built-in policies... 2021 -07-09T10:06:30.520+0300 INFO Detected config files: 1 Dockerfile ( dockerfile ) ======================= Tests: 23 ( SUCCESSES: 22 , FAILURES: 1 , EXCEPTIONS: 0 ) Failures: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ For more details, see here .","title":"Quick Start"},{"location":"getting-started/quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"getting-started/quickstart/#scan-image-for-vulnerabilities-and-secrets","text":"Simply specify an image name (and a tag). $ trivy image [YOUR_IMAGE_NAME] For example: $ trivy image myimage:1.0.0 2022 -04-21T18:56:44.099+0300 INFO Detected OS: alpine 2022 -04-21T18:56:44.099+0300 INFO Detecting Alpine vulnerabilities... 2022 -04-21T18:56:44.101+0300 INFO Number of language-specific files: 0 myimage:1.0.0 ( alpine 3 .15.0 ) ============================= Total: 6 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 2 ) +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION | TITLE | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ | busybox | CVE-2022-28391 | CRITICAL | 1 .34.1-r3 | 1 .34.1-r5 | CVE-2022-28391 affecting | | | | | | | package busybox 1 .35.0 | | | | | | | -->avd.aquasec.com/nvd/cve-2022-28391 | +--------------+------------------ | | -------------------+---------------+---------------------------------------+ | ssl_client | CVE-2022-28391 | | 1 .34.1-r3 | 1 .34.1-r5 | CVE-2022-28391 affecting | | | | | | | package busybox 1 .35.0 | | | | | | | -->avd.aquasec.com/nvd/cve-2022-28391 | +--------------+------------------+----------+-------------------+---------------+---------------------------------------+ app/deploy.sh ( secrets ) ======================= Total: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 0 , CRITICAL: 1 ) +----------+-------------------+----------+---------+--------------------------------+ | CATEGORY | DESCRIPTION | SEVERITY | LINE NO | MATCH | +----------+-------------------+----------+---------+--------------------------------+ | AWS | AWS Access Key ID | CRITICAL | 10 | export AWS_ACCESS_KEY_ID = ***** | +----------+-------------------+----------+---------+--------------------------------+ For more details, see vulnerability and secret pages.","title":"Scan image for vulnerabilities and secrets"},{"location":"getting-started/quickstart/#scan-directory-for-misconfigurations","text":"Simply specify a directory containing IaC files such as Terraform and Dockerfile. $ trivy config [YOUR_IAC_DIR] For example: $ ls build/ Dockerfile $ trivy config ./build 2021 -07-09T10:06:29.188+0300 INFO Need to update the built-in policies 2021 -07-09T10:06:29.188+0300 INFO Downloading the built-in policies... 2021 -07-09T10:06:30.520+0300 INFO Detected config files: 1 Dockerfile ( dockerfile ) ======================= Tests: 23 ( SUCCESSES: 22 , FAILURES: 1 , EXCEPTIONS: 0 ) Failures: 1 ( UNKNOWN: 0 , LOW: 0 , MEDIUM: 0 , HIGH: 1 , CRITICAL: 0 ) +---------------------------+------------+----------------------+----------+------------------------------------------+ | TYPE | MISCONF ID | CHECK | SEVERITY | MESSAGE | +---------------------------+------------+----------------------+----------+------------------------------------------+ | Dockerfile Security Check | DS002 | Image user is 'root' | HIGH | Last USER command in | | | | | | Dockerfile should not be 'root' | | | | | | -->avd.aquasec.com/appshield/ds002 | +---------------------------+------------+----------------------+----------+------------------------------------------+ For more details, see here .","title":"Scan directory for misconfigurations"}]}